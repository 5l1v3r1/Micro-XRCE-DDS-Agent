// Copyright 2017 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Payloads.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _Payloads_H_
#define _Payloads_H_

// TODO Poner en el contexto.
#include "DDSXRCETypes.h"

#include <array>
#include <stdint.h>
#include <string>
#include <vector>

namespace eprosima {
namespace fastcdr {
class Cdr;
}
} // namespace eprosima

namespace eprosima {
namespace micrortps {

/*!
 * @brief This class represents the structure CREATE_CLIENT_Payload defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class CREATE_CLIENT_Payload : public eprosima::micrortps::BaseObjectRequest
{
  public:
    /*!
     * @brief Default constructor.
     */
    CREATE_CLIENT_Payload();

    /*!
     * @brief Default destructor.
     */
    virtual ~CREATE_CLIENT_Payload();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::CREATE_CLIENT_Payload that will be copied.
     */
    CREATE_CLIENT_Payload(const CREATE_CLIENT_Payload& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::CREATE_CLIENT_Payload that will be copied.
     */
    CREATE_CLIENT_Payload(CREATE_CLIENT_Payload&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::CREATE_CLIENT_Payload that will be copied.
     */
    CREATE_CLIENT_Payload& operator=(const CREATE_CLIENT_Payload& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::CREATE_CLIENT_Payload that will be copied.
     */
    CREATE_CLIENT_Payload& operator=(CREATE_CLIENT_Payload&& x);

    /*!
     * @brief This function copies the value in member object_representation
     * @param _object_representation New value to be copied in member object_representation
     */
    inline void object_representation(const eprosima::micrortps::OBJK_CLIENT_Representation& _object_representation)
    {
        m_object_representation = _object_representation;
    }

    /*!
     * @brief This function moves the value in member object_representation
     * @param _object_representation New value to be moved in member object_representation
     */
    inline void object_representation(eprosima::micrortps::OBJK_CLIENT_Representation&& _object_representation)
    {
        m_object_representation = std::move(_object_representation);
    }

    /*!
     * @brief This function returns a constant reference to member object_representation
     * @return Constant reference to member object_representation
     */
    inline const eprosima::micrortps::OBJK_CLIENT_Representation& object_representation() const
    {
        return m_object_representation;
    }

    /*!
     * @brief This function returns a reference to member object_representation
     * @return Reference to member object_representation
     */
    inline eprosima::micrortps::OBJK_CLIENT_Representation& object_representation()
    {
        return m_object_representation;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

   /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::OBJK_CLIENT_Representation m_object_representation;
};

/*!
 * @brief This class represents the structure CREATE_Payload defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class CREATE_Payload : public eprosima::micrortps::BaseObjectRequest
{
  public:
    /*!
     * @brief Default constructor.
     */
    CREATE_Payload();

    /*!
     * @brief Default destructor.
     */
    virtual ~CREATE_Payload();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::CREATE_Payload that will be copied.
     */
    CREATE_Payload(const CREATE_Payload& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::CREATE_Payload that will be copied.
     */
    CREATE_Payload(CREATE_Payload&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::CREATE_Payload that will be copied.
     */
    CREATE_Payload& operator=(const CREATE_Payload& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::CREATE_Payload that will be copied.
     */
    CREATE_Payload& operator=(CREATE_Payload&& x);

    /*!
     * @brief This function copies the value in member object_representation
     * @param _object_representation New value to be copied in member object_representation
     */
    inline void object_representation(const eprosima::micrortps::ObjectVariant& _object_representation)
    {
        m_object_representation = _object_representation;
    }

    /*!
     * @brief This function moves the value in member object_representation
     * @param _object_representation New value to be moved in member object_representation
     */
    inline void object_representation(eprosima::micrortps::ObjectVariant&& _object_representation)
    {
        m_object_representation = std::move(_object_representation);
    }

    /*!
     * @brief This function returns a constant reference to member object_representation
     * @return Constant reference to member object_representation
     */
    inline const eprosima::micrortps::ObjectVariant& object_representation() const
    {
        return m_object_representation;
    }

    /*!
     * @brief This function returns a reference to member object_representation
     * @return Reference to member object_representation
     */
    inline eprosima::micrortps::ObjectVariant& object_representation()
    {
        return m_object_representation;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::ObjectVariant m_object_representation;
};
/*!
 * @brief This class represents the structure DELETE_RESOURCE_Payload defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class DELETE_RESOURCE_Payload : public eprosima::micrortps::BaseObjectRequest
{
  public:
    /*!
     * @brief Default constructor.
     */
    DELETE_RESOURCE_Payload();

    /*!
     * @brief Default destructor.
     */
    virtual ~DELETE_RESOURCE_Payload();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DELETE_RESOURCE_Payload that will be copied.
     */
    DELETE_RESOURCE_Payload(const DELETE_RESOURCE_Payload& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DELETE_RESOURCE_Payload that will be copied.
     */
    DELETE_RESOURCE_Payload(DELETE_RESOURCE_Payload&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DELETE_RESOURCE_Payload that will be copied.
     */
    DELETE_RESOURCE_Payload& operator=(const DELETE_RESOURCE_Payload& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DELETE_RESOURCE_Payload that will be copied.
     */
    DELETE_RESOURCE_Payload& operator=(DELETE_RESOURCE_Payload&& x);

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);
};
/*!
 * @brief This class represents the structure RESOURCE_STATUS_Payload defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class RESOURCE_STATUS_Payload : public eprosima::micrortps::BaseObjectReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    RESOURCE_STATUS_Payload();

    /*!
     * @brief Default destructor.
     */
    virtual ~RESOURCE_STATUS_Payload();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::RESOURCE_STATUS_Payload that will be copied.
     */
    RESOURCE_STATUS_Payload(const RESOURCE_STATUS_Payload& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::RESOURCE_STATUS_Payload that will be copied.
     */
    RESOURCE_STATUS_Payload(RESOURCE_STATUS_Payload&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::RESOURCE_STATUS_Payload that will be copied.
     */
    RESOURCE_STATUS_Payload& operator=(const RESOURCE_STATUS_Payload& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::RESOURCE_STATUS_Payload that will be copied.
     */
    RESOURCE_STATUS_Payload& operator=(RESOURCE_STATUS_Payload&& x);

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);
};
/*!
 * @brief This class represents the structure GET_INFO_Payload defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class GET_INFO_Payload : public eprosima::micrortps::BaseObjectRequest
{
  public:
    /*!
     * @brief Default constructor.
     */
    GET_INFO_Payload();

    /*!
     * @brief Default destructor.
     */
    virtual ~GET_INFO_Payload();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::GET_INFO_Payload that will be copied.
     */
    GET_INFO_Payload(const GET_INFO_Payload& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::GET_INFO_Payload that will be copied.
     */
    GET_INFO_Payload(GET_INFO_Payload&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::GET_INFO_Payload that will be copied.
     */
    GET_INFO_Payload& operator=(const GET_INFO_Payload& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::GET_INFO_Payload that will be copied.
     */
    GET_INFO_Payload& operator=(GET_INFO_Payload&& x);

    /*!
     * @brief This function sets a value in member info_mask
     * @param _info_mask New value for member info_mask
     */
    inline void info_mask(eprosima::micrortps::InfoMask _info_mask)
    {
        m_info_mask = _info_mask;
    }

    /*!
     * @brief This function returns the value of member info_mask
     * @return Value of member info_mask
     */
    inline eprosima::micrortps::InfoMask info_mask() const
    {
        return m_info_mask;
    }

    /*!
     * @brief This function returns a reference to member info_mask
     * @return Reference to member info_mask
     */
    inline eprosima::micrortps::InfoMask& info_mask()
    {
        return m_info_mask;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::InfoMask m_info_mask;
};
/*!
 * @brief This class represents the structure INFO_Payload defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class INFO_Payload : public eprosima::micrortps::BaseObjectReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    INFO_Payload();

    /*!
     * @brief Default destructor.
     */
    virtual ~INFO_Payload();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::INFO_Payload that will be copied.
     */
    INFO_Payload(const INFO_Payload& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::INFO_Payload that will be copied.
     */
    INFO_Payload(INFO_Payload&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::INFO_Payload that will be copied.
     */
    INFO_Payload& operator=(const INFO_Payload& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::INFO_Payload that will be copied.
     */
    INFO_Payload& operator=(INFO_Payload&& x);

    /*!
     * @brief This function copies the value in member info
     * @param _info New value to be copied in member info
     */
    inline void info(const eprosima::micrortps::Info& _info)
    {
        m_info = _info;
    }

    /*!
     * @brief This function moves the value in member info
     * @param _info New value to be moved in member info
     */
    inline void info(eprosima::micrortps::Info&& _info)
    {
        m_info = std::move(_info);
    }

    /*!
     * @brief This function returns a constant reference to member info
     * @return Constant reference to member info
     */
    inline const eprosima::micrortps::Info& info() const
    {
        return m_info;
    }

    /*!
     * @brief This function returns a reference to member info
     * @return Reference to member info
     */
    inline eprosima::micrortps::Info& info()
    {
        return m_info;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::Info m_info;
};
/*!
 * @brief This class represents the structure READ_DATA_Payload defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class READ_DATA_Payload : public eprosima::micrortps::BaseObjectRequest
{
  public:
    /*!
     * @brief Default constructor.
     */
    READ_DATA_Payload();

    /*!
     * @brief Default destructor.
     */
    virtual ~READ_DATA_Payload();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::READ_DATA_Payload that will be copied.
     */
    READ_DATA_Payload(const READ_DATA_Payload& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::READ_DATA_Payload that will be copied.
     */
    READ_DATA_Payload(READ_DATA_Payload&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::READ_DATA_Payload that will be copied.
     */
    READ_DATA_Payload& operator=(const READ_DATA_Payload& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::READ_DATA_Payload that will be copied.
     */
    READ_DATA_Payload& operator=(READ_DATA_Payload&& x);

    /*!
     * @brief This function copies the value in member read_specification
     * @param _read_specification New value to be copied in member read_specification
     */
    inline void read_specification(const eprosima::micrortps::ReadSpecification& _read_specification)
    {
        m_read_specification = _read_specification;
    }

    /*!
     * @brief This function moves the value in member read_specification
     * @param _read_specification New value to be moved in member read_specification
     */
    inline void read_specification(eprosima::micrortps::ReadSpecification&& _read_specification)
    {
        m_read_specification = std::move(_read_specification);
    }

    /*!
     * @brief This function returns a constant reference to member read_specification
     * @return Constant reference to member read_specification
     */
    inline const eprosima::micrortps::ReadSpecification& read_specification() const
    {
        return m_read_specification;
    }

    /*!
     * @brief This function returns a reference to member read_specification
     * @return Reference to member read_specification
     */
    inline eprosima::micrortps::ReadSpecification& read_specification()
    {
        return m_read_specification;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::ReadSpecification m_read_specification;
};
/*!
 * @brief This class represents the structure DATA_Payload_Data defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class DATA_Payload_Data : public eprosima::micrortps::BaseObjectReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    DATA_Payload_Data();

    /*!
     * @brief Default destructor.
     */
    virtual ~DATA_Payload_Data();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_Data that will be copied.
     */
    DATA_Payload_Data(const DATA_Payload_Data& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_Data that will be copied.
     */
    DATA_Payload_Data(DATA_Payload_Data&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_Data that will be copied.
     */
    DATA_Payload_Data& operator=(const DATA_Payload_Data& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_Data that will be copied.
     */
    DATA_Payload_Data& operator=(DATA_Payload_Data&& x);

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    inline void data(const eprosima::micrortps::SampleData& _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    inline void data(eprosima::micrortps::SampleData&& _data)
    {
        m_data = std::move(_data);
    }

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    inline const eprosima::micrortps::SampleData& data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    inline eprosima::micrortps::SampleData& data()
    {
        return m_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::SampleData m_data;
};
/*!
 * @brief This class represents the structure DATA_Payload_Sample defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class DATA_Payload_Sample : public eprosima::micrortps::BaseObjectReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    DATA_Payload_Sample();

    /*!
     * @brief Default destructor.
     */
    virtual ~DATA_Payload_Sample();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_Sample that will be copied.
     */
    DATA_Payload_Sample(const DATA_Payload_Sample& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_Sample that will be copied.
     */
    DATA_Payload_Sample(DATA_Payload_Sample&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_Sample that will be copied.
     */
    DATA_Payload_Sample& operator=(const DATA_Payload_Sample& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_Sample that will be copied.
     */
    DATA_Payload_Sample& operator=(DATA_Payload_Sample&& x);

    /*!
     * @brief This function copies the value in member sample
     * @param _sample New value to be copied in member sample
     */
    inline void sample(const eprosima::micrortps::Sample& _sample)
    {
        m_sample = _sample;
    }

    /*!
     * @brief This function moves the value in member sample
     * @param _sample New value to be moved in member sample
     */
    inline void sample(eprosima::micrortps::Sample&& _sample)
    {
        m_sample = std::move(_sample);
    }

    /*!
     * @brief This function returns a constant reference to member sample
     * @return Constant reference to member sample
     */
    inline const eprosima::micrortps::Sample& sample() const
    {
        return m_sample;
    }

    /*!
     * @brief This function returns a reference to member sample
     * @return Reference to member sample
     */
    inline eprosima::micrortps::Sample& sample()
    {
        return m_sample;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::Sample m_sample;
};
/*!
 * @brief This class represents the structure DATA_Payload_DataSeq defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class DATA_Payload_DataSeq : public eprosima::micrortps::BaseObjectReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    DATA_Payload_DataSeq();

    /*!
     * @brief Default destructor.
     */
    virtual ~DATA_Payload_DataSeq();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_DataSeq that will be copied.
     */
    DATA_Payload_DataSeq(const DATA_Payload_DataSeq& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_DataSeq that will be copied.
     */
    DATA_Payload_DataSeq(DATA_Payload_DataSeq&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_DataSeq that will be copied.
     */
    DATA_Payload_DataSeq& operator=(const DATA_Payload_DataSeq& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_DataSeq that will be copied.
     */
    DATA_Payload_DataSeq& operator=(DATA_Payload_DataSeq&& x);

    /*!
     * @brief This function copies the value in member data_seq
     * @param _data_seq New value to be copied in member data_seq
     */
    inline void data_seq(const std::vector<eprosima::micrortps::SampleData>& _data_seq)
    {
        m_data_seq = _data_seq;
    }

    /*!
     * @brief This function moves the value in member data_seq
     * @param _data_seq New value to be moved in member data_seq
     */
    inline void data_seq(std::vector<eprosima::micrortps::SampleData>&& _data_seq)
    {
        m_data_seq = std::move(_data_seq);
    }

    /*!
     * @brief This function returns a constant reference to member data_seq
     * @return Constant reference to member data_seq
     */
    inline const std::vector<eprosima::micrortps::SampleData>& data_seq() const
    {
        return m_data_seq;
    }

    /*!
     * @brief This function returns a reference to member data_seq
     * @return Reference to member data_seq
     */
    inline std::vector<eprosima::micrortps::SampleData>& data_seq()
    {
        return m_data_seq;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    std::vector<eprosima::micrortps::SampleData> m_data_seq;
};
/*!
 * @brief This class represents the structure DATA_Payload_SampleSeq defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class DATA_Payload_SampleSeq : public eprosima::micrortps::BaseObjectReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    DATA_Payload_SampleSeq();

    /*!
     * @brief Default destructor.
     */
    virtual ~DATA_Payload_SampleSeq();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_SampleSeq that will be copied.
     */
    DATA_Payload_SampleSeq(const DATA_Payload_SampleSeq& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_SampleSeq that will be copied.
     */
    DATA_Payload_SampleSeq(DATA_Payload_SampleSeq&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_SampleSeq that will be copied.
     */
    DATA_Payload_SampleSeq& operator=(const DATA_Payload_SampleSeq& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_SampleSeq that will be copied.
     */
    DATA_Payload_SampleSeq& operator=(DATA_Payload_SampleSeq&& x);

    /*!
     * @brief This function copies the value in member sample_seq
     * @param _sample_seq New value to be copied in member sample_seq
     */
    inline void sample_seq(const std::vector<eprosima::micrortps::Sample>& _sample_seq)
    {
        m_sample_seq = _sample_seq;
    }

    /*!
     * @brief This function moves the value in member sample_seq
     * @param _sample_seq New value to be moved in member sample_seq
     */
    inline void sample_seq(std::vector<eprosima::micrortps::Sample>&& _sample_seq)
    {
        m_sample_seq = std::move(_sample_seq);
    }

    /*!
     * @brief This function returns a constant reference to member sample_seq
     * @return Constant reference to member sample_seq
     */
    inline const std::vector<eprosima::micrortps::Sample>& sample_seq() const
    {
        return m_sample_seq;
    }

    /*!
     * @brief This function returns a reference to member sample_seq
     * @return Reference to member sample_seq
     */
    inline std::vector<eprosima::micrortps::Sample>& sample_seq()
    {
        return m_sample_seq;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    std::vector<eprosima::micrortps::Sample> m_sample_seq;
};
/*!
 * @brief This class represents the structure DATA_Payload_PackedSamples defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class DATA_Payload_PackedSamples : public eprosima::micrortps::BaseObjectReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    DATA_Payload_PackedSamples();

    /*!
     * @brief Default destructor.
     */
    virtual ~DATA_Payload_PackedSamples();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_PackedSamples that will be copied.
     */
    DATA_Payload_PackedSamples(const DATA_Payload_PackedSamples& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_PackedSamples that will be copied.
     */
    DATA_Payload_PackedSamples(DATA_Payload_PackedSamples&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_PackedSamples that will be copied.
     */
    DATA_Payload_PackedSamples& operator=(const DATA_Payload_PackedSamples& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DATA_Payload_PackedSamples that will be copied.
     */
    DATA_Payload_PackedSamples& operator=(DATA_Payload_PackedSamples&& x);

    /*!
     * @brief This function copies the value in member packed_samples
     * @param _packed_samples New value to be copied in member packed_samples
     */
    inline void packed_samples(const eprosima::micrortps::PackedSamples& _packed_samples)
    {
        m_packed_samples = _packed_samples;
    }

    /*!
     * @brief This function moves the value in member packed_samples
     * @param _packed_samples New value to be moved in member packed_samples
     */
    inline void packed_samples(eprosima::micrortps::PackedSamples&& _packed_samples)
    {
        m_packed_samples = std::move(_packed_samples);
    }

    /*!
     * @brief This function returns a constant reference to member packed_samples
     * @return Constant reference to member packed_samples
     */
    inline const eprosima::micrortps::PackedSamples& packed_samples() const
    {
        return m_packed_samples;
    }

    /*!
     * @brief This function returns a reference to member packed_samples
     * @return Reference to member packed_samples
     */
    inline eprosima::micrortps::PackedSamples& packed_samples()
    {
        return m_packed_samples;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::PackedSamples m_packed_samples;
};
/*!
 * @brief This class represents the structure WRITE_DATA_Payload defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class WRITE_DATA_Payload : public eprosima::micrortps::BaseObjectRequest
{
  public:
    /*!
     * @brief Default constructor.
     */
    WRITE_DATA_Payload();

    /*!
     * @brief Default destructor.
     */
    virtual ~WRITE_DATA_Payload();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::WRITE_DATA_Payload that will be copied.
     */
    WRITE_DATA_Payload(const WRITE_DATA_Payload& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::WRITE_DATA_Payload that will be copied.
     */
    WRITE_DATA_Payload(WRITE_DATA_Payload&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::WRITE_DATA_Payload that will be copied.
     */
    WRITE_DATA_Payload& operator=(const WRITE_DATA_Payload& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::WRITE_DATA_Payload that will be copied.
     */
    WRITE_DATA_Payload& operator=(WRITE_DATA_Payload&& x);

    /*!
     * @brief This function copies the value in member data_to_write
     * @param _data_to_write New value to be copied in member data_to_write
     */
    inline void data_to_write(const eprosima::micrortps::DataRepresentation& _data_to_write)
    {
        m_data_to_write = _data_to_write;
    }

    /*!
     * @brief This function moves the value in member data_to_write
     * @param _data_to_write New value to be moved in member data_to_write
     */
    inline void data_to_write(eprosima::micrortps::DataRepresentation&& _data_to_write)
    {
        m_data_to_write = std::move(_data_to_write);
    }

    /*!
     * @brief This function returns a constant reference to member data_to_write
     * @return Constant reference to member data_to_write
     */
    inline const eprosima::micrortps::DataRepresentation& data_to_write() const
    {
        return m_data_to_write;
    }

    /*!
     * @brief This function returns a reference to member data_to_write
     * @return Reference to member data_to_write
     */
    inline eprosima::micrortps::DataRepresentation& data_to_write()
    {
        return m_data_to_write;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr& cdr);

  private:
    eprosima::micrortps::DataRepresentation m_data_to_write;
};
} // namespace micrortps
} // namespace eprosima

#endif // _Payloads_H_