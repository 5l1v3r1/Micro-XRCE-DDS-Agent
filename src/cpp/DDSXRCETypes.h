// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file dds_xrce_types.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _dds_xrce_types_H_
#define _dds_xrce_types_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(dds_xrce_types_SOURCE)
#define dds_xrce_types_DllAPI __declspec( dllexport )
#else
#define dds_xrce_types_DllAPI __declspec( dllimport )
#endif // dds_xrce_types_SOURCE
#else
#define dds_xrce_types_DllAPI
#endif
#else
#define dds_xrce_types_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace dds
{
    namespace xrce
    {
        typedef std::array<uint8_t, 4> ClientKey;
        typedef uint8_t ObjectKind;
        const dds::xrce::ObjectKind OBJK_INVALID = 0x0;
        const dds::xrce::ObjectKind OBJK_PARTICIPANT = 0x1;
        const dds::xrce::ObjectKind OBJK_TOPIC = 0x4;
        const dds::xrce::ObjectKind OBJK_DATAWRITER = 0x3;
        const dds::xrce::ObjectKind OBJK_DATAREADER = 0x7;
        const dds::xrce::ObjectKind OBJK_SUBSCRIBER = 0x8;
        const dds::xrce::ObjectKind OBJK_PUBLISHER = 0x9;
        const dds::xrce::ObjectKind OBJK_TYPE = 0x10;
        const dds::xrce::ObjectKind OBJK_QOSPROFILE = 0x11;
        const dds::xrce::ObjectKind OBJK_APPLICATION = 0x20;
        const dds::xrce::ObjectKind OBJK_CLIENT = 0x21;
        typedef std::array<uint8_t, 2> ObjectId;
        typedef std::array<uint8_t, 4> XrceCookie;
        typedef std::array<uint8_t, 2> XrceVersion;
        typedef std::array<uint8_t, 2> XrceVendorId;
        /*!
         * @brief This class represents the structure Time_t defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class Time_t
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Time_t();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Time_t();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::Time_t that will be copied.
             */
            eProsima_user_DllExport Time_t(const Time_t &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::Time_t that will be copied.
             */
            eProsima_user_DllExport Time_t(Time_t &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::Time_t that will be copied.
             */
            eProsima_user_DllExport Time_t& operator=(const Time_t &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::Time_t that will be copied.
             */
            eProsima_user_DllExport Time_t& operator=(Time_t &&x);
            
            /*!
             * @brief This function sets a value in member seconds
             * @param _seconds New value for member seconds
             */
            inline eProsima_user_DllExport void seconds(int32_t _seconds)
            {
                m_seconds = _seconds;
            }

            /*!
             * @brief This function returns the value of member seconds
             * @return Value of member seconds
             */
            inline eProsima_user_DllExport int32_t seconds() const
            {
                return m_seconds;
            }

            /*!
             * @brief This function returns a reference to member seconds
             * @return Reference to member seconds
             */
            inline eProsima_user_DllExport int32_t& seconds()
            {
                return m_seconds;
            }
            /*!
             * @brief This function sets a value in member nanoseconds
             * @param _nanoseconds New value for member nanoseconds
             */
            inline eProsima_user_DllExport void nanoseconds(uint32_t _nanoseconds)
            {
                m_nanoseconds = _nanoseconds;
            }

            /*!
             * @brief This function returns the value of member nanoseconds
             * @return Value of member nanoseconds
             */
            inline eProsima_user_DllExport uint32_t nanoseconds() const
            {
                return m_nanoseconds;
            }

            /*!
             * @brief This function returns a reference to member nanoseconds
             * @return Reference to member nanoseconds
             */
            inline eProsima_user_DllExport uint32_t& nanoseconds()
            {
                return m_nanoseconds;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::Time_t& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            int32_t m_seconds;
            uint32_t m_nanoseconds;
        };
        typedef uint8_t SessionId;
        const dds::xrce::SessionId SESSIONID_NONE_WITH_CLIENT_KEY = 0x00;
        const dds::xrce::SessionId SESSIONID_NONE_WITHOUT_CLIENT_KEY = 0x80;
        typedef uint8_t StreamId;
        const dds::xrce::SessionId STREAMID_NONE = 0x00;
        const dds::xrce::SessionId STREAMID_BUILTIN_BEST_EFFORTS = 0x01;
        const dds::xrce::SessionId STREAMID_BUILTIN_RELIABLE = 0x80;
        /*!
         * @brief This class represents the structure OBJK_CLIENT_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_CLIENT_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_CLIENT_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_CLIENT_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_CLIENT_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_CLIENT_Representation(const OBJK_CLIENT_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_CLIENT_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_CLIENT_Representation(OBJK_CLIENT_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_CLIENT_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_CLIENT_Representation& operator=(const OBJK_CLIENT_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_CLIENT_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_CLIENT_Representation& operator=(OBJK_CLIENT_Representation &&x);
            
            /*!
             * @brief This function copies the value in member xrce_cookie
             * @param _xrce_cookie New value to be copied in member xrce_cookie
             */
            inline eProsima_user_DllExport void xrce_cookie(const dds::xrce::XrceCookie &_xrce_cookie)
            {
                m_xrce_cookie = _xrce_cookie;
            }

            /*!
             * @brief This function moves the value in member xrce_cookie
             * @param _xrce_cookie New value to be moved in member xrce_cookie
             */
            inline eProsima_user_DllExport void xrce_cookie(dds::xrce::XrceCookie &&_xrce_cookie)
            {
                m_xrce_cookie = std::move(_xrce_cookie);
            }

            /*!
             * @brief This function returns a constant reference to member xrce_cookie
             * @return Constant reference to member xrce_cookie
             */
            inline eProsima_user_DllExport const dds::xrce::XrceCookie& xrce_cookie() const
            {
                return m_xrce_cookie;
            }

            /*!
             * @brief This function returns a reference to member xrce_cookie
             * @return Reference to member xrce_cookie
             */
            inline eProsima_user_DllExport dds::xrce::XrceCookie& xrce_cookie()
            {
                return m_xrce_cookie;
            }
            /*!
             * @brief This function copies the value in member xrce_version
             * @param _xrce_version New value to be copied in member xrce_version
             */
            inline eProsima_user_DllExport void xrce_version(const dds::xrce::XrceVersion &_xrce_version)
            {
                m_xrce_version = _xrce_version;
            }

            /*!
             * @brief This function moves the value in member xrce_version
             * @param _xrce_version New value to be moved in member xrce_version
             */
            inline eProsima_user_DllExport void xrce_version(dds::xrce::XrceVersion &&_xrce_version)
            {
                m_xrce_version = std::move(_xrce_version);
            }

            /*!
             * @brief This function returns a constant reference to member xrce_version
             * @return Constant reference to member xrce_version
             */
            inline eProsima_user_DllExport const dds::xrce::XrceVersion& xrce_version() const
            {
                return m_xrce_version;
            }

            /*!
             * @brief This function returns a reference to member xrce_version
             * @return Reference to member xrce_version
             */
            inline eProsima_user_DllExport dds::xrce::XrceVersion& xrce_version()
            {
                return m_xrce_version;
            }
            /*!
             * @brief This function copies the value in member xrce_vendor_id
             * @param _xrce_vendor_id New value to be copied in member xrce_vendor_id
             */
            inline eProsima_user_DllExport void xrce_vendor_id(const dds::xrce::XrceVendorId &_xrce_vendor_id)
            {
                m_xrce_vendor_id = _xrce_vendor_id;
            }

            /*!
             * @brief This function moves the value in member xrce_vendor_id
             * @param _xrce_vendor_id New value to be moved in member xrce_vendor_id
             */
            inline eProsima_user_DllExport void xrce_vendor_id(dds::xrce::XrceVendorId &&_xrce_vendor_id)
            {
                m_xrce_vendor_id = std::move(_xrce_vendor_id);
            }

            /*!
             * @brief This function returns a constant reference to member xrce_vendor_id
             * @return Constant reference to member xrce_vendor_id
             */
            inline eProsima_user_DllExport const dds::xrce::XrceVendorId& xrce_vendor_id() const
            {
                return m_xrce_vendor_id;
            }

            /*!
             * @brief This function returns a reference to member xrce_vendor_id
             * @return Reference to member xrce_vendor_id
             */
            inline eProsima_user_DllExport dds::xrce::XrceVendorId& xrce_vendor_id()
            {
                return m_xrce_vendor_id;
            }
            /*!
             * @brief This function copies the value in member client_timestamp
             * @param _client_timestamp New value to be copied in member client_timestamp
             */
            inline eProsima_user_DllExport void client_timestamp(const dds::xrce::Time_t &_client_timestamp)
            {
                m_client_timestamp = _client_timestamp;
            }

            /*!
             * @brief This function moves the value in member client_timestamp
             * @param _client_timestamp New value to be moved in member client_timestamp
             */
            inline eProsima_user_DllExport void client_timestamp(dds::xrce::Time_t &&_client_timestamp)
            {
                m_client_timestamp = std::move(_client_timestamp);
            }

            /*!
             * @brief This function returns a constant reference to member client_timestamp
             * @return Constant reference to member client_timestamp
             */
            inline eProsima_user_DllExport const dds::xrce::Time_t& client_timestamp() const
            {
                return m_client_timestamp;
            }

            /*!
             * @brief This function returns a reference to member client_timestamp
             * @return Reference to member client_timestamp
             */
            inline eProsima_user_DllExport dds::xrce::Time_t& client_timestamp()
            {
                return m_client_timestamp;
            }
            /*!
             * @brief This function copies the value in member client_key
             * @param _client_key New value to be copied in member client_key
             */
            inline eProsima_user_DllExport void client_key(const dds::xrce::ClientKey &_client_key)
            {
                m_client_key = _client_key;
            }

            /*!
             * @brief This function moves the value in member client_key
             * @param _client_key New value to be moved in member client_key
             */
            inline eProsima_user_DllExport void client_key(dds::xrce::ClientKey &&_client_key)
            {
                m_client_key = std::move(_client_key);
            }

            /*!
             * @brief This function returns a constant reference to member client_key
             * @return Constant reference to member client_key
             */
            inline eProsima_user_DllExport const dds::xrce::ClientKey& client_key() const
            {
                return m_client_key;
            }

            /*!
             * @brief This function returns a reference to member client_key
             * @return Reference to member client_key
             */
            inline eProsima_user_DllExport dds::xrce::ClientKey& client_key()
            {
                return m_client_key;
            }
            /*!
             * @brief This function sets a value in member session_id
             * @param _session_id New value for member session_id
             */
            inline eProsima_user_DllExport void session_id(dds::xrce::SessionId _session_id)
            {
                m_session_id = _session_id;
            }

            /*!
             * @brief This function returns the value of member session_id
             * @return Value of member session_id
             */
            inline eProsima_user_DllExport dds::xrce::SessionId session_id() const
            {
                return m_session_id;
            }

            /*!
             * @brief This function returns a reference to member session_id
             * @return Reference to member session_id
             */
            inline eProsima_user_DllExport dds::xrce::SessionId& session_id()
            {
                return m_session_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_CLIENT_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::XrceCookie m_xrce_cookie;
            dds::xrce::XrceVersion m_xrce_version;
            dds::xrce::XrceVendorId m_xrce_vendor_id;
            dds::xrce::Time_t m_client_timestamp;
            dds::xrce::ClientKey m_client_key;
            dds::xrce::SessionId m_session_id;
        };
        typedef uint8_t RepresentationFormat;
        const dds::xrce::RepresentationFormat REPRESENTATION_BY_NAME = 0x01;
        const dds::xrce::RepresentationFormat REPRESENTATION_AS_STRING = 0x02;
        const dds::xrce::RepresentationFormat REPRESENTATION_BINARY = 0x03;
        /*!
         * @brief This class represents the union OBJK_Representation3Formats defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_Representation3Formats
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_Representation3Formats();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_Representation3Formats();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_Representation3Formats that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation3Formats(const OBJK_Representation3Formats &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_Representation3Formats that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation3Formats(OBJK_Representation3Formats &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_Representation3Formats that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation3Formats& operator=(const OBJK_Representation3Formats &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_Representation3Formats that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation3Formats& operator=(OBJK_Representation3Formats &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            eProsima_user_DllExport void _d(dds::xrce::RepresentationFormat __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            eProsima_user_DllExport dds::xrce::RepresentationFormat _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            eProsima_user_DllExport dds::xrce::RepresentationFormat& _d();
            
            /*!
             * @brief This function copies the value in member object_reference
             * @param _object_reference New value to be copied in member object_reference
             */
            eProsima_user_DllExport void object_reference(const std::string &_object_reference);

            /*!
             * @brief This function moves the value in member object_reference
             * @param _object_reference New value to be moved in member object_reference
             */
            eProsima_user_DllExport void object_reference(std::string &&_object_reference);

            /*!
             * @brief This function returns a constant reference to member object_reference
             * @return Constant reference to member object_reference
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const std::string& object_reference() const;

            /*!
             * @brief This function returns a reference to member object_reference
             * @return Reference to member object_reference
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport std::string& object_reference();
            /*!
             * @brief This function copies the value in member xml_string_representation
             * @param _xml_string_representation New value to be copied in member xml_string_representation
             */
            eProsima_user_DllExport void xml_string_representation(const std::string &_xml_string_representation);

            /*!
             * @brief This function moves the value in member xml_string_representation
             * @param _xml_string_representation New value to be moved in member xml_string_representation
             */
            eProsima_user_DllExport void xml_string_representation(std::string &&_xml_string_representation);

            /*!
             * @brief This function returns a constant reference to member xml_string_representation
             * @return Constant reference to member xml_string_representation
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const std::string& xml_string_representation() const;

            /*!
             * @brief This function returns a reference to member xml_string_representation
             * @return Reference to member xml_string_representation
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport std::string& xml_string_representation();
            /*!
             * @brief This function copies the value in member binary_representation
             * @param _binary_representation New value to be copied in member binary_representation
             */
            eProsima_user_DllExport void binary_representation(const std::vector<uint8_t> &_binary_representation);

            /*!
             * @brief This function moves the value in member binary_representation
             * @param _binary_representation New value to be moved in member binary_representation
             */
            eProsima_user_DllExport void binary_representation(std::vector<uint8_t> &&_binary_representation);

            /*!
             * @brief This function returns a constant reference to member binary_representation
             * @return Constant reference to member binary_representation
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const std::vector<uint8_t>& binary_representation() const;

            /*!
             * @brief This function returns a reference to member binary_representation
             * @return Reference to member binary_representation
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport std::vector<uint8_t>& binary_representation();
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_Representation3Formats& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::RepresentationFormat m__d;
            
            std::string m_object_reference;
            std::string m_xml_string_representation;
            std::vector<uint8_t> m_binary_representation;
        };
        /*!
         * @brief This class represents the union OBJK_Representation2Formats defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_Representation2Formats
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_Representation2Formats();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_Representation2Formats();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_Representation2Formats that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation2Formats(const OBJK_Representation2Formats &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_Representation2Formats that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation2Formats(OBJK_Representation2Formats &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_Representation2Formats that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation2Formats& operator=(const OBJK_Representation2Formats &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_Representation2Formats that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation2Formats& operator=(OBJK_Representation2Formats &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            eProsima_user_DllExport void _d(dds::xrce::RepresentationFormat __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            eProsima_user_DllExport dds::xrce::RepresentationFormat _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            eProsima_user_DllExport dds::xrce::RepresentationFormat& _d();
            
            /*!
             * @brief This function copies the value in member object_name
             * @param _object_name New value to be copied in member object_name
             */
            eProsima_user_DllExport void object_name(const std::string &_object_name);

            /*!
             * @brief This function moves the value in member object_name
             * @param _object_name New value to be moved in member object_name
             */
            eProsima_user_DllExport void object_name(std::string &&_object_name);

            /*!
             * @brief This function returns a constant reference to member object_name
             * @return Constant reference to member object_name
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const std::string& object_name() const;

            /*!
             * @brief This function returns a reference to member object_name
             * @return Reference to member object_name
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport std::string& object_name();
            /*!
             * @brief This function copies the value in member string_representation
             * @param _string_representation New value to be copied in member string_representation
             */
            eProsima_user_DllExport void string_representation(const std::string &_string_representation);

            /*!
             * @brief This function moves the value in member string_representation
             * @param _string_representation New value to be moved in member string_representation
             */
            eProsima_user_DllExport void string_representation(std::string &&_string_representation);

            /*!
             * @brief This function returns a constant reference to member string_representation
             * @return Constant reference to member string_representation
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const std::string& string_representation() const;

            /*!
             * @brief This function returns a reference to member string_representation
             * @return Reference to member string_representation
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport std::string& string_representation();
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_Representation2Formats& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::RepresentationFormat m__d;
            
            std::string m_object_name;
            std::string m_string_representation;
        };
        /*!
         * @brief This class represents the structure OBJK_Representation2_Base defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_Representation2_Base
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_Representation2_Base();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_Representation2_Base();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_Representation2_Base that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation2_Base(const OBJK_Representation2_Base &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_Representation2_Base that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation2_Base(OBJK_Representation2_Base &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_Representation2_Base that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation2_Base& operator=(const OBJK_Representation2_Base &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_Representation2_Base that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation2_Base& operator=(OBJK_Representation2_Base &&x);
            
            /*!
             * @brief This function copies the value in member representation
             * @param _representation New value to be copied in member representation
             */
            inline eProsima_user_DllExport void representation(const dds::xrce::OBJK_Representation2Formats &_representation)
            {
                m_representation = _representation;
            }

            /*!
             * @brief This function moves the value in member representation
             * @param _representation New value to be moved in member representation
             */
            inline eProsima_user_DllExport void representation(dds::xrce::OBJK_Representation2Formats &&_representation)
            {
                m_representation = std::move(_representation);
            }

            /*!
             * @brief This function returns a constant reference to member representation
             * @return Constant reference to member representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation2Formats& representation() const
            {
                return m_representation;
            }

            /*!
             * @brief This function returns a reference to member representation
             * @return Reference to member representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation2Formats& representation()
            {
                return m_representation;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_Representation2_Base& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation2Formats m_representation;
        };
        /*!
         * @brief This class represents the structure OBJK_Representation3_Base defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_Representation3_Base
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_Representation3_Base();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_Representation3_Base();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_Representation3_Base that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation3_Base(const OBJK_Representation3_Base &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_Representation3_Base that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation3_Base(OBJK_Representation3_Base &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_Representation3_Base that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation3_Base& operator=(const OBJK_Representation3_Base &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_Representation3_Base that will be copied.
             */
            eProsima_user_DllExport OBJK_Representation3_Base& operator=(OBJK_Representation3_Base &&x);
            
            /*!
             * @brief This function copies the value in member representation
             * @param _representation New value to be copied in member representation
             */
            inline eProsima_user_DllExport void representation(const dds::xrce::OBJK_Representation3Formats &_representation)
            {
                m_representation = _representation;
            }

            /*!
             * @brief This function moves the value in member representation
             * @param _representation New value to be moved in member representation
             */
            inline eProsima_user_DllExport void representation(dds::xrce::OBJK_Representation3Formats &&_representation)
            {
                m_representation = std::move(_representation);
            }

            /*!
             * @brief This function returns a constant reference to member representation
             * @return Constant reference to member representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation3Formats& representation() const
            {
                return m_representation;
            }

            /*!
             * @brief This function returns a reference to member representation
             * @return Reference to member representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation3Formats& representation()
            {
                return m_representation;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_Representation3_Base& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation3Formats m_representation;
        };
        /*!
         * @brief This class represents the structure OBJK_QOSPROFILE_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_QOSPROFILE_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_QOSPROFILE_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_QOSPROFILE_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_QOSPROFILE_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_QOSPROFILE_Representation(const OBJK_QOSPROFILE_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_QOSPROFILE_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_QOSPROFILE_Representation(OBJK_QOSPROFILE_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_QOSPROFILE_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_QOSPROFILE_Representation& operator=(const OBJK_QOSPROFILE_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_QOSPROFILE_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_QOSPROFILE_Representation& operator=(OBJK_QOSPROFILE_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation2_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation2_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation2_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation2_Base& base_representation()
            {
                return m_base_representation;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_QOSPROFILE_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation2_Base m_base_representation;
        };
        /*!
         * @brief This class represents the structure OBJK_APPLICATION_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_APPLICATION_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_APPLICATION_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_APPLICATION_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_APPLICATION_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_APPLICATION_Representation(const OBJK_APPLICATION_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_APPLICATION_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_APPLICATION_Representation(OBJK_APPLICATION_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_APPLICATION_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_APPLICATION_Representation& operator=(const OBJK_APPLICATION_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_APPLICATION_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_APPLICATION_Representation& operator=(OBJK_APPLICATION_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation2_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation2_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation2_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation2_Base& base_representation()
            {
                return m_base_representation;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_APPLICATION_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation2_Base m_base_representation;
        };
        /*!
         * @brief This class represents the structure OBJK_PARTICIPANT_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_PARTICIPANT_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_PARTICIPANT_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_PARTICIPANT_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_PARTICIPANT_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_PARTICIPANT_Representation(const OBJK_PARTICIPANT_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_PARTICIPANT_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_PARTICIPANT_Representation(OBJK_PARTICIPANT_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_PARTICIPANT_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_PARTICIPANT_Representation& operator=(const OBJK_PARTICIPANT_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_PARTICIPANT_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_PARTICIPANT_Representation& operator=(OBJK_PARTICIPANT_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation2_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation2_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation2_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation2_Base& base_representation()
            {
                return m_base_representation;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_PARTICIPANT_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation2_Base m_base_representation;
        };
        /*!
         * @brief This class represents the structure OBJK_TYPE_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_TYPE_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_TYPE_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_TYPE_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_TYPE_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_TYPE_Representation(const OBJK_TYPE_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_TYPE_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_TYPE_Representation(OBJK_TYPE_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_TYPE_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_TYPE_Representation& operator=(const OBJK_TYPE_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_TYPE_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_TYPE_Representation& operator=(OBJK_TYPE_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation2_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation2_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation2_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation2_Base& base_representation()
            {
                return m_base_representation;
            }
            /*!
             * @brief This function copies the value in member participant_id
             * @param _participant_id New value to be copied in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(const dds::xrce::ObjectId &_participant_id)
            {
                m_participant_id = _participant_id;
            }

            /*!
             * @brief This function moves the value in member participant_id
             * @param _participant_id New value to be moved in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(dds::xrce::ObjectId &&_participant_id)
            {
                m_participant_id = std::move(_participant_id);
            }

            /*!
             * @brief This function returns a constant reference to member participant_id
             * @return Constant reference to member participant_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& participant_id() const
            {
                return m_participant_id;
            }

            /*!
             * @brief This function returns a reference to member participant_id
             * @return Reference to member participant_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& participant_id()
            {
                return m_participant_id;
            }
            /*!
             * @brief This function copies the value in member registered_type_name
             * @param _registered_type_name New value to be copied in member registered_type_name
             */
            inline eProsima_user_DllExport void registered_type_name(const std::string &_registered_type_name)
            {
                m_registered_type_name = _registered_type_name;
            }

            /*!
             * @brief This function moves the value in member registered_type_name
             * @param _registered_type_name New value to be moved in member registered_type_name
             */
            inline eProsima_user_DllExport void registered_type_name(std::string &&_registered_type_name)
            {
                m_registered_type_name = std::move(_registered_type_name);
            }

            /*!
             * @brief This function returns a constant reference to member registered_type_name
             * @return Constant reference to member registered_type_name
             */
            inline eProsima_user_DllExport const std::string& registered_type_name() const
            {
                return m_registered_type_name;
            }

            /*!
             * @brief This function returns a reference to member registered_type_name
             * @return Reference to member registered_type_name
             */
            inline eProsima_user_DllExport std::string& registered_type_name()
            {
                return m_registered_type_name;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_TYPE_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation2_Base m_base_representation;
            dds::xrce::ObjectId m_participant_id;
            std::string m_registered_type_name;
        };
        /*!
         * @brief This class represents the structure OBJK_TOPIC_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_TOPIC_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_TOPIC_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_TOPIC_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_TOPIC_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_TOPIC_Representation(const OBJK_TOPIC_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_TOPIC_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_TOPIC_Representation(OBJK_TOPIC_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_TOPIC_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_TOPIC_Representation& operator=(const OBJK_TOPIC_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_TOPIC_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_TOPIC_Representation& operator=(OBJK_TOPIC_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation3_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation3_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation3_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation3_Base& base_representation()
            {
                return m_base_representation;
            }
            /*!
             * @brief This function copies the value in member participant_id
             * @param _participant_id New value to be copied in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(const dds::xrce::ObjectId &_participant_id)
            {
                m_participant_id = _participant_id;
            }

            /*!
             * @brief This function moves the value in member participant_id
             * @param _participant_id New value to be moved in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(dds::xrce::ObjectId &&_participant_id)
            {
                m_participant_id = std::move(_participant_id);
            }

            /*!
             * @brief This function returns a constant reference to member participant_id
             * @return Constant reference to member participant_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& participant_id() const
            {
                return m_participant_id;
            }

            /*!
             * @brief This function returns a reference to member participant_id
             * @return Reference to member participant_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& participant_id()
            {
                return m_participant_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_TOPIC_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation3_Base m_base_representation;
            dds::xrce::ObjectId m_participant_id;
        };
        /*!
         * @brief This class represents the structure OBJK_PUB_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_PUB_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_PUB_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_PUB_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_PUB_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_PUB_Representation(const OBJK_PUB_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_PUB_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_PUB_Representation(OBJK_PUB_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_PUB_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_PUB_Representation& operator=(const OBJK_PUB_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_PUB_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_PUB_Representation& operator=(OBJK_PUB_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation3_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation3_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation3_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation3_Base& base_representation()
            {
                return m_base_representation;
            }
            /*!
             * @brief This function copies the value in member participant_id
             * @param _participant_id New value to be copied in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(const dds::xrce::ObjectId &_participant_id)
            {
                m_participant_id = _participant_id;
            }

            /*!
             * @brief This function moves the value in member participant_id
             * @param _participant_id New value to be moved in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(dds::xrce::ObjectId &&_participant_id)
            {
                m_participant_id = std::move(_participant_id);
            }

            /*!
             * @brief This function returns a constant reference to member participant_id
             * @return Constant reference to member participant_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& participant_id() const
            {
                return m_participant_id;
            }

            /*!
             * @brief This function returns a reference to member participant_id
             * @return Reference to member participant_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& participant_id()
            {
                return m_participant_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_PUB_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation3_Base m_base_representation;
            dds::xrce::ObjectId m_participant_id;
        };
        /*!
         * @brief This class represents the structure OBJK_SUB_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_SUB_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_SUB_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_SUB_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_SUB_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_SUB_Representation(const OBJK_SUB_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_SUB_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_SUB_Representation(OBJK_SUB_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_SUB_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_SUB_Representation& operator=(const OBJK_SUB_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_SUB_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_SUB_Representation& operator=(OBJK_SUB_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation3_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation3_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation3_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation3_Base& base_representation()
            {
                return m_base_representation;
            }
            /*!
             * @brief This function copies the value in member participant_id
             * @param _participant_id New value to be copied in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(const dds::xrce::ObjectId &_participant_id)
            {
                m_participant_id = _participant_id;
            }

            /*!
             * @brief This function moves the value in member participant_id
             * @param _participant_id New value to be moved in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(dds::xrce::ObjectId &&_participant_id)
            {
                m_participant_id = std::move(_participant_id);
            }

            /*!
             * @brief This function returns a constant reference to member participant_id
             * @return Constant reference to member participant_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& participant_id() const
            {
                return m_participant_id;
            }

            /*!
             * @brief This function returns a reference to member participant_id
             * @return Reference to member participant_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& participant_id()
            {
                return m_participant_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_SUB_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation3_Base m_base_representation;
            dds::xrce::ObjectId m_participant_id;
        };
        /*!
         * @brief This class represents the structure OBJK_DW_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_DW_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_DW_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_DW_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_DW_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_DW_Representation(const OBJK_DW_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_DW_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_DW_Representation(OBJK_DW_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_DW_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_DW_Representation& operator=(const OBJK_DW_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_DW_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_DW_Representation& operator=(OBJK_DW_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation3_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation3_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation3_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation3_Base& base_representation()
            {
                return m_base_representation;
            }
            /*!
             * @brief This function copies the value in member participant_id
             * @param _participant_id New value to be copied in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(const dds::xrce::ObjectId &_participant_id)
            {
                m_participant_id = _participant_id;
            }

            /*!
             * @brief This function moves the value in member participant_id
             * @param _participant_id New value to be moved in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(dds::xrce::ObjectId &&_participant_id)
            {
                m_participant_id = std::move(_participant_id);
            }

            /*!
             * @brief This function returns a constant reference to member participant_id
             * @return Constant reference to member participant_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& participant_id() const
            {
                return m_participant_id;
            }

            /*!
             * @brief This function returns a reference to member participant_id
             * @return Reference to member participant_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& participant_id()
            {
                return m_participant_id;
            }
            /*!
             * @brief This function copies the value in member publisher_id
             * @param _publisher_id New value to be copied in member publisher_id
             */
            inline eProsima_user_DllExport void publisher_id(const dds::xrce::ObjectId &_publisher_id)
            {
                m_publisher_id = _publisher_id;
            }

            /*!
             * @brief This function moves the value in member publisher_id
             * @param _publisher_id New value to be moved in member publisher_id
             */
            inline eProsima_user_DllExport void publisher_id(dds::xrce::ObjectId &&_publisher_id)
            {
                m_publisher_id = std::move(_publisher_id);
            }

            /*!
             * @brief This function returns a constant reference to member publisher_id
             * @return Constant reference to member publisher_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& publisher_id() const
            {
                return m_publisher_id;
            }

            /*!
             * @brief This function returns a reference to member publisher_id
             * @return Reference to member publisher_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& publisher_id()
            {
                return m_publisher_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_DW_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation3_Base m_base_representation;
            dds::xrce::ObjectId m_participant_id;
            dds::xrce::ObjectId m_publisher_id;
        };
        /*!
         * @brief This class represents the structure OBJK_DR_Representation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_DR_Representation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_DR_Representation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_DR_Representation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_DR_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_DR_Representation(const OBJK_DR_Representation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_DR_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_DR_Representation(OBJK_DR_Representation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_DR_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_DR_Representation& operator=(const OBJK_DR_Representation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_DR_Representation that will be copied.
             */
            eProsima_user_DllExport OBJK_DR_Representation& operator=(OBJK_DR_Representation &&x);
            
            /*!
             * @brief This function copies the value in member base_representation
             * @param _base_representation New value to be copied in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(const dds::xrce::OBJK_Representation3_Base &_base_representation)
            {
                m_base_representation = _base_representation;
            }

            /*!
             * @brief This function moves the value in member base_representation
             * @param _base_representation New value to be moved in member base_representation
             */
            inline eProsima_user_DllExport void base_representation(dds::xrce::OBJK_Representation3_Base &&_base_representation)
            {
                m_base_representation = std::move(_base_representation);
            }

            /*!
             * @brief This function returns a constant reference to member base_representation
             * @return Constant reference to member base_representation
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Representation3_Base& base_representation() const
            {
                return m_base_representation;
            }

            /*!
             * @brief This function returns a reference to member base_representation
             * @return Reference to member base_representation
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Representation3_Base& base_representation()
            {
                return m_base_representation;
            }
            /*!
             * @brief This function copies the value in member participant_id
             * @param _participant_id New value to be copied in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(const dds::xrce::ObjectId &_participant_id)
            {
                m_participant_id = _participant_id;
            }

            /*!
             * @brief This function moves the value in member participant_id
             * @param _participant_id New value to be moved in member participant_id
             */
            inline eProsima_user_DllExport void participant_id(dds::xrce::ObjectId &&_participant_id)
            {
                m_participant_id = std::move(_participant_id);
            }

            /*!
             * @brief This function returns a constant reference to member participant_id
             * @return Constant reference to member participant_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& participant_id() const
            {
                return m_participant_id;
            }

            /*!
             * @brief This function returns a reference to member participant_id
             * @return Reference to member participant_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& participant_id()
            {
                return m_participant_id;
            }
            /*!
             * @brief This function copies the value in member subscriber_id
             * @param _subscriber_id New value to be copied in member subscriber_id
             */
            inline eProsima_user_DllExport void subscriber_id(const dds::xrce::ObjectId &_subscriber_id)
            {
                m_subscriber_id = _subscriber_id;
            }

            /*!
             * @brief This function moves the value in member subscriber_id
             * @param _subscriber_id New value to be moved in member subscriber_id
             */
            inline eProsima_user_DllExport void subscriber_id(dds::xrce::ObjectId &&_subscriber_id)
            {
                m_subscriber_id = std::move(_subscriber_id);
            }

            /*!
             * @brief This function returns a constant reference to member subscriber_id
             * @return Constant reference to member subscriber_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& subscriber_id() const
            {
                return m_subscriber_id;
            }

            /*!
             * @brief This function returns a reference to member subscriber_id
             * @return Reference to member subscriber_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& subscriber_id()
            {
                return m_subscriber_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_DR_Representation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::OBJK_Representation3_Base m_base_representation;
            dds::xrce::ObjectId m_participant_id;
            dds::xrce::ObjectId m_subscriber_id;
        };
        /*!
         * @brief This class represents the structure OBJK_Type_Binary defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_Type_Binary
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_Type_Binary();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_Type_Binary();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_Type_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_Type_Binary(const OBJK_Type_Binary &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_Type_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_Type_Binary(OBJK_Type_Binary &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_Type_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_Type_Binary& operator=(const OBJK_Type_Binary &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_Type_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_Type_Binary& operator=(OBJK_Type_Binary &&x);
            
            /*!
             * @brief This function copies the value in member type_name
             * @param _type_name New value to be copied in member type_name
             */
            inline eProsima_user_DllExport void type_name(const std::string &_type_name)
            {
                m_type_name = _type_name;
            }

            /*!
             * @brief This function moves the value in member type_name
             * @param _type_name New value to be moved in member type_name
             */
            inline eProsima_user_DllExport void type_name(std::string &&_type_name)
            {
                m_type_name = std::move(_type_name);
            }

            /*!
             * @brief This function returns a constant reference to member type_name
             * @return Constant reference to member type_name
             */
            inline eProsima_user_DllExport const std::string& type_name() const
            {
                return m_type_name;
            }

            /*!
             * @brief This function returns a reference to member type_name
             * @return Reference to member type_name
             */
            inline eProsima_user_DllExport std::string& type_name()
            {
                return m_type_name;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_Type_Binary& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::string m_type_name;
        };
        /*!
         * @brief This class represents the structure OBJK_Topic_QosBinary defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_Topic_QosBinary
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_Topic_QosBinary();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_Topic_QosBinary();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_Topic_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_Topic_QosBinary(const OBJK_Topic_QosBinary &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_Topic_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_Topic_QosBinary(OBJK_Topic_QosBinary &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_Topic_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_Topic_QosBinary& operator=(const OBJK_Topic_QosBinary &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_Topic_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_Topic_QosBinary& operator=(OBJK_Topic_QosBinary &&x);
            
            /*!
             * @brief This function copies the value in member topic_name
             * @param _topic_name New value to be copied in member topic_name
             */
            inline eProsima_user_DllExport void topic_name(const std::string &_topic_name)
            {
                m_topic_name = _topic_name;
            }

            /*!
             * @brief This function moves the value in member topic_name
             * @param _topic_name New value to be moved in member topic_name
             */
            inline eProsima_user_DllExport void topic_name(std::string &&_topic_name)
            {
                m_topic_name = std::move(_topic_name);
            }

            /*!
             * @brief This function returns a constant reference to member topic_name
             * @return Constant reference to member topic_name
             */
            inline eProsima_user_DllExport const std::string& topic_name() const
            {
                return m_topic_name;
            }

            /*!
             * @brief This function returns a reference to member topic_name
             * @return Reference to member topic_name
             */
            inline eProsima_user_DllExport std::string& topic_name()
            {
                return m_topic_name;
            }
            /*!
             * @brief This function copies the value in member type_name
             * @param _type_name New value to be copied in member type_name
             */
            inline eProsima_user_DllExport void type_name(const std::string &_type_name)
            {
                m_type_name = _type_name;
            }

            /*!
             * @brief This function moves the value in member type_name
             * @param _type_name New value to be moved in member type_name
             */
            inline eProsima_user_DllExport void type_name(std::string &&_type_name)
            {
                m_type_name = std::move(_type_name);
            }

            /*!
             * @brief This function returns a constant reference to member type_name
             * @return Constant reference to member type_name
             */
            inline eProsima_user_DllExport const std::string& type_name() const
            {
                return m_type_name;
            }

            /*!
             * @brief This function returns a reference to member type_name
             * @return Reference to member type_name
             */
            inline eProsima_user_DllExport std::string& type_name()
            {
                return m_type_name;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_Topic_QosBinary& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::string m_topic_name;
            std::string m_type_name;
        };
        /*!
         * @brief This class represents the structure OBJK_PUB_QosBinary defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_PUB_QosBinary
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_PUB_QosBinary();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_PUB_QosBinary();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_PUB_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_PUB_QosBinary(const OBJK_PUB_QosBinary &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_PUB_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_PUB_QosBinary(OBJK_PUB_QosBinary &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_PUB_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_PUB_QosBinary& operator=(const OBJK_PUB_QosBinary &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_PUB_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_PUB_QosBinary& operator=(OBJK_PUB_QosBinary &&x);
            
            /*!
             * @brief This function copies the value in member partitions
             * @param _partitions New value to be copied in member partitions
             */
            inline eProsima_user_DllExport void partitions(const std::vector<std::string> &_partitions)
            {
                m_partitions = _partitions;
            }

            /*!
             * @brief This function moves the value in member partitions
             * @param _partitions New value to be moved in member partitions
             */
            inline eProsima_user_DllExport void partitions(std::vector<std::string> &&_partitions)
            {
                m_partitions = std::move(_partitions);
            }

            /*!
             * @brief This function returns a constant reference to member partitions
             * @return Constant reference to member partitions
             */
            inline eProsima_user_DllExport const std::vector<std::string>& partitions() const
            {
                return m_partitions;
            }

            /*!
             * @brief This function returns a reference to member partitions
             * @return Reference to member partitions
             */
            inline eProsima_user_DllExport std::vector<std::string>& partitions()
            {
                return m_partitions;
            }
            /*!
             * @brief This function copies the value in member group_data
             * @param _group_data New value to be copied in member group_data
             */
            inline eProsima_user_DllExport void group_data(const std::vector<uint8_t> &_group_data)
            {
                m_group_data = _group_data;
            }

            /*!
             * @brief This function moves the value in member group_data
             * @param _group_data New value to be moved in member group_data
             */
            inline eProsima_user_DllExport void group_data(std::vector<uint8_t> &&_group_data)
            {
                m_group_data = std::move(_group_data);
            }

            /*!
             * @brief This function returns a constant reference to member group_data
             * @return Constant reference to member group_data
             */
            inline eProsima_user_DllExport const std::vector<uint8_t>& group_data() const
            {
                return m_group_data;
            }

            /*!
             * @brief This function returns a reference to member group_data
             * @return Reference to member group_data
             */
            inline eProsima_user_DllExport std::vector<uint8_t>& group_data()
            {
                return m_group_data;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_PUB_QosBinary& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::vector<std::string> m_partitions;
            std::vector<uint8_t> m_group_data;
        };
        /*!
         * @brief This class represents the structure OBJK_SUB_QosBinary defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_SUB_QosBinary
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_SUB_QosBinary();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_SUB_QosBinary();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_SUB_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_SUB_QosBinary(const OBJK_SUB_QosBinary &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_SUB_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_SUB_QosBinary(OBJK_SUB_QosBinary &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_SUB_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_SUB_QosBinary& operator=(const OBJK_SUB_QosBinary &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_SUB_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_SUB_QosBinary& operator=(OBJK_SUB_QosBinary &&x);
            
            /*!
             * @brief This function copies the value in member partitions
             * @param _partitions New value to be copied in member partitions
             */
            inline eProsima_user_DllExport void partitions(const std::vector<std::string> &_partitions)
            {
                m_partitions = _partitions;
            }

            /*!
             * @brief This function moves the value in member partitions
             * @param _partitions New value to be moved in member partitions
             */
            inline eProsima_user_DllExport void partitions(std::vector<std::string> &&_partitions)
            {
                m_partitions = std::move(_partitions);
            }

            /*!
             * @brief This function returns a constant reference to member partitions
             * @return Constant reference to member partitions
             */
            inline eProsima_user_DllExport const std::vector<std::string>& partitions() const
            {
                return m_partitions;
            }

            /*!
             * @brief This function returns a reference to member partitions
             * @return Reference to member partitions
             */
            inline eProsima_user_DllExport std::vector<std::string>& partitions()
            {
                return m_partitions;
            }
            /*!
             * @brief This function copies the value in member group_data
             * @param _group_data New value to be copied in member group_data
             */
            inline eProsima_user_DllExport void group_data(const std::vector<uint8_t> &_group_data)
            {
                m_group_data = _group_data;
            }

            /*!
             * @brief This function moves the value in member group_data
             * @param _group_data New value to be moved in member group_data
             */
            inline eProsima_user_DllExport void group_data(std::vector<uint8_t> &&_group_data)
            {
                m_group_data = std::move(_group_data);
            }

            /*!
             * @brief This function returns a constant reference to member group_data
             * @return Constant reference to member group_data
             */
            inline eProsima_user_DllExport const std::vector<uint8_t>& group_data() const
            {
                return m_group_data;
            }

            /*!
             * @brief This function returns a reference to member group_data
             * @return Reference to member group_data
             */
            inline eProsima_user_DllExport std::vector<uint8_t>& group_data()
            {
                return m_group_data;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_SUB_QosBinary& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::vector<std::string> m_partitions;
            std::vector<uint8_t> m_group_data;
        };
        /*!
         * @brief This class represents the enumeration EndpointQosFlags defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        enum EndpointQosFlags : uint32_t
        {
            is_reliable,
            is_history_keep_last,
            is_ownership_exclusive,
            is_durability_transient_local,
            is_durability_transient,
            is_durability_persistent
        };
        /*!
         * @brief This class represents the structure OBJK_Endpoint_QosBinary defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_Endpoint_QosBinary
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_Endpoint_QosBinary();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_Endpoint_QosBinary();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_Endpoint_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_Endpoint_QosBinary(const OBJK_Endpoint_QosBinary &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_Endpoint_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_Endpoint_QosBinary(OBJK_Endpoint_QosBinary &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_Endpoint_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_Endpoint_QosBinary& operator=(const OBJK_Endpoint_QosBinary &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_Endpoint_QosBinary that will be copied.
             */
            eProsima_user_DllExport OBJK_Endpoint_QosBinary& operator=(OBJK_Endpoint_QosBinary &&x);
            
            /*!
             * @brief This function sets a value in member qos_flags
             * @param _qos_flags New value for member qos_flags
             */
            inline eProsima_user_DllExport void qos_flags(dds::xrce::EndpointQosFlags _qos_flags)
            {
                m_qos_flags = _qos_flags;
            }

            /*!
             * @brief This function returns the value of member qos_flags
             * @return Value of member qos_flags
             */
            inline eProsima_user_DllExport dds::xrce::EndpointQosFlags qos_flags() const
            {
                return m_qos_flags;
            }

            /*!
             * @brief This function returns a reference to member qos_flags
             * @return Reference to member qos_flags
             */
            inline eProsima_user_DllExport dds::xrce::EndpointQosFlags& qos_flags()
            {
                return m_qos_flags;
            }
            /*!
             * @brief This function sets a value in member history_depth
             * @param _history_depth New value for member history_depth
             */
            inline eProsima_user_DllExport void history_depth(uint16_t _history_depth)
            {
                m_history_depth = _history_depth;
            }

            /*!
             * @brief This function returns the value of member history_depth
             * @return Value of member history_depth
             */
            inline eProsima_user_DllExport uint16_t history_depth() const
            {
                return m_history_depth;
            }

            /*!
             * @brief This function returns a reference to member history_depth
             * @return Reference to member history_depth
             */
            inline eProsima_user_DllExport uint16_t& history_depth()
            {
                return m_history_depth;
            }
            /*!
             * @brief This function sets a value in member deadline_msec
             * @param _deadline_msec New value for member deadline_msec
             */
            inline eProsima_user_DllExport void deadline_msec(uint32_t _deadline_msec)
            {
                m_deadline_msec = _deadline_msec;
            }

            /*!
             * @brief This function returns the value of member deadline_msec
             * @return Value of member deadline_msec
             */
            inline eProsima_user_DllExport uint32_t deadline_msec() const
            {
                return m_deadline_msec;
            }

            /*!
             * @brief This function returns a reference to member deadline_msec
             * @return Reference to member deadline_msec
             */
            inline eProsima_user_DllExport uint32_t& deadline_msec()
            {
                return m_deadline_msec;
            }
            /*!
             * @brief This function sets a value in member lifespan_msec
             * @param _lifespan_msec New value for member lifespan_msec
             */
            inline eProsima_user_DllExport void lifespan_msec(uint32_t _lifespan_msec)
            {
                m_lifespan_msec = _lifespan_msec;
            }

            /*!
             * @brief This function returns the value of member lifespan_msec
             * @return Value of member lifespan_msec
             */
            inline eProsima_user_DllExport uint32_t lifespan_msec() const
            {
                return m_lifespan_msec;
            }

            /*!
             * @brief This function returns a reference to member lifespan_msec
             * @return Reference to member lifespan_msec
             */
            inline eProsima_user_DllExport uint32_t& lifespan_msec()
            {
                return m_lifespan_msec;
            }
            /*!
             * @brief This function copies the value in member user_data
             * @param _user_data New value to be copied in member user_data
             */
            inline eProsima_user_DllExport void user_data(const std::vector<uint8_t> &_user_data)
            {
                m_user_data = _user_data;
            }

            /*!
             * @brief This function moves the value in member user_data
             * @param _user_data New value to be moved in member user_data
             */
            inline eProsima_user_DllExport void user_data(std::vector<uint8_t> &&_user_data)
            {
                m_user_data = std::move(_user_data);
            }

            /*!
             * @brief This function returns a constant reference to member user_data
             * @return Constant reference to member user_data
             */
            inline eProsima_user_DllExport const std::vector<uint8_t>& user_data() const
            {
                return m_user_data;
            }

            /*!
             * @brief This function returns a reference to member user_data
             * @return Reference to member user_data
             */
            inline eProsima_user_DllExport std::vector<uint8_t>& user_data()
            {
                return m_user_data;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_Endpoint_QosBinary& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::EndpointQosFlags m_qos_flags;
            uint16_t m_history_depth;
            uint32_t m_deadline_msec;
            uint32_t m_lifespan_msec;
            std::vector<uint8_t> m_user_data;
        };
        /*!
         * @brief This class represents the structure OBJK_DataReader_Binary defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_DataReader_Binary
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_DataReader_Binary();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_DataReader_Binary();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_DataReader_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_DataReader_Binary(const OBJK_DataReader_Binary &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_DataReader_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_DataReader_Binary(OBJK_DataReader_Binary &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_DataReader_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_DataReader_Binary& operator=(const OBJK_DataReader_Binary &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_DataReader_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_DataReader_Binary& operator=(OBJK_DataReader_Binary &&x);
            
            /*!
             * @brief This function copies the value in member topic_name
             * @param _topic_name New value to be copied in member topic_name
             */
            inline eProsima_user_DllExport void topic_name(const std::string &_topic_name)
            {
                m_topic_name = _topic_name;
            }

            /*!
             * @brief This function moves the value in member topic_name
             * @param _topic_name New value to be moved in member topic_name
             */
            inline eProsima_user_DllExport void topic_name(std::string &&_topic_name)
            {
                m_topic_name = std::move(_topic_name);
            }

            /*!
             * @brief This function returns a constant reference to member topic_name
             * @return Constant reference to member topic_name
             */
            inline eProsima_user_DllExport const std::string& topic_name() const
            {
                return m_topic_name;
            }

            /*!
             * @brief This function returns a reference to member topic_name
             * @return Reference to member topic_name
             */
            inline eProsima_user_DllExport std::string& topic_name()
            {
                return m_topic_name;
            }
            /*!
             * @brief This function copies the value in member endpoint_qos
             * @param _endpoint_qos New value to be copied in member endpoint_qos
             */
            inline eProsima_user_DllExport void endpoint_qos(const dds::xrce::OBJK_Endpoint_QosBinary &_endpoint_qos)
            {
                m_endpoint_qos = _endpoint_qos;
            }

            /*!
             * @brief This function moves the value in member endpoint_qos
             * @param _endpoint_qos New value to be moved in member endpoint_qos
             */
            inline eProsima_user_DllExport void endpoint_qos(dds::xrce::OBJK_Endpoint_QosBinary &&_endpoint_qos)
            {
                m_endpoint_qos = std::move(_endpoint_qos);
            }

            /*!
             * @brief This function returns a constant reference to member endpoint_qos
             * @return Constant reference to member endpoint_qos
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Endpoint_QosBinary& endpoint_qos() const
            {
                return m_endpoint_qos;
            }

            /*!
             * @brief This function returns a reference to member endpoint_qos
             * @return Reference to member endpoint_qos
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Endpoint_QosBinary& endpoint_qos()
            {
                return m_endpoint_qos;
            }
            /*!
             * @brief This function sets a value in member timebasedfilter_msec
             * @param _timebasedfilter_msec New value for member timebasedfilter_msec
             */
            inline eProsima_user_DllExport void timebasedfilter_msec(uint32_t _timebasedfilter_msec)
            {
                m_timebasedfilter_msec = _timebasedfilter_msec;
            }

            /*!
             * @brief This function returns the value of member timebasedfilter_msec
             * @return Value of member timebasedfilter_msec
             */
            inline eProsima_user_DllExport uint32_t timebasedfilter_msec() const
            {
                return m_timebasedfilter_msec;
            }

            /*!
             * @brief This function returns a reference to member timebasedfilter_msec
             * @return Reference to member timebasedfilter_msec
             */
            inline eProsima_user_DllExport uint32_t& timebasedfilter_msec()
            {
                return m_timebasedfilter_msec;
            }
            /*!
             * @brief This function copies the value in member contentbased_filter
             * @param _contentbased_filter New value to be copied in member contentbased_filter
             */
            inline eProsima_user_DllExport void contentbased_filter(const std::string &_contentbased_filter)
            {
                m_contentbased_filter = _contentbased_filter;
            }

            /*!
             * @brief This function moves the value in member contentbased_filter
             * @param _contentbased_filter New value to be moved in member contentbased_filter
             */
            inline eProsima_user_DllExport void contentbased_filter(std::string &&_contentbased_filter)
            {
                m_contentbased_filter = std::move(_contentbased_filter);
            }

            /*!
             * @brief This function returns a constant reference to member contentbased_filter
             * @return Constant reference to member contentbased_filter
             */
            inline eProsima_user_DllExport const std::string& contentbased_filter() const
            {
                return m_contentbased_filter;
            }

            /*!
             * @brief This function returns a reference to member contentbased_filter
             * @return Reference to member contentbased_filter
             */
            inline eProsima_user_DllExport std::string& contentbased_filter()
            {
                return m_contentbased_filter;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_DataReader_Binary& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::string m_topic_name;
            dds::xrce::OBJK_Endpoint_QosBinary m_endpoint_qos;
            uint32_t m_timebasedfilter_msec;
            std::string m_contentbased_filter;
        };
        /*!
         * @brief This class represents the structure OBJK_DataWriter_Binary defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_DataWriter_Binary
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_DataWriter_Binary();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_DataWriter_Binary();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_DataWriter_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_DataWriter_Binary(const OBJK_DataWriter_Binary &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_DataWriter_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_DataWriter_Binary(OBJK_DataWriter_Binary &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_DataWriter_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_DataWriter_Binary& operator=(const OBJK_DataWriter_Binary &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_DataWriter_Binary that will be copied.
             */
            eProsima_user_DllExport OBJK_DataWriter_Binary& operator=(OBJK_DataWriter_Binary &&x);
            
            /*!
             * @brief This function copies the value in member topic_name
             * @param _topic_name New value to be copied in member topic_name
             */
            inline eProsima_user_DllExport void topic_name(const std::string &_topic_name)
            {
                m_topic_name = _topic_name;
            }

            /*!
             * @brief This function moves the value in member topic_name
             * @param _topic_name New value to be moved in member topic_name
             */
            inline eProsima_user_DllExport void topic_name(std::string &&_topic_name)
            {
                m_topic_name = std::move(_topic_name);
            }

            /*!
             * @brief This function returns a constant reference to member topic_name
             * @return Constant reference to member topic_name
             */
            inline eProsima_user_DllExport const std::string& topic_name() const
            {
                return m_topic_name;
            }

            /*!
             * @brief This function returns a reference to member topic_name
             * @return Reference to member topic_name
             */
            inline eProsima_user_DllExport std::string& topic_name()
            {
                return m_topic_name;
            }
            /*!
             * @brief This function copies the value in member endpoint_qos
             * @param _endpoint_qos New value to be copied in member endpoint_qos
             */
            inline eProsima_user_DllExport void endpoint_qos(const dds::xrce::OBJK_Endpoint_QosBinary &_endpoint_qos)
            {
                m_endpoint_qos = _endpoint_qos;
            }

            /*!
             * @brief This function moves the value in member endpoint_qos
             * @param _endpoint_qos New value to be moved in member endpoint_qos
             */
            inline eProsima_user_DllExport void endpoint_qos(dds::xrce::OBJK_Endpoint_QosBinary &&_endpoint_qos)
            {
                m_endpoint_qos = std::move(_endpoint_qos);
            }

            /*!
             * @brief This function returns a constant reference to member endpoint_qos
             * @return Constant reference to member endpoint_qos
             */
            inline eProsima_user_DllExport const dds::xrce::OBJK_Endpoint_QosBinary& endpoint_qos() const
            {
                return m_endpoint_qos;
            }

            /*!
             * @brief This function returns a reference to member endpoint_qos
             * @return Reference to member endpoint_qos
             */
            inline eProsima_user_DllExport dds::xrce::OBJK_Endpoint_QosBinary& endpoint_qos()
            {
                return m_endpoint_qos;
            }
            /*!
             * @brief This function sets a value in member ownership_strength
             * @param _ownership_strength New value for member ownership_strength
             */
            inline eProsima_user_DllExport void ownership_strength(uint32_t _ownership_strength)
            {
                m_ownership_strength = _ownership_strength;
            }

            /*!
             * @brief This function returns the value of member ownership_strength
             * @return Value of member ownership_strength
             */
            inline eProsima_user_DllExport uint32_t ownership_strength() const
            {
                return m_ownership_strength;
            }

            /*!
             * @brief This function returns a reference to member ownership_strength
             * @return Reference to member ownership_strength
             */
            inline eProsima_user_DllExport uint32_t& ownership_strength()
            {
                return m_ownership_strength;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_DataWriter_Binary& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::string m_topic_name;
            dds::xrce::OBJK_Endpoint_QosBinary m_endpoint_qos;
            uint32_t m_ownership_strength;
        };
        /*!
         * @brief This class represents the union ObjectVariant defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class ObjectVariant
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ObjectVariant();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ObjectVariant();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::ObjectVariant that will be copied.
             */
            eProsima_user_DllExport ObjectVariant(const ObjectVariant &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::ObjectVariant that will be copied.
             */
            eProsima_user_DllExport ObjectVariant(ObjectVariant &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::ObjectVariant that will be copied.
             */
            eProsima_user_DllExport ObjectVariant& operator=(const ObjectVariant &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::ObjectVariant that will be copied.
             */
            eProsima_user_DllExport ObjectVariant& operator=(ObjectVariant &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            eProsima_user_DllExport void _d(dds::xrce::ObjectKind __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            eProsima_user_DllExport dds::xrce::ObjectKind _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            eProsima_user_DllExport dds::xrce::ObjectKind& _d();
            
            /*!
             * @brief This function copies the value in member client
             * @param _client New value to be copied in member client
             */
            eProsima_user_DllExport void client(const dds::xrce::OBJK_CLIENT_Representation &_client);

            /*!
             * @brief This function moves the value in member client
             * @param _client New value to be moved in member client
             */
            eProsima_user_DllExport void client(dds::xrce::OBJK_CLIENT_Representation &&_client);

            /*!
             * @brief This function returns a constant reference to member client
             * @return Constant reference to member client
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_CLIENT_Representation& client() const;

            /*!
             * @brief This function returns a reference to member client
             * @return Reference to member client
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_CLIENT_Representation& client();
            /*!
             * @brief This function copies the value in member application
             * @param _application New value to be copied in member application
             */
            eProsima_user_DllExport void application(const dds::xrce::OBJK_APPLICATION_Representation &_application);

            /*!
             * @brief This function moves the value in member application
             * @param _application New value to be moved in member application
             */
            eProsima_user_DllExport void application(dds::xrce::OBJK_APPLICATION_Representation &&_application);

            /*!
             * @brief This function returns a constant reference to member application
             * @return Constant reference to member application
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_APPLICATION_Representation& application() const;

            /*!
             * @brief This function returns a reference to member application
             * @return Reference to member application
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_APPLICATION_Representation& application();
            /*!
             * @brief This function copies the value in member participant
             * @param _participant New value to be copied in member participant
             */
            eProsima_user_DllExport void participant(const dds::xrce::OBJK_PARTICIPANT_Representation &_participant);

            /*!
             * @brief This function moves the value in member participant
             * @param _participant New value to be moved in member participant
             */
            eProsima_user_DllExport void participant(dds::xrce::OBJK_PARTICIPANT_Representation &&_participant);

            /*!
             * @brief This function returns a constant reference to member participant
             * @return Constant reference to member participant
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_PARTICIPANT_Representation& participant() const;

            /*!
             * @brief This function returns a reference to member participant
             * @return Reference to member participant
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_PARTICIPANT_Representation& participant();
            /*!
             * @brief This function copies the value in member qos_profile
             * @param _qos_profile New value to be copied in member qos_profile
             */
            eProsima_user_DllExport void qos_profile(const dds::xrce::OBJK_QOSPROFILE_Representation &_qos_profile);

            /*!
             * @brief This function moves the value in member qos_profile
             * @param _qos_profile New value to be moved in member qos_profile
             */
            eProsima_user_DllExport void qos_profile(dds::xrce::OBJK_QOSPROFILE_Representation &&_qos_profile);

            /*!
             * @brief This function returns a constant reference to member qos_profile
             * @return Constant reference to member qos_profile
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_QOSPROFILE_Representation& qos_profile() const;

            /*!
             * @brief This function returns a reference to member qos_profile
             * @return Reference to member qos_profile
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_QOSPROFILE_Representation& qos_profile();
            /*!
             * @brief This function copies the value in member type
             * @param _type New value to be copied in member type
             */
            eProsima_user_DllExport void type(const dds::xrce::OBJK_TYPE_Representation &_type);

            /*!
             * @brief This function moves the value in member type
             * @param _type New value to be moved in member type
             */
            eProsima_user_DllExport void type(dds::xrce::OBJK_TYPE_Representation &&_type);

            /*!
             * @brief This function returns a constant reference to member type
             * @return Constant reference to member type
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_TYPE_Representation& type() const;

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_TYPE_Representation& type();
            /*!
             * @brief This function copies the value in member topic
             * @param _topic New value to be copied in member topic
             */
            eProsima_user_DllExport void topic(const dds::xrce::OBJK_TOPIC_Representation &_topic);

            /*!
             * @brief This function moves the value in member topic
             * @param _topic New value to be moved in member topic
             */
            eProsima_user_DllExport void topic(dds::xrce::OBJK_TOPIC_Representation &&_topic);

            /*!
             * @brief This function returns a constant reference to member topic
             * @return Constant reference to member topic
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_TOPIC_Representation& topic() const;

            /*!
             * @brief This function returns a reference to member topic
             * @return Reference to member topic
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_TOPIC_Representation& topic();
            /*!
             * @brief This function copies the value in member publisher
             * @param _publisher New value to be copied in member publisher
             */
            eProsima_user_DllExport void publisher(const dds::xrce::OBJK_PUB_Representation &_publisher);

            /*!
             * @brief This function moves the value in member publisher
             * @param _publisher New value to be moved in member publisher
             */
            eProsima_user_DllExport void publisher(dds::xrce::OBJK_PUB_Representation &&_publisher);

            /*!
             * @brief This function returns a constant reference to member publisher
             * @return Constant reference to member publisher
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_PUB_Representation& publisher() const;

            /*!
             * @brief This function returns a reference to member publisher
             * @return Reference to member publisher
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_PUB_Representation& publisher();
            /*!
             * @brief This function copies the value in member subscriber
             * @param _subscriber New value to be copied in member subscriber
             */
            eProsima_user_DllExport void subscriber(const dds::xrce::OBJK_SUB_Representation &_subscriber);

            /*!
             * @brief This function moves the value in member subscriber
             * @param _subscriber New value to be moved in member subscriber
             */
            eProsima_user_DllExport void subscriber(dds::xrce::OBJK_SUB_Representation &&_subscriber);

            /*!
             * @brief This function returns a constant reference to member subscriber
             * @return Constant reference to member subscriber
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_SUB_Representation& subscriber() const;

            /*!
             * @brief This function returns a reference to member subscriber
             * @return Reference to member subscriber
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_SUB_Representation& subscriber();
            /*!
             * @brief This function copies the value in member data_writer
             * @param _data_writer New value to be copied in member data_writer
             */
            eProsima_user_DllExport void data_writer(const dds::xrce::OBJK_DW_Representation &_data_writer);

            /*!
             * @brief This function moves the value in member data_writer
             * @param _data_writer New value to be moved in member data_writer
             */
            eProsima_user_DllExport void data_writer(dds::xrce::OBJK_DW_Representation &&_data_writer);

            /*!
             * @brief This function returns a constant reference to member data_writer
             * @return Constant reference to member data_writer
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_DW_Representation& data_writer() const;

            /*!
             * @brief This function returns a reference to member data_writer
             * @return Reference to member data_writer
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_DW_Representation& data_writer();
            /*!
             * @brief This function copies the value in member data_reader
             * @param _data_reader New value to be copied in member data_reader
             */
            eProsima_user_DllExport void data_reader(const dds::xrce::OBJK_DR_Representation &_data_reader);

            /*!
             * @brief This function moves the value in member data_reader
             * @param _data_reader New value to be moved in member data_reader
             */
            eProsima_user_DllExport void data_reader(dds::xrce::OBJK_DR_Representation &&_data_reader);

            /*!
             * @brief This function returns a constant reference to member data_reader
             * @return Constant reference to member data_reader
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_DR_Representation& data_reader() const;

            /*!
             * @brief This function returns a reference to member data_reader
             * @return Reference to member data_reader
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_DR_Representation& data_reader();
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::ObjectVariant& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::ObjectKind m__d;
            
            dds::xrce::OBJK_CLIENT_Representation m_client;
            dds::xrce::OBJK_APPLICATION_Representation m_application;
            dds::xrce::OBJK_PARTICIPANT_Representation m_participant;
            dds::xrce::OBJK_QOSPROFILE_Representation m_qos_profile;
            dds::xrce::OBJK_TYPE_Representation m_type;
            dds::xrce::OBJK_TOPIC_Representation m_topic;
            dds::xrce::OBJK_PUB_Representation m_publisher;
            dds::xrce::OBJK_SUB_Representation m_subscriber;
            dds::xrce::OBJK_DW_Representation m_data_writer;
            dds::xrce::OBJK_DR_Representation m_data_reader;
        };
        /*!
         * @brief This class represents the structure CreationMode defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class CreationMode
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport CreationMode();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~CreationMode();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::CreationMode that will be copied.
             */
            eProsima_user_DllExport CreationMode(const CreationMode &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::CreationMode that will be copied.
             */
            eProsima_user_DllExport CreationMode(CreationMode &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::CreationMode that will be copied.
             */
            eProsima_user_DllExport CreationMode& operator=(const CreationMode &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::CreationMode that will be copied.
             */
            eProsima_user_DllExport CreationMode& operator=(CreationMode &&x);
            
            /*!
             * @brief This function sets a value in member reuse
             * @param _reuse New value for member reuse
             */
            inline eProsima_user_DllExport void reuse(bool _reuse)
            {
                m_reuse = _reuse;
            }

            /*!
             * @brief This function returns the value of member reuse
             * @return Value of member reuse
             */
            inline eProsima_user_DllExport bool reuse() const
            {
                return m_reuse;
            }

            /*!
             * @brief This function returns a reference to member reuse
             * @return Reference to member reuse
             */
            inline eProsima_user_DllExport bool& reuse()
            {
                return m_reuse;
            }
            /*!
             * @brief This function sets a value in member replace
             * @param _replace New value for member replace
             */
            inline eProsima_user_DllExport void replace(bool _replace)
            {
                m_replace = _replace;
            }

            /*!
             * @brief This function returns the value of member replace
             * @return Value of member replace
             */
            inline eProsima_user_DllExport bool replace() const
            {
                return m_replace;
            }

            /*!
             * @brief This function returns a reference to member replace
             * @return Reference to member replace
             */
            inline eProsima_user_DllExport bool& replace()
            {
                return m_replace;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::CreationMode& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            bool m_reuse;
            bool m_replace;
        };
        typedef std::array<uint8_t, 2> RequestId;
        /*!
         * @brief This class represents the structure ResultStatus defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class ResultStatus
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ResultStatus();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ResultStatus();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::ResultStatus that will be copied.
             */
            eProsima_user_DllExport ResultStatus(const ResultStatus &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::ResultStatus that will be copied.
             */
            eProsima_user_DllExport ResultStatus(ResultStatus &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::ResultStatus that will be copied.
             */
            eProsima_user_DllExport ResultStatus& operator=(const ResultStatus &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::ResultStatus that will be copied.
             */
            eProsima_user_DllExport ResultStatus& operator=(ResultStatus &&x);
            
            /*!
             * @brief This function copies the value in member request_id
             * @param _request_id New value to be copied in member request_id
             */
            inline eProsima_user_DllExport void request_id(const dds::xrce::RequestId &_request_id)
            {
                m_request_id = _request_id;
            }

            /*!
             * @brief This function moves the value in member request_id
             * @param _request_id New value to be moved in member request_id
             */
            inline eProsima_user_DllExport void request_id(dds::xrce::RequestId &&_request_id)
            {
                m_request_id = std::move(_request_id);
            }

            /*!
             * @brief This function returns a constant reference to member request_id
             * @return Constant reference to member request_id
             */
            inline eProsima_user_DllExport const dds::xrce::RequestId& request_id() const
            {
                return m_request_id;
            }

            /*!
             * @brief This function returns a reference to member request_id
             * @return Reference to member request_id
             */
            inline eProsima_user_DllExport dds::xrce::RequestId& request_id()
            {
                return m_request_id;
            }
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline eProsima_user_DllExport void status(uint8_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline eProsima_user_DllExport uint8_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline eProsima_user_DllExport uint8_t& status()
            {
                return m_status;
            }
            /*!
             * @brief This function sets a value in member implementation_status
             * @param _implementation_status New value for member implementation_status
             */
            inline eProsima_user_DllExport void implementation_status(uint8_t _implementation_status)
            {
                m_implementation_status = _implementation_status;
            }

            /*!
             * @brief This function returns the value of member implementation_status
             * @return Value of member implementation_status
             */
            inline eProsima_user_DllExport uint8_t implementation_status() const
            {
                return m_implementation_status;
            }

            /*!
             * @brief This function returns a reference to member implementation_status
             * @return Reference to member implementation_status
             */
            inline eProsima_user_DllExport uint8_t& implementation_status()
            {
                return m_implementation_status;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::ResultStatus& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::RequestId m_request_id;
            uint8_t m_status;
            uint8_t m_implementation_status;
        };
        const uint8_t STATUS_OK = 0x00;
        const uint8_t STATUS_OK_MATCHED = 0x01;
        const uint8_t STATUS_ERR_DDS_ERROR = 0x80;
        const uint8_t STATUS_ERR_MISMATCH = 0x81;
        const uint8_t STATUS_ERR_ALREADY_EXISTS = 0x82;
        const uint8_t STATUS_ERR_DENIED = 0x83;
        const uint8_t STATUS_ERR_UNKNOWN_REFERENCE = 0x84;
        const uint8_t STATUS_ERR_INVALID_DATA = 0x85;
        const uint8_t STATUS_ERR_INCOMPATIBLE = 0x86;
        const uint8_t STATUS_ERR_RESOURCES = 0x87;
        const uint8_t STATUS_LAST_OP_NONE = 0;
        const uint8_t STATUS_LAST_OP_CREATE = 1;
        const uint8_t STATUS_LAST_OP_UPDATE = 2;
        const uint8_t STATUS_LAST_OP_DELETE = 3;
        const uint8_t STATUS_LAST_OP_LOOKUP = 4;
        const uint8_t STATUS_LAST_OP_READ = 5;
        const uint8_t STATUS_LAST_OP_WRITE = 6;
        /*!
         * @brief This class represents the enumeration InfoMask defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        enum InfoMask : uint32_t
        {
            INFO_CONFIGURATION,
            INFO_ACTIVITY
        };
        /*!
         * @brief This class represents the structure OBJK_DATAREADER_ActivityInfo defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_DATAREADER_ActivityInfo
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_DATAREADER_ActivityInfo();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_DATAREADER_ActivityInfo();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_DATAREADER_ActivityInfo that will be copied.
             */
            eProsima_user_DllExport OBJK_DATAREADER_ActivityInfo(const OBJK_DATAREADER_ActivityInfo &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_DATAREADER_ActivityInfo that will be copied.
             */
            eProsima_user_DllExport OBJK_DATAREADER_ActivityInfo(OBJK_DATAREADER_ActivityInfo &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_DATAREADER_ActivityInfo that will be copied.
             */
            eProsima_user_DllExport OBJK_DATAREADER_ActivityInfo& operator=(const OBJK_DATAREADER_ActivityInfo &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_DATAREADER_ActivityInfo that will be copied.
             */
            eProsima_user_DllExport OBJK_DATAREADER_ActivityInfo& operator=(OBJK_DATAREADER_ActivityInfo &&x);
            
            /*!
             * @brief This function sets a value in member highest_acked_num
             * @param _highest_acked_num New value for member highest_acked_num
             */
            inline eProsima_user_DllExport void highest_acked_num(int16_t _highest_acked_num)
            {
                m_highest_acked_num = _highest_acked_num;
            }

            /*!
             * @brief This function returns the value of member highest_acked_num
             * @return Value of member highest_acked_num
             */
            inline eProsima_user_DllExport int16_t highest_acked_num() const
            {
                return m_highest_acked_num;
            }

            /*!
             * @brief This function returns a reference to member highest_acked_num
             * @return Reference to member highest_acked_num
             */
            inline eProsima_user_DllExport int16_t& highest_acked_num()
            {
                return m_highest_acked_num;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_DATAREADER_ActivityInfo& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            int16_t m_highest_acked_num;
        };
        /*!
         * @brief This class represents the structure OBJK_DATAWRITER_ActivityInfo defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class OBJK_DATAWRITER_ActivityInfo
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport OBJK_DATAWRITER_ActivityInfo();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~OBJK_DATAWRITER_ActivityInfo();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::OBJK_DATAWRITER_ActivityInfo that will be copied.
             */
            eProsima_user_DllExport OBJK_DATAWRITER_ActivityInfo(const OBJK_DATAWRITER_ActivityInfo &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::OBJK_DATAWRITER_ActivityInfo that will be copied.
             */
            eProsima_user_DllExport OBJK_DATAWRITER_ActivityInfo(OBJK_DATAWRITER_ActivityInfo &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::OBJK_DATAWRITER_ActivityInfo that will be copied.
             */
            eProsima_user_DllExport OBJK_DATAWRITER_ActivityInfo& operator=(const OBJK_DATAWRITER_ActivityInfo &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::OBJK_DATAWRITER_ActivityInfo that will be copied.
             */
            eProsima_user_DllExport OBJK_DATAWRITER_ActivityInfo& operator=(OBJK_DATAWRITER_ActivityInfo &&x);
            
            /*!
             * @brief This function sets a value in member stream_seq_num
             * @param _stream_seq_num New value for member stream_seq_num
             */
            inline eProsima_user_DllExport void stream_seq_num(int16_t _stream_seq_num)
            {
                m_stream_seq_num = _stream_seq_num;
            }

            /*!
             * @brief This function returns the value of member stream_seq_num
             * @return Value of member stream_seq_num
             */
            inline eProsima_user_DllExport int16_t stream_seq_num() const
            {
                return m_stream_seq_num;
            }

            /*!
             * @brief This function returns a reference to member stream_seq_num
             * @return Reference to member stream_seq_num
             */
            inline eProsima_user_DllExport int16_t& stream_seq_num()
            {
                return m_stream_seq_num;
            }
            /*!
             * @brief This function sets a value in member sample_seq_num
             * @param _sample_seq_num New value for member sample_seq_num
             */
            inline eProsima_user_DllExport void sample_seq_num(uint64_t _sample_seq_num)
            {
                m_sample_seq_num = _sample_seq_num;
            }

            /*!
             * @brief This function returns the value of member sample_seq_num
             * @return Value of member sample_seq_num
             */
            inline eProsima_user_DllExport uint64_t sample_seq_num() const
            {
                return m_sample_seq_num;
            }

            /*!
             * @brief This function returns a reference to member sample_seq_num
             * @return Reference to member sample_seq_num
             */
            inline eProsima_user_DllExport uint64_t& sample_seq_num()
            {
                return m_sample_seq_num;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::OBJK_DATAWRITER_ActivityInfo& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            int16_t m_stream_seq_num;
            uint64_t m_sample_seq_num;
        };
        /*!
         * @brief This class represents the union ActivityInfoVariant defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class ActivityInfoVariant
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ActivityInfoVariant();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ActivityInfoVariant();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::ActivityInfoVariant that will be copied.
             */
            eProsima_user_DllExport ActivityInfoVariant(const ActivityInfoVariant &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::ActivityInfoVariant that will be copied.
             */
            eProsima_user_DllExport ActivityInfoVariant(ActivityInfoVariant &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::ActivityInfoVariant that will be copied.
             */
            eProsima_user_DllExport ActivityInfoVariant& operator=(const ActivityInfoVariant &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::ActivityInfoVariant that will be copied.
             */
            eProsima_user_DllExport ActivityInfoVariant& operator=(ActivityInfoVariant &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            eProsima_user_DllExport void _d(dds::xrce::ObjectKind __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            eProsima_user_DllExport dds::xrce::ObjectKind _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            eProsima_user_DllExport dds::xrce::ObjectKind& _d();
            
            /*!
             * @brief This function copies the value in member data_writer
             * @param _data_writer New value to be copied in member data_writer
             */
            eProsima_user_DllExport void data_writer(const dds::xrce::OBJK_DATAWRITER_ActivityInfo &_data_writer);

            /*!
             * @brief This function moves the value in member data_writer
             * @param _data_writer New value to be moved in member data_writer
             */
            eProsima_user_DllExport void data_writer(dds::xrce::OBJK_DATAWRITER_ActivityInfo &&_data_writer);

            /*!
             * @brief This function returns a constant reference to member data_writer
             * @return Constant reference to member data_writer
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_DATAWRITER_ActivityInfo& data_writer() const;

            /*!
             * @brief This function returns a reference to member data_writer
             * @return Reference to member data_writer
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_DATAWRITER_ActivityInfo& data_writer();
            /*!
             * @brief This function copies the value in member data_reader
             * @param _data_reader New value to be copied in member data_reader
             */
            eProsima_user_DllExport void data_reader(const dds::xrce::OBJK_DATAREADER_ActivityInfo &_data_reader);

            /*!
             * @brief This function moves the value in member data_reader
             * @param _data_reader New value to be moved in member data_reader
             */
            eProsima_user_DllExport void data_reader(dds::xrce::OBJK_DATAREADER_ActivityInfo &&_data_reader);

            /*!
             * @brief This function returns a constant reference to member data_reader
             * @return Constant reference to member data_reader
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::OBJK_DATAREADER_ActivityInfo& data_reader() const;

            /*!
             * @brief This function returns a reference to member data_reader
             * @return Reference to member data_reader
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::OBJK_DATAREADER_ActivityInfo& data_reader();
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::ActivityInfoVariant& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::ObjectKind m__d;
            
            dds::xrce::OBJK_DATAWRITER_ActivityInfo m_data_writer;
            dds::xrce::OBJK_DATAREADER_ActivityInfo m_data_reader;
        };
        /*!
         * @brief This class represents the structure Info defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class Info
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Info();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Info();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::Info that will be copied.
             */
            eProsima_user_DllExport Info(const Info &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::Info that will be copied.
             */
            eProsima_user_DllExport Info(Info &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::Info that will be copied.
             */
            eProsima_user_DllExport Info& operator=(const Info &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::Info that will be copied.
             */
            eProsima_user_DllExport Info& operator=(Info &&x);
            
            /*!
             * @brief This function copies the value in member config
             * @param _config New value to be copied in member config
             */
            inline eProsima_user_DllExport void config(const dds::xrce::ObjectVariant &_config)
            {
                m_config = _config;
            }

            /*!
             * @brief This function moves the value in member config
             * @param _config New value to be moved in member config
             */
            inline eProsima_user_DllExport void config(dds::xrce::ObjectVariant &&_config)
            {
                m_config = std::move(_config);
            }

            /*!
             * @brief This function returns a constant reference to member config
             * @return Constant reference to member config
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectVariant& config() const
            {
                return m_config;
            }

            /*!
             * @brief This function returns a reference to member config
             * @return Reference to member config
             */
            inline eProsima_user_DllExport dds::xrce::ObjectVariant& config()
            {
                return m_config;
            }
            /*!
             * @brief This function copies the value in member activity
             * @param _activity New value to be copied in member activity
             */
            inline eProsima_user_DllExport void activity(const dds::xrce::ActivityInfoVariant &_activity)
            {
                m_activity = _activity;
            }

            /*!
             * @brief This function moves the value in member activity
             * @param _activity New value to be moved in member activity
             */
            inline eProsima_user_DllExport void activity(dds::xrce::ActivityInfoVariant &&_activity)
            {
                m_activity = std::move(_activity);
            }

            /*!
             * @brief This function returns a constant reference to member activity
             * @return Constant reference to member activity
             */
            inline eProsima_user_DllExport const dds::xrce::ActivityInfoVariant& activity() const
            {
                return m_activity;
            }

            /*!
             * @brief This function returns a reference to member activity
             * @return Reference to member activity
             */
            inline eProsima_user_DllExport dds::xrce::ActivityInfoVariant& activity()
            {
                return m_activity;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::Info& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::ObjectVariant m_config;
            dds::xrce::ActivityInfoVariant m_activity;
        };
        /*!
         * @brief This class represents the structure BaseRequest defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class BaseRequest
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BaseRequest();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BaseRequest();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::BaseRequest that will be copied.
             */
            eProsima_user_DllExport BaseRequest(const BaseRequest &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::BaseRequest that will be copied.
             */
            eProsima_user_DllExport BaseRequest(BaseRequest &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::BaseRequest that will be copied.
             */
            eProsima_user_DllExport BaseRequest& operator=(const BaseRequest &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::BaseRequest that will be copied.
             */
            eProsima_user_DllExport BaseRequest& operator=(BaseRequest &&x);
            
            /*!
             * @brief This function copies the value in member request_id
             * @param _request_id New value to be copied in member request_id
             */
            inline eProsima_user_DllExport void request_id(const dds::xrce::RequestId &_request_id)
            {
                m_request_id = _request_id;
            }

            /*!
             * @brief This function moves the value in member request_id
             * @param _request_id New value to be moved in member request_id
             */
            inline eProsima_user_DllExport void request_id(dds::xrce::RequestId &&_request_id)
            {
                m_request_id = std::move(_request_id);
            }

            /*!
             * @brief This function returns a constant reference to member request_id
             * @return Constant reference to member request_id
             */
            inline eProsima_user_DllExport const dds::xrce::RequestId& request_id() const
            {
                return m_request_id;
            }

            /*!
             * @brief This function returns a reference to member request_id
             * @return Reference to member request_id
             */
            inline eProsima_user_DllExport dds::xrce::RequestId& request_id()
            {
                return m_request_id;
            }
            /*!
             * @brief This function copies the value in member object_id
             * @param _object_id New value to be copied in member object_id
             */
            inline eProsima_user_DllExport void object_id(const dds::xrce::ObjectId &_object_id)
            {
                m_object_id = _object_id;
            }

            /*!
             * @brief This function moves the value in member object_id
             * @param _object_id New value to be moved in member object_id
             */
            inline eProsima_user_DllExport void object_id(dds::xrce::ObjectId &&_object_id)
            {
                m_object_id = std::move(_object_id);
            }

            /*!
             * @brief This function returns a constant reference to member object_id
             * @return Constant reference to member object_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& object_id() const
            {
                return m_object_id;
            }

            /*!
             * @brief This function returns a reference to member object_id
             * @return Reference to member object_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& object_id()
            {
                return m_object_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::BaseRequest& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::RequestId m_request_id;
            dds::xrce::ObjectId m_object_id;
        };
        /*!
         * @brief This class represents the structure BaseObjectRequest defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class BaseObjectRequest
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BaseObjectRequest();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BaseObjectRequest();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::BaseObjectRequest that will be copied.
             */
            eProsima_user_DllExport BaseObjectRequest(const BaseObjectRequest &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::BaseObjectRequest that will be copied.
             */
            eProsima_user_DllExport BaseObjectRequest(BaseObjectRequest &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::BaseObjectRequest that will be copied.
             */
            eProsima_user_DllExport BaseObjectRequest& operator=(const BaseObjectRequest &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::BaseObjectRequest that will be copied.
             */
            eProsima_user_DllExport BaseObjectRequest& operator=(BaseObjectRequest &&x);
            
            /*!
             * @brief This function copies the value in member base_request
             * @param _base_request New value to be copied in member base_request
             */
            inline eProsima_user_DllExport void base_request(const dds::xrce::BaseRequest &_base_request)
            {
                m_base_request = _base_request;
            }

            /*!
             * @brief This function moves the value in member base_request
             * @param _base_request New value to be moved in member base_request
             */
            inline eProsima_user_DllExport void base_request(dds::xrce::BaseRequest &&_base_request)
            {
                m_base_request = std::move(_base_request);
            }

            /*!
             * @brief This function returns a constant reference to member base_request
             * @return Constant reference to member base_request
             */
            inline eProsima_user_DllExport const dds::xrce::BaseRequest& base_request() const
            {
                return m_base_request;
            }

            /*!
             * @brief This function returns a reference to member base_request
             * @return Reference to member base_request
             */
            inline eProsima_user_DllExport dds::xrce::BaseRequest& base_request()
            {
                return m_base_request;
            }
            /*!
             * @brief This function copies the value in member object_id
             * @param _object_id New value to be copied in member object_id
             */
            inline eProsima_user_DllExport void object_id(const dds::xrce::ObjectId &_object_id)
            {
                m_object_id = _object_id;
            }

            /*!
             * @brief This function moves the value in member object_id
             * @param _object_id New value to be moved in member object_id
             */
            inline eProsima_user_DllExport void object_id(dds::xrce::ObjectId &&_object_id)
            {
                m_object_id = std::move(_object_id);
            }

            /*!
             * @brief This function returns a constant reference to member object_id
             * @return Constant reference to member object_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& object_id() const
            {
                return m_object_id;
            }

            /*!
             * @brief This function returns a reference to member object_id
             * @return Reference to member object_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& object_id()
            {
                return m_object_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::BaseObjectRequest& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::BaseRequest m_base_request;
            dds::xrce::ObjectId m_object_id;
        };
        /*!
         * @brief This class represents the structure BaseReply defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class BaseReply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BaseReply();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BaseReply();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::BaseReply that will be copied.
             */
            eProsima_user_DllExport BaseReply(const BaseReply &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::BaseReply that will be copied.
             */
            eProsima_user_DllExport BaseReply(BaseReply &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::BaseReply that will be copied.
             */
            eProsima_user_DllExport BaseReply& operator=(const BaseReply &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::BaseReply that will be copied.
             */
            eProsima_user_DllExport BaseReply& operator=(BaseReply &&x);
            
            /*!
             * @brief This function copies the value in member result
             * @param _result New value to be copied in member result
             */
            inline eProsima_user_DllExport void result(const dds::xrce::ResultStatus &_result)
            {
                m_result = _result;
            }

            /*!
             * @brief This function moves the value in member result
             * @param _result New value to be moved in member result
             */
            inline eProsima_user_DllExport void result(dds::xrce::ResultStatus &&_result)
            {
                m_result = std::move(_result);
            }

            /*!
             * @brief This function returns a constant reference to member result
             * @return Constant reference to member result
             */
            inline eProsima_user_DllExport const dds::xrce::ResultStatus& result() const
            {
                return m_result;
            }

            /*!
             * @brief This function returns a reference to member result
             * @return Reference to member result
             */
            inline eProsima_user_DllExport dds::xrce::ResultStatus& result()
            {
                return m_result;
            }
            /*!
             * @brief This function copies the value in member request_id
             * @param _request_id New value to be copied in member request_id
             */
            inline eProsima_user_DllExport void request_id(const dds::xrce::RequestId &_request_id)
            {
                m_request_id = _request_id;
            }

            /*!
             * @brief This function moves the value in member request_id
             * @param _request_id New value to be moved in member request_id
             */
            inline eProsima_user_DllExport void request_id(dds::xrce::RequestId &&_request_id)
            {
                m_request_id = std::move(_request_id);
            }

            /*!
             * @brief This function returns a constant reference to member request_id
             * @return Constant reference to member request_id
             */
            inline eProsima_user_DllExport const dds::xrce::RequestId& request_id() const
            {
                return m_request_id;
            }

            /*!
             * @brief This function returns a reference to member request_id
             * @return Reference to member request_id
             */
            inline eProsima_user_DllExport dds::xrce::RequestId& request_id()
            {
                return m_request_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::BaseReply& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::ResultStatus m_result;
            dds::xrce::RequestId m_request_id;
        };
        /*!
         * @brief This class represents the structure BaseObjectReply defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class BaseObjectReply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport BaseObjectReply();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~BaseObjectReply();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::BaseObjectReply that will be copied.
             */
            eProsima_user_DllExport BaseObjectReply(const BaseObjectReply &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::BaseObjectReply that will be copied.
             */
            eProsima_user_DllExport BaseObjectReply(BaseObjectReply &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::BaseObjectReply that will be copied.
             */
            eProsima_user_DllExport BaseObjectReply& operator=(const BaseObjectReply &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::BaseObjectReply that will be copied.
             */
            eProsima_user_DllExport BaseObjectReply& operator=(BaseObjectReply &&x);
            
            /*!
             * @brief This function copies the value in member base_reply
             * @param _base_reply New value to be copied in member base_reply
             */
            inline eProsima_user_DllExport void base_reply(const dds::xrce::BaseReply &_base_reply)
            {
                m_base_reply = _base_reply;
            }

            /*!
             * @brief This function moves the value in member base_reply
             * @param _base_reply New value to be moved in member base_reply
             */
            inline eProsima_user_DllExport void base_reply(dds::xrce::BaseReply &&_base_reply)
            {
                m_base_reply = std::move(_base_reply);
            }

            /*!
             * @brief This function returns a constant reference to member base_reply
             * @return Constant reference to member base_reply
             */
            inline eProsima_user_DllExport const dds::xrce::BaseReply& base_reply() const
            {
                return m_base_reply;
            }

            /*!
             * @brief This function returns a reference to member base_reply
             * @return Reference to member base_reply
             */
            inline eProsima_user_DllExport dds::xrce::BaseReply& base_reply()
            {
                return m_base_reply;
            }
            /*!
             * @brief This function copies the value in member object_id
             * @param _object_id New value to be copied in member object_id
             */
            inline eProsima_user_DllExport void object_id(const dds::xrce::ObjectId &_object_id)
            {
                m_object_id = _object_id;
            }

            /*!
             * @brief This function moves the value in member object_id
             * @param _object_id New value to be moved in member object_id
             */
            inline eProsima_user_DllExport void object_id(dds::xrce::ObjectId &&_object_id)
            {
                m_object_id = std::move(_object_id);
            }

            /*!
             * @brief This function returns a constant reference to member object_id
             * @return Constant reference to member object_id
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectId& object_id() const
            {
                return m_object_id;
            }

            /*!
             * @brief This function returns a reference to member object_id
             * @return Reference to member object_id
             */
            inline eProsima_user_DllExport dds::xrce::ObjectId& object_id()
            {
                return m_object_id;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::BaseObjectReply& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::BaseReply m_base_reply;
            dds::xrce::ObjectId m_object_id;
        };
        /*!
         * @brief This class represents the structure InfoReply defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class InfoReply
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport InfoReply();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~InfoReply();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::InfoReply that will be copied.
             */
            eProsima_user_DllExport InfoReply(const InfoReply &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::InfoReply that will be copied.
             */
            eProsima_user_DllExport InfoReply(InfoReply &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::InfoReply that will be copied.
             */
            eProsima_user_DllExport InfoReply& operator=(const InfoReply &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::InfoReply that will be copied.
             */
            eProsima_user_DllExport InfoReply& operator=(InfoReply &&x);
            
            /*!
             * @brief This function copies the value in member base_object_reply
             * @param _base_object_reply New value to be copied in member base_object_reply
             */
            inline eProsima_user_DllExport void base_object_reply(const dds::xrce::BaseObjectReply &_base_object_reply)
            {
                m_base_object_reply = _base_object_reply;
            }

            /*!
             * @brief This function moves the value in member base_object_reply
             * @param _base_object_reply New value to be moved in member base_object_reply
             */
            inline eProsima_user_DllExport void base_object_reply(dds::xrce::BaseObjectReply &&_base_object_reply)
            {
                m_base_object_reply = std::move(_base_object_reply);
            }

            /*!
             * @brief This function returns a constant reference to member base_object_reply
             * @return Constant reference to member base_object_reply
             */
            inline eProsima_user_DllExport const dds::xrce::BaseObjectReply& base_object_reply() const
            {
                return m_base_object_reply;
            }

            /*!
             * @brief This function returns a reference to member base_object_reply
             * @return Reference to member base_object_reply
             */
            inline eProsima_user_DllExport dds::xrce::BaseObjectReply& base_object_reply()
            {
                return m_base_object_reply;
            }
            /*!
             * @brief This function copies the value in member info
             * @param _info New value to be copied in member info
             */
            inline eProsima_user_DllExport void info(const dds::xrce::ObjectVariant &_info)
            {
                m_info = _info;
            }

            /*!
             * @brief This function moves the value in member info
             * @param _info New value to be moved in member info
             */
            inline eProsima_user_DllExport void info(dds::xrce::ObjectVariant &&_info)
            {
                m_info = std::move(_info);
            }

            /*!
             * @brief This function returns a constant reference to member info
             * @return Constant reference to member info
             */
            inline eProsima_user_DllExport const dds::xrce::ObjectVariant& info() const
            {
                return m_info;
            }

            /*!
             * @brief This function returns a reference to member info
             * @return Reference to member info
             */
            inline eProsima_user_DllExport dds::xrce::ObjectVariant& info()
            {
                return m_info;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::InfoReply& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::BaseObjectReply m_base_object_reply;
            dds::xrce::ObjectVariant m_info;
        };
        typedef uint8_t DataFormat;
        const dds::xrce::DataFormat FORMAT_DATA = 0x00;
        const dds::xrce::DataFormat FORMAT_DATA_SEQ = 0x01;
        const dds::xrce::DataFormat FORMAT_SAMPLE = 0x02;
        const dds::xrce::DataFormat FORMAT_SAMPLE_SEQ = 0x03;
        const dds::xrce::DataFormat FORMAT_PACKED_SAMPLES = 0x04;
        /*!
         * @brief This class represents the structure DataDeliveryControl defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class DataDeliveryControl
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport DataDeliveryControl();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~DataDeliveryControl();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::DataDeliveryControl that will be copied.
             */
            eProsima_user_DllExport DataDeliveryControl(const DataDeliveryControl &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::DataDeliveryControl that will be copied.
             */
            eProsima_user_DllExport DataDeliveryControl(DataDeliveryControl &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::DataDeliveryControl that will be copied.
             */
            eProsima_user_DllExport DataDeliveryControl& operator=(const DataDeliveryControl &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::DataDeliveryControl that will be copied.
             */
            eProsima_user_DllExport DataDeliveryControl& operator=(DataDeliveryControl &&x);
            
            /*!
             * @brief This function sets a value in member max_samples
             * @param _max_samples New value for member max_samples
             */
            inline eProsima_user_DllExport void max_samples(uint16_t _max_samples)
            {
                m_max_samples = _max_samples;
            }

            /*!
             * @brief This function returns the value of member max_samples
             * @return Value of member max_samples
             */
            inline eProsima_user_DllExport uint16_t max_samples() const
            {
                return m_max_samples;
            }

            /*!
             * @brief This function returns a reference to member max_samples
             * @return Reference to member max_samples
             */
            inline eProsima_user_DllExport uint16_t& max_samples()
            {
                return m_max_samples;
            }
            /*!
             * @brief This function sets a value in member max_elapsed_time
             * @param _max_elapsed_time New value for member max_elapsed_time
             */
            inline eProsima_user_DllExport void max_elapsed_time(uint32_t _max_elapsed_time)
            {
                m_max_elapsed_time = _max_elapsed_time;
            }

            /*!
             * @brief This function returns the value of member max_elapsed_time
             * @return Value of member max_elapsed_time
             */
            inline eProsima_user_DllExport uint32_t max_elapsed_time() const
            {
                return m_max_elapsed_time;
            }

            /*!
             * @brief This function returns a reference to member max_elapsed_time
             * @return Reference to member max_elapsed_time
             */
            inline eProsima_user_DllExport uint32_t& max_elapsed_time()
            {
                return m_max_elapsed_time;
            }
            /*!
             * @brief This function sets a value in member max_rate
             * @param _max_rate New value for member max_rate
             */
            inline eProsima_user_DllExport void max_rate(uint32_t _max_rate)
            {
                m_max_rate = _max_rate;
            }

            /*!
             * @brief This function returns the value of member max_rate
             * @return Value of member max_rate
             */
            inline eProsima_user_DllExport uint32_t max_rate() const
            {
                return m_max_rate;
            }

            /*!
             * @brief This function returns a reference to member max_rate
             * @return Reference to member max_rate
             */
            inline eProsima_user_DllExport uint32_t& max_rate()
            {
                return m_max_rate;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::DataDeliveryControl& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            uint16_t m_max_samples;
            uint32_t m_max_elapsed_time;
            uint32_t m_max_rate;
        };
        /*!
         * @brief This class represents the union DataDeliveryConfig defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class DataDeliveryConfig
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport DataDeliveryConfig();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~DataDeliveryConfig();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::DataDeliveryConfig that will be copied.
             */
            eProsima_user_DllExport DataDeliveryConfig(const DataDeliveryConfig &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::DataDeliveryConfig that will be copied.
             */
            eProsima_user_DllExport DataDeliveryConfig(DataDeliveryConfig &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::DataDeliveryConfig that will be copied.
             */
            eProsima_user_DllExport DataDeliveryConfig& operator=(const DataDeliveryConfig &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::DataDeliveryConfig that will be copied.
             */
            eProsima_user_DllExport DataDeliveryConfig& operator=(DataDeliveryConfig &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            eProsima_user_DllExport void _d(dds::xrce::DataFormat __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            eProsima_user_DllExport dds::xrce::DataFormat _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            eProsima_user_DllExport dds::xrce::DataFormat& _d();
            
            /*!
             * @brief This function copies the value in member delivey_control
             * @param _delivey_control New value to be copied in member delivey_control
             */
            eProsima_user_DllExport void delivey_control(const dds::xrce::DataDeliveryControl &_delivey_control);

            /*!
             * @brief This function moves the value in member delivey_control
             * @param _delivey_control New value to be moved in member delivey_control
             */
            eProsima_user_DllExport void delivey_control(dds::xrce::DataDeliveryControl &&_delivey_control);

            /*!
             * @brief This function returns a constant reference to member delivey_control
             * @return Constant reference to member delivey_control
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::DataDeliveryControl& delivey_control() const;

            /*!
             * @brief This function returns a reference to member delivey_control
             * @return Reference to member delivey_control
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::DataDeliveryControl& delivey_control();
            /*!
             * @brief This function sets a value in member dummy
             * @param _dummy New value for member dummy
             */
            eProsima_user_DllExport void dummy(uint8_t _dummy);

            /*!
             * @brief This function returns the value of member dummy
             * @return Value of member dummy
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport uint8_t dummy() const;

            /*!
             * @brief This function returns a reference to member dummy
             * @return Reference to member dummy
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport uint8_t& dummy();
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::DataDeliveryConfig& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::DataFormat m__d;
            
            dds::xrce::DataDeliveryControl m_delivey_control;
            uint8_t m_dummy;
        };
        /*!
         * @brief This class represents the structure ReadSpecification defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class ReadSpecification
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ReadSpecification();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ReadSpecification();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::ReadSpecification that will be copied.
             */
            eProsima_user_DllExport ReadSpecification(const ReadSpecification &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::ReadSpecification that will be copied.
             */
            eProsima_user_DllExport ReadSpecification(ReadSpecification &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::ReadSpecification that will be copied.
             */
            eProsima_user_DllExport ReadSpecification& operator=(const ReadSpecification &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::ReadSpecification that will be copied.
             */
            eProsima_user_DllExport ReadSpecification& operator=(ReadSpecification &&x);
            
            /*!
             * @brief This function copies the value in member content_filter_expression
             * @param _content_filter_expression New value to be copied in member content_filter_expression
             */
            inline eProsima_user_DllExport void content_filter_expression(const std::string &_content_filter_expression)
            {
                m_content_filter_expression = _content_filter_expression;
            }

            /*!
             * @brief This function moves the value in member content_filter_expression
             * @param _content_filter_expression New value to be moved in member content_filter_expression
             */
            inline eProsima_user_DllExport void content_filter_expression(std::string &&_content_filter_expression)
            {
                m_content_filter_expression = std::move(_content_filter_expression);
            }

            /*!
             * @brief This function returns a constant reference to member content_filter_expression
             * @return Constant reference to member content_filter_expression
             */
            inline eProsima_user_DllExport const std::string& content_filter_expression() const
            {
                return m_content_filter_expression;
            }

            /*!
             * @brief This function returns a reference to member content_filter_expression
             * @return Reference to member content_filter_expression
             */
            inline eProsima_user_DllExport std::string& content_filter_expression()
            {
                return m_content_filter_expression;
            }
            /*!
             * @brief This function copies the value in member delivery_config
             * @param _delivery_config New value to be copied in member delivery_config
             */
            inline eProsima_user_DllExport void delivery_config(const dds::xrce::DataDeliveryConfig &_delivery_config)
            {
                m_delivery_config = _delivery_config;
            }

            /*!
             * @brief This function moves the value in member delivery_config
             * @param _delivery_config New value to be moved in member delivery_config
             */
            inline eProsima_user_DllExport void delivery_config(dds::xrce::DataDeliveryConfig &&_delivery_config)
            {
                m_delivery_config = std::move(_delivery_config);
            }

            /*!
             * @brief This function returns a constant reference to member delivery_config
             * @return Constant reference to member delivery_config
             */
            inline eProsima_user_DllExport const dds::xrce::DataDeliveryConfig& delivery_config() const
            {
                return m_delivery_config;
            }

            /*!
             * @brief This function returns a reference to member delivery_config
             * @return Reference to member delivery_config
             */
            inline eProsima_user_DllExport dds::xrce::DataDeliveryConfig& delivery_config()
            {
                return m_delivery_config;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::ReadSpecification& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::string m_content_filter_expression;
            dds::xrce::DataDeliveryConfig m_delivery_config;
        };
        /*!
         * @brief This class represents the structure SampleInfo defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class SampleInfo
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport SampleInfo();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~SampleInfo();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::SampleInfo that will be copied.
             */
            eProsima_user_DllExport SampleInfo(const SampleInfo &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::SampleInfo that will be copied.
             */
            eProsima_user_DllExport SampleInfo(SampleInfo &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::SampleInfo that will be copied.
             */
            eProsima_user_DllExport SampleInfo& operator=(const SampleInfo &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::SampleInfo that will be copied.
             */
            eProsima_user_DllExport SampleInfo& operator=(SampleInfo &&x);
            
            /*!
             * @brief This function sets a value in member state
             * @param _state New value for member state
             */
            inline eProsima_user_DllExport void state(uint32_t _state)
            {
                m_state = _state;
            }

            /*!
             * @brief This function returns the value of member state
             * @return Value of member state
             */
            inline eProsima_user_DllExport uint32_t state() const
            {
                return m_state;
            }

            /*!
             * @brief This function returns a reference to member state
             * @return Reference to member state
             */
            inline eProsima_user_DllExport uint32_t& state()
            {
                return m_state;
            }
            /*!
             * @brief This function sets a value in member sequence_number
             * @param _sequence_number New value for member sequence_number
             */
            inline eProsima_user_DllExport void sequence_number(uint32_t _sequence_number)
            {
                m_sequence_number = _sequence_number;
            }

            /*!
             * @brief This function returns the value of member sequence_number
             * @return Value of member sequence_number
             */
            inline eProsima_user_DllExport uint32_t sequence_number() const
            {
                return m_sequence_number;
            }

            /*!
             * @brief This function returns a reference to member sequence_number
             * @return Reference to member sequence_number
             */
            inline eProsima_user_DllExport uint32_t& sequence_number()
            {
                return m_sequence_number;
            }
            /*!
             * @brief This function sets a value in member session_time_offset
             * @param _session_time_offset New value for member session_time_offset
             */
            inline eProsima_user_DllExport void session_time_offset(uint32_t _session_time_offset)
            {
                m_session_time_offset = _session_time_offset;
            }

            /*!
             * @brief This function returns the value of member session_time_offset
             * @return Value of member session_time_offset
             */
            inline eProsima_user_DllExport uint32_t session_time_offset() const
            {
                return m_session_time_offset;
            }

            /*!
             * @brief This function returns a reference to member session_time_offset
             * @return Reference to member session_time_offset
             */
            inline eProsima_user_DllExport uint32_t& session_time_offset()
            {
                return m_session_time_offset;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::SampleInfo& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            uint32_t m_state;
            uint32_t m_sequence_number;
            uint32_t m_session_time_offset;
        };
        /*!
         * @brief This class represents the structure SampleInfoDelta defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class SampleInfoDelta
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport SampleInfoDelta();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~SampleInfoDelta();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::SampleInfoDelta that will be copied.
             */
            eProsima_user_DllExport SampleInfoDelta(const SampleInfoDelta &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::SampleInfoDelta that will be copied.
             */
            eProsima_user_DllExport SampleInfoDelta(SampleInfoDelta &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::SampleInfoDelta that will be copied.
             */
            eProsima_user_DllExport SampleInfoDelta& operator=(const SampleInfoDelta &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::SampleInfoDelta that will be copied.
             */
            eProsima_user_DllExport SampleInfoDelta& operator=(SampleInfoDelta &&x);
            
            /*!
             * @brief This function sets a value in member state
             * @param _state New value for member state
             */
            inline eProsima_user_DllExport void state(uint8_t _state)
            {
                m_state = _state;
            }

            /*!
             * @brief This function returns the value of member state
             * @return Value of member state
             */
            inline eProsima_user_DllExport uint8_t state() const
            {
                return m_state;
            }

            /*!
             * @brief This function returns a reference to member state
             * @return Reference to member state
             */
            inline eProsima_user_DllExport uint8_t& state()
            {
                return m_state;
            }
            /*!
             * @brief This function sets a value in member seq_number_delta
             * @param _seq_number_delta New value for member seq_number_delta
             */
            inline eProsima_user_DllExport void seq_number_delta(uint8_t _seq_number_delta)
            {
                m_seq_number_delta = _seq_number_delta;
            }

            /*!
             * @brief This function returns the value of member seq_number_delta
             * @return Value of member seq_number_delta
             */
            inline eProsima_user_DllExport uint8_t seq_number_delta() const
            {
                return m_seq_number_delta;
            }

            /*!
             * @brief This function returns a reference to member seq_number_delta
             * @return Reference to member seq_number_delta
             */
            inline eProsima_user_DllExport uint8_t& seq_number_delta()
            {
                return m_seq_number_delta;
            }
            /*!
             * @brief This function sets a value in member timestamp_delta
             * @param _timestamp_delta New value for member timestamp_delta
             */
            inline eProsima_user_DllExport void timestamp_delta(uint16_t _timestamp_delta)
            {
                m_timestamp_delta = _timestamp_delta;
            }

            /*!
             * @brief This function returns the value of member timestamp_delta
             * @return Value of member timestamp_delta
             */
            inline eProsima_user_DllExport uint16_t timestamp_delta() const
            {
                return m_timestamp_delta;
            }

            /*!
             * @brief This function returns a reference to member timestamp_delta
             * @return Reference to member timestamp_delta
             */
            inline eProsima_user_DllExport uint16_t& timestamp_delta()
            {
                return m_timestamp_delta;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::SampleInfoDelta& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            uint8_t m_state;
            uint8_t m_seq_number_delta;
            uint16_t m_timestamp_delta;
        };
        /*!
         * @brief This class represents the structure SampleData defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class SampleData
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport SampleData();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~SampleData();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::SampleData that will be copied.
             */
            eProsima_user_DllExport SampleData(const SampleData &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::SampleData that will be copied.
             */
            eProsima_user_DllExport SampleData(SampleData &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::SampleData that will be copied.
             */
            eProsima_user_DllExport SampleData& operator=(const SampleData &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::SampleData that will be copied.
             */
            eProsima_user_DllExport SampleData& operator=(SampleData &&x);
            
            /*!
             * @brief This function copies the value in member serialized_data
             * @param _serialized_data New value to be copied in member serialized_data
             */
            inline eProsima_user_DllExport void serialized_data(const std::vector<uint8_t> &_serialized_data)
            {
                m_serialized_data = _serialized_data;
            }

            /*!
             * @brief This function moves the value in member serialized_data
             * @param _serialized_data New value to be moved in member serialized_data
             */
            inline eProsima_user_DllExport void serialized_data(std::vector<uint8_t> &&_serialized_data)
            {
                m_serialized_data = std::move(_serialized_data);
            }

            /*!
             * @brief This function returns a constant reference to member serialized_data
             * @return Constant reference to member serialized_data
             */
            inline eProsima_user_DllExport const std::vector<uint8_t>& serialized_data() const
            {
                return m_serialized_data;
            }

            /*!
             * @brief This function returns a reference to member serialized_data
             * @return Reference to member serialized_data
             */
            inline eProsima_user_DllExport std::vector<uint8_t>& serialized_data()
            {
                return m_serialized_data;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::SampleData& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            std::vector<uint8_t> m_serialized_data;
        };
        typedef std::vector<dds::xrce::SampleData> SampleDataSeq;
        /*!
         * @brief This class represents the structure Sample defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class Sample
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Sample();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Sample();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::Sample that will be copied.
             */
            eProsima_user_DllExport Sample(const Sample &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::Sample that will be copied.
             */
            eProsima_user_DllExport Sample(Sample &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::Sample that will be copied.
             */
            eProsima_user_DllExport Sample& operator=(const Sample &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::Sample that will be copied.
             */
            eProsima_user_DllExport Sample& operator=(Sample &&x);
            
            /*!
             * @brief This function copies the value in member info
             * @param _info New value to be copied in member info
             */
            inline eProsima_user_DllExport void info(const dds::xrce::SampleInfo &_info)
            {
                m_info = _info;
            }

            /*!
             * @brief This function moves the value in member info
             * @param _info New value to be moved in member info
             */
            inline eProsima_user_DllExport void info(dds::xrce::SampleInfo &&_info)
            {
                m_info = std::move(_info);
            }

            /*!
             * @brief This function returns a constant reference to member info
             * @return Constant reference to member info
             */
            inline eProsima_user_DllExport const dds::xrce::SampleInfo& info() const
            {
                return m_info;
            }

            /*!
             * @brief This function returns a reference to member info
             * @return Reference to member info
             */
            inline eProsima_user_DllExport dds::xrce::SampleInfo& info()
            {
                return m_info;
            }
            /*!
             * @brief This function copies the value in member data
             * @param _data New value to be copied in member data
             */
            inline eProsima_user_DllExport void data(const dds::xrce::SampleData &_data)
            {
                m_data = _data;
            }

            /*!
             * @brief This function moves the value in member data
             * @param _data New value to be moved in member data
             */
            inline eProsima_user_DllExport void data(dds::xrce::SampleData &&_data)
            {
                m_data = std::move(_data);
            }

            /*!
             * @brief This function returns a constant reference to member data
             * @return Constant reference to member data
             */
            inline eProsima_user_DllExport const dds::xrce::SampleData& data() const
            {
                return m_data;
            }

            /*!
             * @brief This function returns a reference to member data
             * @return Reference to member data
             */
            inline eProsima_user_DllExport dds::xrce::SampleData& data()
            {
                return m_data;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::Sample& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::SampleInfo m_info;
            dds::xrce::SampleData m_data;
        };
        typedef std::vector<dds::xrce::Sample> SampleSeq;
        /*!
         * @brief This class represents the structure SampleDelta defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class SampleDelta
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport SampleDelta();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~SampleDelta();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::SampleDelta that will be copied.
             */
            eProsima_user_DllExport SampleDelta(const SampleDelta &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::SampleDelta that will be copied.
             */
            eProsima_user_DllExport SampleDelta(SampleDelta &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::SampleDelta that will be copied.
             */
            eProsima_user_DllExport SampleDelta& operator=(const SampleDelta &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::SampleDelta that will be copied.
             */
            eProsima_user_DllExport SampleDelta& operator=(SampleDelta &&x);
            
            /*!
             * @brief This function copies the value in member info_delta
             * @param _info_delta New value to be copied in member info_delta
             */
            inline eProsima_user_DllExport void info_delta(const dds::xrce::SampleInfoDelta &_info_delta)
            {
                m_info_delta = _info_delta;
            }

            /*!
             * @brief This function moves the value in member info_delta
             * @param _info_delta New value to be moved in member info_delta
             */
            inline eProsima_user_DllExport void info_delta(dds::xrce::SampleInfoDelta &&_info_delta)
            {
                m_info_delta = std::move(_info_delta);
            }

            /*!
             * @brief This function returns a constant reference to member info_delta
             * @return Constant reference to member info_delta
             */
            inline eProsima_user_DllExport const dds::xrce::SampleInfoDelta& info_delta() const
            {
                return m_info_delta;
            }

            /*!
             * @brief This function returns a reference to member info_delta
             * @return Reference to member info_delta
             */
            inline eProsima_user_DllExport dds::xrce::SampleInfoDelta& info_delta()
            {
                return m_info_delta;
            }
            /*!
             * @brief This function copies the value in member data
             * @param _data New value to be copied in member data
             */
            inline eProsima_user_DllExport void data(const dds::xrce::SampleData &_data)
            {
                m_data = _data;
            }

            /*!
             * @brief This function moves the value in member data
             * @param _data New value to be moved in member data
             */
            inline eProsima_user_DllExport void data(dds::xrce::SampleData &&_data)
            {
                m_data = std::move(_data);
            }

            /*!
             * @brief This function returns a constant reference to member data
             * @return Constant reference to member data
             */
            inline eProsima_user_DllExport const dds::xrce::SampleData& data() const
            {
                return m_data;
            }

            /*!
             * @brief This function returns a reference to member data
             * @return Reference to member data
             */
            inline eProsima_user_DllExport dds::xrce::SampleData& data()
            {
                return m_data;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::SampleDelta& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::SampleInfoDelta m_info_delta;
            dds::xrce::SampleData m_data;
        };
        /*!
         * @brief This class represents the structure PackedSamples defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class PackedSamples
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PackedSamples();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PackedSamples();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::PackedSamples that will be copied.
             */
            eProsima_user_DllExport PackedSamples(const PackedSamples &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::PackedSamples that will be copied.
             */
            eProsima_user_DllExport PackedSamples(PackedSamples &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::PackedSamples that will be copied.
             */
            eProsima_user_DllExport PackedSamples& operator=(const PackedSamples &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::PackedSamples that will be copied.
             */
            eProsima_user_DllExport PackedSamples& operator=(PackedSamples &&x);
            
            /*!
             * @brief This function copies the value in member info_base
             * @param _info_base New value to be copied in member info_base
             */
            inline eProsima_user_DllExport void info_base(const dds::xrce::SampleInfo &_info_base)
            {
                m_info_base = _info_base;
            }

            /*!
             * @brief This function moves the value in member info_base
             * @param _info_base New value to be moved in member info_base
             */
            inline eProsima_user_DllExport void info_base(dds::xrce::SampleInfo &&_info_base)
            {
                m_info_base = std::move(_info_base);
            }

            /*!
             * @brief This function returns a constant reference to member info_base
             * @return Constant reference to member info_base
             */
            inline eProsima_user_DllExport const dds::xrce::SampleInfo& info_base() const
            {
                return m_info_base;
            }

            /*!
             * @brief This function returns a reference to member info_base
             * @return Reference to member info_base
             */
            inline eProsima_user_DllExport dds::xrce::SampleInfo& info_base()
            {
                return m_info_base;
            }
            /*!
             * @brief This function copies the value in member sample_delta_seq
             * @param _sample_delta_seq New value to be copied in member sample_delta_seq
             */
            inline eProsima_user_DllExport void sample_delta_seq(const std::vector<dds::xrce::SampleDelta> &_sample_delta_seq)
            {
                m_sample_delta_seq = _sample_delta_seq;
            }

            /*!
             * @brief This function moves the value in member sample_delta_seq
             * @param _sample_delta_seq New value to be moved in member sample_delta_seq
             */
            inline eProsima_user_DllExport void sample_delta_seq(std::vector<dds::xrce::SampleDelta> &&_sample_delta_seq)
            {
                m_sample_delta_seq = std::move(_sample_delta_seq);
            }

            /*!
             * @brief This function returns a constant reference to member sample_delta_seq
             * @return Constant reference to member sample_delta_seq
             */
            inline eProsima_user_DllExport const std::vector<dds::xrce::SampleDelta>& sample_delta_seq() const
            {
                return m_sample_delta_seq;
            }

            /*!
             * @brief This function returns a reference to member sample_delta_seq
             * @return Reference to member sample_delta_seq
             */
            inline eProsima_user_DllExport std::vector<dds::xrce::SampleDelta>& sample_delta_seq()
            {
                return m_sample_delta_seq;
            }
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::PackedSamples& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::SampleInfo m_info_base;
            std::vector<dds::xrce::SampleDelta> m_sample_delta_seq;
        };
        typedef std::vector<dds::xrce::PackedSamples> PackedSampleSeq;
        /*!
         * @brief This class represents the union DataRepresentation defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        class DataRepresentation
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport DataRepresentation();
            
            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~DataRepresentation();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object dds::xrce::DataRepresentation that will be copied.
             */
            eProsima_user_DllExport DataRepresentation(const DataRepresentation &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object dds::xrce::DataRepresentation that will be copied.
             */
            eProsima_user_DllExport DataRepresentation(DataRepresentation &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object dds::xrce::DataRepresentation that will be copied.
             */
            eProsima_user_DllExport DataRepresentation& operator=(const DataRepresentation &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object dds::xrce::DataRepresentation that will be copied.
             */
            eProsima_user_DllExport DataRepresentation& operator=(DataRepresentation &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            eProsima_user_DllExport void _d(dds::xrce::DataFormat __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            eProsima_user_DllExport dds::xrce::DataFormat _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            eProsima_user_DllExport dds::xrce::DataFormat& _d();
            
            /*!
             * @brief This function copies the value in member data
             * @param _data New value to be copied in member data
             */
            eProsima_user_DllExport void data(const dds::xrce::SampleData &_data);

            /*!
             * @brief This function moves the value in member data
             * @param _data New value to be moved in member data
             */
            eProsima_user_DllExport void data(dds::xrce::SampleData &&_data);

            /*!
             * @brief This function returns a constant reference to member data
             * @return Constant reference to member data
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::SampleData& data() const;

            /*!
             * @brief This function returns a reference to member data
             * @return Reference to member data
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::SampleData& data();
            /*!
             * @brief This function copies the value in member data_seq
             * @param _data_seq New value to be copied in member data_seq
             */
            eProsima_user_DllExport void data_seq(const dds::xrce::SampleDataSeq &_data_seq);

            /*!
             * @brief This function moves the value in member data_seq
             * @param _data_seq New value to be moved in member data_seq
             */
            eProsima_user_DllExport void data_seq(dds::xrce::SampleDataSeq &&_data_seq);

            /*!
             * @brief This function returns a constant reference to member data_seq
             * @return Constant reference to member data_seq
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::SampleDataSeq& data_seq() const;

            /*!
             * @brief This function returns a reference to member data_seq
             * @return Reference to member data_seq
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::SampleDataSeq& data_seq();
            /*!
             * @brief This function copies the value in member sample
             * @param _sample New value to be copied in member sample
             */
            eProsima_user_DllExport void sample(const dds::xrce::Sample &_sample);

            /*!
             * @brief This function moves the value in member sample
             * @param _sample New value to be moved in member sample
             */
            eProsima_user_DllExport void sample(dds::xrce::Sample &&_sample);

            /*!
             * @brief This function returns a constant reference to member sample
             * @return Constant reference to member sample
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::Sample& sample() const;

            /*!
             * @brief This function returns a reference to member sample
             * @return Reference to member sample
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::Sample& sample();
            /*!
             * @brief This function copies the value in member sample_seq
             * @param _sample_seq New value to be copied in member sample_seq
             */
            eProsima_user_DllExport void sample_seq(const dds::xrce::SampleSeq &_sample_seq);

            /*!
             * @brief This function moves the value in member sample_seq
             * @param _sample_seq New value to be moved in member sample_seq
             */
            eProsima_user_DllExport void sample_seq(dds::xrce::SampleSeq &&_sample_seq);

            /*!
             * @brief This function returns a constant reference to member sample_seq
             * @return Constant reference to member sample_seq
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::SampleSeq& sample_seq() const;

            /*!
             * @brief This function returns a reference to member sample_seq
             * @return Reference to member sample_seq
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::SampleSeq& sample_seq();
            /*!
             * @brief This function copies the value in member packed_samples
             * @param _packed_samples New value to be copied in member packed_samples
             */
            eProsima_user_DllExport void packed_samples(const dds::xrce::PackedSamples &_packed_samples);

            /*!
             * @brief This function moves the value in member packed_samples
             * @param _packed_samples New value to be moved in member packed_samples
             */
            eProsima_user_DllExport void packed_samples(dds::xrce::PackedSamples &&_packed_samples);

            /*!
             * @brief This function returns a constant reference to member packed_samples
             * @return Constant reference to member packed_samples
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport const dds::xrce::PackedSamples& packed_samples() const;

            /*!
             * @brief This function returns a reference to member packed_samples
             * @return Reference to member packed_samples
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            eProsima_user_DllExport dds::xrce::PackedSamples& packed_samples();
            
            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const dds::xrce::DataRepresentation& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
            
        private:
            dds::xrce::DataFormat m__d;
            
            dds::xrce::SampleData m_data;
            dds::xrce::SampleDataSeq m_data_seq;
            dds::xrce::Sample m_sample;
            dds::xrce::SampleSeq m_sample_seq;
            dds::xrce::PackedSamples m_packed_samples;
        };
        /*!
         * @brief This class represents the enumeration SubmessageId defined by the user in the IDL file.
         * @ingroup DDS_XRCE_TYPES
         */
        enum SubmessageId : uint32_t
        {
            CREATE_CLIENT,
            CREATE,
            GET_INFO,
            DELETE,
            STATUS,
            INFO,
            WRITE_DATA,
            READ_DATA,
            DATA,
            ACKNACK,
            HEARTBEAT,
            FRAGMENT,
            FRAGMENT_END
        };
    }
}

#endif // _dds_xrce_types_H_