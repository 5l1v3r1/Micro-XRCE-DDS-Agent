// Copyright 2017 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DDSXRCETypes.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DDS_XRCE_TYPES_H_
#define _DDS_XRCE_TYPES_H_

#include <array>
#include <stdint.h>
#include <string>
#include <vector>

namespace eprosima {
namespace fastcdr {
class Cdr;
}
} // namespace eprosima

namespace eprosima {
namespace micrortps {

typedef std::array<uint8_t, 4> ClientKey;
typedef uint8_t ObjectKind;
const eprosima::micrortps::ObjectKind OBJK_INVALID     = 0x0;
const eprosima::micrortps::ObjectKind OBJK_PARTICIPANT = 0x1;
const eprosima::micrortps::ObjectKind OBJK_TOPIC       = 0x4;
const eprosima::micrortps::ObjectKind OBJK_DATAWRITER  = 0x3;
const eprosima::micrortps::ObjectKind OBJK_DATAREADER  = 0x7;
const eprosima::micrortps::ObjectKind OBJK_SUBSCRIBER  = 0x8;
const eprosima::micrortps::ObjectKind OBJK_PUBLISHER   = 0x9;
const eprosima::micrortps::ObjectKind OBJK_TYPE        = 0x10;
const eprosima::micrortps::ObjectKind OBJK_QOSPROFILE  = 0x11;
const eprosima::micrortps::ObjectKind OBJK_APPLICATION = 0x20;
const eprosima::micrortps::ObjectKind OBJK_CLIENT      = 0x21;

typedef std::array<uint8_t, 2> ObjectId;
// There are three predefined values ObjectId
const eprosima::micrortps::ObjectId OBJECTID_INVALID = {0xFF, 0xFF};
const eprosima::micrortps::ObjectId OBJECTID_CLIENT  = {0xFF, 0xF0};
const eprosima::micrortps::ObjectId OBJECTID_SESSION = {0xFF, 0xF1};

typedef std::array<uint8_t, 4> XrceCookie;
// Spells ‘X’ ‘R’ ‘C’ ‘E’
const eprosima::micrortps::XrceCookie XRCE_COOKIE = {0x58, 0x52, 0x43, 0x45};

typedef std::array<uint8_t, 2> XrceVersion;
const uint8_t XRCE_VESION_MAJOR                     = 0x01;
const uint8_t XRCE_VESION_MINOR                     = 0x00;
const eprosima::micrortps::XrceVersion XRCE_VERSION = {XRCE_VESION_MAJOR, XRCE_VESION_MINOR};

typedef std::array<uint8_t, 2> XrceVendorId;
const eprosima::micrortps::XrceVendorId XRCE_VENDOR_INVALID = {0x00, 0x00};

/*!
 * @brief This class represents the structure Time_t defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class Time_t
{
  public:
    /*!
     * @brief Default constructor.
     */
    Time_t();

    /*!
     * @brief Default destructor.
     */
    ~Time_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::Time_t that will be copied.
     */
    Time_t(const Time_t &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::Time_t that will be copied.
     */
    Time_t(Time_t &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::Time_t that will be copied.
     */
    Time_t &operator=(const Time_t &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::Time_t that will be copied.
     */
    Time_t &operator=(Time_t &&x);

    /*!
     * @brief This function sets a value in member seconds
     * @param _seconds New value for member seconds
     */
    inline void seconds(int32_t _seconds)
    {
        m_seconds = _seconds;
    }

    /*!
     * @brief This function returns the value of member seconds
     * @return Value of member seconds
     */
    inline int32_t seconds() const
    {
        return m_seconds;
    }

    /*!
     * @brief This function returns a reference to member seconds
     * @return Reference to member seconds
     */
    inline int32_t &seconds()
    {
        return m_seconds;
    }

    /*!
     * @brief This function sets a value in member nanoseconds
     * @param _nanoseconds New value for member nanoseconds
     */
    inline void nanoseconds(uint32_t _nanoseconds)
    {
        m_nanoseconds = _nanoseconds;
    }

    /*!
     * @brief This function returns the value of member nanoseconds
     * @return Value of member nanoseconds
     */
    inline uint32_t nanoseconds() const
    {
        return m_nanoseconds;
    }

    /*!
     * @brief This function returns a reference to member nanoseconds
     * @return Reference to member nanoseconds
     */
    inline uint32_t &nanoseconds()
    {
        return m_nanoseconds;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    int32_t m_seconds;
    uint32_t m_nanoseconds;
};

typedef uint8_t SessionId;
const eprosima::micrortps::SessionId SESSIONID_NONE_WITH_CLIENT_KEY    = 0x00;
const eprosima::micrortps::SessionId SESSIONID_NONE_WITHOUT_CLIENT_KEY = 0x80;
typedef uint8_t StreamId;
const eprosima::micrortps::SessionId STREAMID_NONE                 = 0x00;
const eprosima::micrortps::SessionId STREAMID_BUILTIN_BEST_EFFORTS = 0x01;
const eprosima::micrortps::SessionId STREAMID_BUILTIN_RELIABLE     = 0x80;

/*!
 * @brief This class represents the structure OBJK_CLIENT_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_CLIENT_Representation
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_CLIENT_Representation();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_CLIENT_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_CLIENT_Representation that will be copied.
     */
    OBJK_CLIENT_Representation(const OBJK_CLIENT_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_CLIENT_Representation that will be copied.
     */
    OBJK_CLIENT_Representation(OBJK_CLIENT_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_CLIENT_Representation that will be copied.
     */
    OBJK_CLIENT_Representation &operator=(const OBJK_CLIENT_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_CLIENT_Representation that will be copied.
     */
    OBJK_CLIENT_Representation &operator=(OBJK_CLIENT_Representation &&x);

    /*!
     * @brief This function copies the value in member xrce_cookie
     * @param _xrce_cookie New value to be copied in member xrce_cookie
     */
    inline void xrce_cookie(const eprosima::micrortps::XrceCookie &_xrce_cookie)
    {
        m_xrce_cookie = _xrce_cookie;
    }

    /*!
     * @brief This function moves the value in member xrce_cookie
     * @param _xrce_cookie New value to be moved in member xrce_cookie
     */
    inline void xrce_cookie(eprosima::micrortps::XrceCookie &&_xrce_cookie)
    {
        m_xrce_cookie = std::move(_xrce_cookie);
    }

    /*!
     * @brief This function returns a constant reference to member xrce_cookie
     * @return Constant reference to member xrce_cookie
     */
    inline const eprosima::micrortps::XrceCookie &xrce_cookie() const
    {
        return m_xrce_cookie;
    }

    /*!
     * @brief This function returns a reference to member xrce_cookie
     * @return Reference to member xrce_cookie
     */
    inline eprosima::micrortps::XrceCookie &xrce_cookie()
    {
        return m_xrce_cookie;
    }
    /*!
     * @brief This function copies the value in member xrce_version
     * @param _xrce_version New value to be copied in member xrce_version
     */
    inline void xrce_version(const eprosima::micrortps::XrceVersion &_xrce_version)
    {
        m_xrce_version = _xrce_version;
    }

    /*!
     * @brief This function moves the value in member xrce_version
     * @param _xrce_version New value to be moved in member xrce_version
     */
    inline void xrce_version(eprosima::micrortps::XrceVersion &&_xrce_version)
    {
        m_xrce_version = std::move(_xrce_version);
    }

    /*!
     * @brief This function returns a constant reference to member xrce_version
     * @return Constant reference to member xrce_version
     */
    inline const eprosima::micrortps::XrceVersion &xrce_version() const
    {
        return m_xrce_version;
    }

    /*!
     * @brief This function returns a reference to member xrce_version
     * @return Reference to member xrce_version
     */
    inline eprosima::micrortps::XrceVersion &xrce_version()
    {
        return m_xrce_version;
    }
    /*!
     * @brief This function copies the value in member xrce_vendor_id
     * @param _xrce_vendor_id New value to be copied in member xrce_vendor_id
     */
    inline void xrce_vendor_id(const eprosima::micrortps::XrceVendorId &_xrce_vendor_id)
    {
        m_xrce_vendor_id = _xrce_vendor_id;
    }

    /*!
     * @brief This function moves the value in member xrce_vendor_id
     * @param _xrce_vendor_id New value to be moved in member xrce_vendor_id
     */
    inline void xrce_vendor_id(eprosima::micrortps::XrceVendorId &&_xrce_vendor_id)
    {
        m_xrce_vendor_id = std::move(_xrce_vendor_id);
    }

    /*!
     * @brief This function returns a constant reference to member xrce_vendor_id
     * @return Constant reference to member xrce_vendor_id
     */
    inline const eprosima::micrortps::XrceVendorId &xrce_vendor_id() const
    {
        return m_xrce_vendor_id;
    }

    /*!
     * @brief This function returns a reference to member xrce_vendor_id
     * @return Reference to member xrce_vendor_id
     */
    inline eprosima::micrortps::XrceVendorId &xrce_vendor_id()
    {
        return m_xrce_vendor_id;
    }
    /*!
     * @brief This function copies the value in member client_timestamp
     * @param _client_timestamp New value to be copied in member client_timestamp
     */
    inline void client_timestamp(const eprosima::micrortps::Time_t &_client_timestamp)
    {
        m_client_timestamp = _client_timestamp;
    }

    /*!
     * @brief This function moves the value in member client_timestamp
     * @param _client_timestamp New value to be moved in member client_timestamp
     */
    inline void client_timestamp(eprosima::micrortps::Time_t &&_client_timestamp)
    {
        m_client_timestamp = std::move(_client_timestamp);
    }

    /*!
     * @brief This function returns a constant reference to member client_timestamp
     * @return Constant reference to member client_timestamp
     */
    inline const eprosima::micrortps::Time_t &client_timestamp() const
    {
        return m_client_timestamp;
    }

    /*!
     * @brief This function returns a reference to member client_timestamp
     * @return Reference to member client_timestamp
     */
    inline eprosima::micrortps::Time_t &client_timestamp()
    {
        return m_client_timestamp;
    }
    /*!
     * @brief This function copies the value in member client_key
     * @param _client_key New value to be copied in member client_key
     */
    inline void client_key(const eprosima::micrortps::ClientKey &_client_key)
    {
        m_client_key = _client_key;
    }

    /*!
     * @brief This function moves the value in member client_key
     * @param _client_key New value to be moved in member client_key
     */
    inline void client_key(eprosima::micrortps::ClientKey &&_client_key)
    {
        m_client_key = std::move(_client_key);
    }

    /*!
     * @brief This function returns a constant reference to member client_key
     * @return Constant reference to member client_key
     */
    inline const eprosima::micrortps::ClientKey &client_key() const
    {
        return m_client_key;
    }

    /*!
     * @brief This function returns a reference to member client_key
     * @return Reference to member client_key
     */
    inline eprosima::micrortps::ClientKey &client_key()
    {
        return m_client_key;
    }
    /*!
     * @brief This function sets a value in member session_id
     * @param _session_id New value for member session_id
     */
    inline void session_id(eprosima::micrortps::SessionId _session_id)
    {
        m_session_id = _session_id;
    }

    /*!
     * @brief This function returns the value of member session_id
     * @return Value of member session_id
     */
    inline eprosima::micrortps::SessionId session_id() const
    {
        return m_session_id;
    }

    /*!
     * @brief This function returns a reference to member session_id
     * @return Reference to member session_id
     */
    inline eprosima::micrortps::SessionId &session_id()
    {
        return m_session_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::XrceCookie m_xrce_cookie;
    eprosima::micrortps::XrceVersion m_xrce_version;
    eprosima::micrortps::XrceVendorId m_xrce_vendor_id;
    eprosima::micrortps::Time_t m_client_timestamp;
    eprosima::micrortps::ClientKey m_client_key;
    eprosima::micrortps::SessionId m_session_id;
};

typedef uint8_t RepresentationFormat;
const eprosima::micrortps::RepresentationFormat REPRESENTATION_BY_REFERENCE  = 0x01; // REPRESENTATION_BY_NAME
const eprosima::micrortps::RepresentationFormat REPRESENTATION_AS_XML_STRING = 0x02;
const eprosima::micrortps::RepresentationFormat REPRESENTATION_IN_BINARY     = 0x03;

/*!
 * @brief This class represents the union OBJK_Representation3Formats defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_Representation3Formats
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_Representation3Formats();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_Representation3Formats();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation3Formats that will be copied.
     */
    OBJK_Representation3Formats(const OBJK_Representation3Formats &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation3Formats that will be copied.
     */
    OBJK_Representation3Formats(OBJK_Representation3Formats &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation3Formats that will be copied.
     */
    OBJK_Representation3Formats &operator=(const OBJK_Representation3Formats &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation3Formats that will be copied.
     */
    OBJK_Representation3Formats &operator=(OBJK_Representation3Formats &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to
     * the selected union member.
     */
    void _d(eprosima::micrortps::RepresentationFormat __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eprosima::micrortps::RepresentationFormat _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eprosima::micrortps::RepresentationFormat &_d();

    /*!
     * @brief This function copies the value in member object_reference
     * @param _object_reference New value to be copied in member object_reference
     */
    void object_reference(const std::string &_object_reference);

    /*!
     * @brief This function moves the value in member object_reference
     * @param _object_reference New value to be moved in member object_reference
     */
    void object_reference(std::string &&_object_reference);

    /*!
     * @brief This function returns a constant reference to member object_reference
     * @return Constant reference to member object_reference
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const std::string &object_reference() const;

    /*!
     * @brief This function returns a reference to member object_reference
     * @return Reference to member object_reference
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    std::string &object_reference();
    /*!
     * @brief This function copies the value in member xml_string_representation
     * @param _xml_string_representation New value to be copied in member xml_string_representation
     */
    void xml_string_representation(const std::string &_xml_string_representation);

    /*!
     * @brief This function moves the value in member xml_string_representation
     * @param _xml_string_representation New value to be moved in member xml_string_representation
     */
    void xml_string_representation(std::string &&_xml_string_representation);

    /*!
     * @brief This function returns a constant reference to member xml_string_representation
     * @return Constant reference to member xml_string_representation
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const std::string &xml_string_representation() const;

    /*!
     * @brief This function returns a reference to member xml_string_representation
     * @return Reference to member xml_string_representation
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    std::string &xml_string_representation();
    /*!
     * @brief This function copies the value in member binary_representation
     * @param _binary_representation New value to be copied in member binary_representation
     */
    void binary_representation(const std::vector<uint8_t> &_binary_representation);

    /*!
     * @brief This function moves the value in member binary_representation
     * @param _binary_representation New value to be moved in member binary_representation
     */
    void binary_representation(std::vector<uint8_t> &&_binary_representation);

    /*!
     * @brief This function returns a constant reference to member binary_representation
     * @return Constant reference to member binary_representation
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const std::vector<uint8_t> &binary_representation() const;

    /*!
     * @brief This function returns a reference to member binary_representation
     * @return Reference to member binary_representation
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    std::vector<uint8_t> &binary_representation();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::RepresentationFormat m__d;

    std::string m_object_reference;
    std::string m_xml_string_representation;
    std::vector<uint8_t> m_binary_representation;
};

/*!
 * @brief This class represents the union OBJK_Representation2Formats defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_Representation2Formats
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_Representation2Formats();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_Representation2Formats();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation2Formats that will be copied.
     */
    OBJK_Representation2Formats(const OBJK_Representation2Formats &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation2Formats that will be copied.
     */
    OBJK_Representation2Formats(OBJK_Representation2Formats &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation2Formats that will be copied.
     */
    OBJK_Representation2Formats &operator=(const OBJK_Representation2Formats &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation2Formats that will be copied.
     */
    OBJK_Representation2Formats &operator=(OBJK_Representation2Formats &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to
     * the selected union member.
     */
    void _d(eprosima::micrortps::RepresentationFormat __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eprosima::micrortps::RepresentationFormat _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eprosima::micrortps::RepresentationFormat &_d();

    /*!
     * @brief This function copies the value in member object_name
     * @param _object_name New value to be copied in member object_name
     */
    void object_name(const std::string &_object_name);

    /*!
     * @brief This function moves the value in member object_name
     * @param _object_name New value to be moved in member object_name
     */
    void object_name(std::string &&_object_name);

    /*!
     * @brief This function returns a constant reference to member object_name
     * @return Constant reference to member object_name
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const std::string &object_name() const;

    /*!
     * @brief This function returns a reference to member object_name
     * @return Reference to member object_name
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    std::string &object_name();
    /*!
     * @brief This function copies the value in member string_representation
     * @param _string_representation New value to be copied in member string_representation
     */
    void string_representation(const std::string &_string_representation);

    /*!
     * @brief This function moves the value in member string_representation
     * @param _string_representation New value to be moved in member string_representation
     */
    void string_representation(std::string &&_string_representation);

    /*!
     * @brief This function returns a constant reference to member string_representation
     * @return Constant reference to member string_representation
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const std::string &string_representation() const;

    /*!
     * @brief This function returns a reference to member string_representation
     * @return Reference to member string_representation
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    std::string &string_representation();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::RepresentationFormat m__d;

    std::string m_object_name;
    std::string m_string_representation;
};

/*!
 * @brief This class represents the structure OBJK_Representation2_Base defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_Representation2_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_Representation2_Base();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_Representation2_Base();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation2_Base that will be copied.
     */
    OBJK_Representation2_Base(const OBJK_Representation2_Base &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation2_Base that will be copied.
     */
    OBJK_Representation2_Base(OBJK_Representation2_Base &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation2_Base that will be copied.
     */
    OBJK_Representation2_Base &operator=(const OBJK_Representation2_Base &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation2_Base that will be copied.
     */
    OBJK_Representation2_Base &operator=(OBJK_Representation2_Base &&x);

    /*!
     * @brief This function copies the value in member representation
     * @param _representation New value to be copied in member representation
     */
    inline void representation(const eprosima::micrortps::OBJK_Representation2Formats &_representation)
    {
        m_representation = _representation;
    }

    /*!
     * @brief This function moves the value in member representation
     * @param _representation New value to be moved in member representation
     */
    inline void representation(eprosima::micrortps::OBJK_Representation2Formats &&_representation)
    {
        m_representation = std::move(_representation);
    }

    /*!
     * @brief This function returns a constant reference to member representation
     * @return Constant reference to member representation
     */
    inline const eprosima::micrortps::OBJK_Representation2Formats &representation() const
    {
        return m_representation;
    }

    /*!
     * @brief This function returns a reference to member representation
     * @return Reference to member representation
     */
    inline eprosima::micrortps::OBJK_Representation2Formats &representation()
    {
        return m_representation;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::OBJK_Representation2Formats m_representation;
};

/*!
 * @brief This class represents the structure OBJK_Representation3_Base defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_Representation3_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_Representation3_Base();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_Representation3_Base();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation3_Base that will be copied.
     */
    OBJK_Representation3_Base(const OBJK_Representation3_Base &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation3_Base that will be copied.
     */
    OBJK_Representation3_Base(OBJK_Representation3_Base &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation3_Base that will be copied.
     */
    OBJK_Representation3_Base &operator=(const OBJK_Representation3_Base &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Representation3_Base that will be copied.
     */
    OBJK_Representation3_Base &operator=(OBJK_Representation3_Base &&x);

    /*!
     * @brief This function copies the value in member representation
     * @param _representation New value to be copied in member representation
     */
    inline void representation(const eprosima::micrortps::OBJK_Representation3Formats &_representation)
    {
        m_representation = _representation;
    }

    /*!
     * @brief This function moves the value in member representation
     * @param _representation New value to be moved in member representation
     */
    inline void representation(eprosima::micrortps::OBJK_Representation3Formats &&_representation)
    {
        m_representation = std::move(_representation);
    }

    /*!
     * @brief This function returns a constant reference to member representation
     * @return Constant reference to member representation
     */
    inline const eprosima::micrortps::OBJK_Representation3Formats &representation() const
    {
        return m_representation;
    }

    /*!
     * @brief This function returns a reference to member representation
     * @return Reference to member representation
     */
    inline eprosima::micrortps::OBJK_Representation3Formats &representation()
    {
        return m_representation;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::OBJK_Representation3Formats m_representation;
};

/*!
 * @brief This class represents the structure OBJK_QOSPROFILE_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_QOSPROFILE_Representation : public OBJK_Representation2_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_QOSPROFILE_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_QOSPROFILE_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_QOSPROFILE_Representation that will be copied.
     */
    OBJK_QOSPROFILE_Representation(const OBJK_QOSPROFILE_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_QOSPROFILE_Representation that will be copied.
     */
    OBJK_QOSPROFILE_Representation(OBJK_QOSPROFILE_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_QOSPROFILE_Representation that will be copied.
     */
    OBJK_QOSPROFILE_Representation &operator=(const OBJK_QOSPROFILE_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_QOSPROFILE_Representation that will be copied.
     */
    OBJK_QOSPROFILE_Representation &operator=(OBJK_QOSPROFILE_Representation &&x);

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);
};

/*!
 * @brief This class represents the structure OBJK_APPLICATION_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_APPLICATION_Representation : public OBJK_Representation2_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_APPLICATION_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_APPLICATION_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_APPLICATION_Representation that will be copied.
     */
    OBJK_APPLICATION_Representation(const OBJK_APPLICATION_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_APPLICATION_Representation that will be copied.
     */
    OBJK_APPLICATION_Representation(OBJK_APPLICATION_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_APPLICATION_Representation that will be copied.
     */
    OBJK_APPLICATION_Representation &operator=(const OBJK_APPLICATION_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_APPLICATION_Representation that will be copied.
     */
    OBJK_APPLICATION_Representation &operator=(OBJK_APPLICATION_Representation &&x);

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);
};

/*!
 * @brief This class represents the structure OBJK_PARTICIPANT_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_PARTICIPANT_Representation : public OBJK_Representation2_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_PARTICIPANT_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_PARTICIPANT_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_PARTICIPANT_Representation that will be copied.
     */
    OBJK_PARTICIPANT_Representation(const OBJK_PARTICIPANT_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_PARTICIPANT_Representation that will be copied.
     */
    OBJK_PARTICIPANT_Representation(OBJK_PARTICIPANT_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_PARTICIPANT_Representation that will be copied.
     */
    OBJK_PARTICIPANT_Representation &operator=(const OBJK_PARTICIPANT_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_PARTICIPANT_Representation that will be copied.
     */
    OBJK_PARTICIPANT_Representation &operator=(OBJK_PARTICIPANT_Representation &&x);

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);
};

/*!
 * @brief This class represents the structure OBJK_TYPE_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_TYPE_Representation : public OBJK_Representation3_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_TYPE_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_TYPE_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_TYPE_Representation that will be copied.
     */
    OBJK_TYPE_Representation(const OBJK_TYPE_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_TYPE_Representation that will be copied.
     */
    OBJK_TYPE_Representation(OBJK_TYPE_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_TYPE_Representation that will be copied.
     */
    OBJK_TYPE_Representation &operator=(const OBJK_TYPE_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_TYPE_Representation that will be copied.
     */
    OBJK_TYPE_Representation &operator=(OBJK_TYPE_Representation &&x);

    /*!
     * @brief This function copies the value in member participant_id
     * @param _participant_id New value to be copied in member participant_id
     */
    inline void participant_id(const eprosima::micrortps::ObjectId &_participant_id)
    {
        m_participant_id = _participant_id;
    }

    /*!
     * @brief This function moves the value in member participant_id
     * @param _participant_id New value to be moved in member participant_id
     */
    inline void participant_id(eprosima::micrortps::ObjectId &&_participant_id)
    {
        m_participant_id = std::move(_participant_id);
    }

    /*!
     * @brief This function returns a constant reference to member participant_id
     * @return Constant reference to member participant_id
     */
    inline const eprosima::micrortps::ObjectId &participant_id() const
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns a reference to member participant_id
     * @return Reference to member participant_id
     */
    inline eprosima::micrortps::ObjectId &participant_id()
    {
        return m_participant_id;
    }
    /*!
     * @brief This function copies the value in member registered_type_name
     * @param _registered_type_name New value to be copied in member registered_type_name
     */
    inline void registered_type_name(const std::string &_registered_type_name)
    {
        m_registered_type_name = _registered_type_name;
    }

    /*!
     * @brief This function moves the value in member registered_type_name
     * @param _registered_type_name New value to be moved in member registered_type_name
     */
    inline void registered_type_name(std::string &&_registered_type_name)
    {
        m_registered_type_name = std::move(_registered_type_name);
    }

    /*!
     * @brief This function returns a constant reference to member registered_type_name
     * @return Constant reference to member registered_type_name
     */
    inline const std::string &registered_type_name() const
    {
        return m_registered_type_name;
    }

    /*!
     * @brief This function returns a reference to member registered_type_name
     * @return Reference to member registered_type_name
     */
    inline std::string &registered_type_name()
    {
        return m_registered_type_name;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectId m_participant_id;
    std::string m_registered_type_name;
};

/*!
 * @brief This class represents the structure OBJK_TOPIC_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_TOPIC_Representation : public OBJK_Representation3_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_TOPIC_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_TOPIC_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_TOPIC_Representation that will be copied.
     */
    OBJK_TOPIC_Representation(const OBJK_TOPIC_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_TOPIC_Representation that will be copied.
     */
    OBJK_TOPIC_Representation(OBJK_TOPIC_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_TOPIC_Representation that will be copied.
     */
    OBJK_TOPIC_Representation &operator=(const OBJK_TOPIC_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_TOPIC_Representation that will be copied.
     */
    OBJK_TOPIC_Representation &operator=(OBJK_TOPIC_Representation &&x);

    /*!
     * @brief This function copies the value in member participant_id
     * @param _participant_id New value to be copied in member participant_id
     */
    inline void participant_id(const eprosima::micrortps::ObjectId &_participant_id)
    {
        m_participant_id = _participant_id;
    }

    /*!
     * @brief This function moves the value in member participant_id
     * @param _participant_id New value to be moved in member participant_id
     */
    inline void participant_id(eprosima::micrortps::ObjectId &&_participant_id)
    {
        m_participant_id = std::move(_participant_id);
    }

    /*!
     * @brief This function returns a constant reference to member participant_id
     * @return Constant reference to member participant_id
     */
    inline const eprosima::micrortps::ObjectId &participant_id() const
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns a reference to member participant_id
     * @return Reference to member participant_id
     */
    inline eprosima::micrortps::ObjectId &participant_id()
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectId m_participant_id;
};

/*!
 * @brief This class represents the structure OBJK_PUB_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_PUB_Representation : public OBJK_Representation3_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_PUB_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_PUB_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_PUB_Representation that will be copied.
     */
    OBJK_PUB_Representation(const OBJK_PUB_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_PUB_Representation that will be copied.
     */
    OBJK_PUB_Representation(OBJK_PUB_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_PUB_Representation that will be copied.
     */
    OBJK_PUB_Representation &operator=(const OBJK_PUB_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_PUB_Representation that will be copied.
     */
    OBJK_PUB_Representation &operator=(OBJK_PUB_Representation &&x);

    /*!
     * @brief This function copies the value in member participant_id
     * @param _participant_id New value to be copied in member participant_id
     */
    inline void participant_id(const eprosima::micrortps::ObjectId &_participant_id)
    {
        m_participant_id = _participant_id;
    }

    /*!
     * @brief This function moves the value in member participant_id
     * @param _participant_id New value to be moved in member participant_id
     */
    inline void participant_id(eprosima::micrortps::ObjectId &&_participant_id)
    {
        m_participant_id = std::move(_participant_id);
    }

    /*!
     * @brief This function returns a constant reference to member participant_id
     * @return Constant reference to member participant_id
     */
    inline const eprosima::micrortps::ObjectId &participant_id() const
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns a reference to member participant_id
     * @return Reference to member participant_id
     */
    inline eprosima::micrortps::ObjectId &participant_id()
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectId m_participant_id;
};
/*!
 * @brief This class represents the structure OBJK_SUB_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_SUB_Representation : public OBJK_Representation3_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_SUB_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_SUB_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_SUB_Representation that will be copied.
     */
    OBJK_SUB_Representation(const OBJK_SUB_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_SUB_Representation that will be copied.
     */
    OBJK_SUB_Representation(OBJK_SUB_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_SUB_Representation that will be copied.
     */
    OBJK_SUB_Representation &operator=(const OBJK_SUB_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_SUB_Representation that will be copied.
     */
    OBJK_SUB_Representation &operator=(OBJK_SUB_Representation &&x);

    /*!
     * @brief This function copies the value in member participant_id
     * @param _participant_id New value to be copied in member participant_id
     */
    inline void participant_id(const eprosima::micrortps::ObjectId &_participant_id)
    {
        m_participant_id = _participant_id;
    }

    /*!
     * @brief This function moves the value in member participant_id
     * @param _participant_id New value to be moved in member participant_id
     */
    inline void participant_id(eprosima::micrortps::ObjectId &&_participant_id)
    {
        m_participant_id = std::move(_participant_id);
    }

    /*!
     * @brief This function returns a constant reference to member participant_id
     * @return Constant reference to member participant_id
     */
    inline const eprosima::micrortps::ObjectId &participant_id() const
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns a reference to member participant_id
     * @return Reference to member participant_id
     */
    inline eprosima::micrortps::ObjectId &participant_id()
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectId m_participant_id;
};
/*!
 * @brief This class represents the structure OBJK_DW_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_DW_Representation : public OBJK_Representation3_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_DW_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_DW_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DW_Representation that will be copied.
     */
    OBJK_DW_Representation(const OBJK_DW_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DW_Representation that will be copied.
     */
    OBJK_DW_Representation(OBJK_DW_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DW_Representation that will be copied.
     */
    OBJK_DW_Representation &operator=(const OBJK_DW_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DW_Representation that will be copied.
     */
    OBJK_DW_Representation &operator=(OBJK_DW_Representation &&x);

    /*!
     * @brief This function copies the value in member participant_id
     * @param _participant_id New value to be copied in member participant_id
     */
    inline void participant_id(const eprosima::micrortps::ObjectId &_participant_id)
    {
        m_participant_id = _participant_id;
    }

    /*!
     * @brief This function moves the value in member participant_id
     * @param _participant_id New value to be moved in member participant_id
     */
    inline void participant_id(eprosima::micrortps::ObjectId &&_participant_id)
    {
        m_participant_id = std::move(_participant_id);
    }

    /*!
     * @brief This function returns a constant reference to member participant_id
     * @return Constant reference to member participant_id
     */
    inline const eprosima::micrortps::ObjectId &participant_id() const
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns a reference to member participant_id
     * @return Reference to member participant_id
     */
    inline eprosima::micrortps::ObjectId &participant_id()
    {
        return m_participant_id;
    }
    /*!
     * @brief This function copies the value in member publisher_id
     * @param _publisher_id New value to be copied in member publisher_id
     */
    inline void publisher_id(const eprosima::micrortps::ObjectId &_publisher_id)
    {
        m_publisher_id = _publisher_id;
    }

    /*!
     * @brief This function moves the value in member publisher_id
     * @param _publisher_id New value to be moved in member publisher_id
     */
    inline void publisher_id(eprosima::micrortps::ObjectId &&_publisher_id)
    {
        m_publisher_id = std::move(_publisher_id);
    }

    /*!
     * @brief This function returns a constant reference to member publisher_id
     * @return Constant reference to member publisher_id
     */
    inline const eprosima::micrortps::ObjectId &publisher_id() const
    {
        return m_publisher_id;
    }

    /*!
     * @brief This function returns a reference to member publisher_id
     * @return Reference to member publisher_id
     */
    inline eprosima::micrortps::ObjectId &publisher_id()
    {
        return m_publisher_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectId m_participant_id;
    eprosima::micrortps::ObjectId m_publisher_id;
};
/*!
 * @brief This class represents the structure OBJK_DR_Representation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_DR_Representation : public OBJK_Representation3_Base
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_DR_Representation();

    /*!
     * @brief Default destructor.
     */
    virtual ~OBJK_DR_Representation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DR_Representation that will be copied.
     */
    OBJK_DR_Representation(const OBJK_DR_Representation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DR_Representation that will be copied.
     */
    OBJK_DR_Representation(OBJK_DR_Representation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DR_Representation that will be copied.
     */
    OBJK_DR_Representation &operator=(const OBJK_DR_Representation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DR_Representation that will be copied.
     */
    OBJK_DR_Representation &operator=(OBJK_DR_Representation &&x);

    /*!
     * @brief This function copies the value in member participant_id
     * @param _participant_id New value to be copied in member participant_id
     */
    inline void participant_id(const eprosima::micrortps::ObjectId &_participant_id)
    {
        m_participant_id = _participant_id;
    }

    /*!
     * @brief This function moves the value in member participant_id
     * @param _participant_id New value to be moved in member participant_id
     */
    inline void participant_id(eprosima::micrortps::ObjectId &&_participant_id)
    {
        m_participant_id = std::move(_participant_id);
    }

    /*!
     * @brief This function returns a constant reference to member participant_id
     * @return Constant reference to member participant_id
     */
    inline const eprosima::micrortps::ObjectId &participant_id() const
    {
        return m_participant_id;
    }

    /*!
     * @brief This function returns a reference to member participant_id
     * @return Reference to member participant_id
     */
    inline eprosima::micrortps::ObjectId &participant_id()
    {
        return m_participant_id;
    }
    /*!
     * @brief This function copies the value in member subscriber_id
     * @param _subscriber_id New value to be copied in member subscriber_id
     */
    inline void subscriber_id(const eprosima::micrortps::ObjectId &_subscriber_id)
    {
        m_subscriber_id = _subscriber_id;
    }

    /*!
     * @brief This function moves the value in member subscriber_id
     * @param _subscriber_id New value to be moved in member subscriber_id
     */
    inline void subscriber_id(eprosima::micrortps::ObjectId &&_subscriber_id)
    {
        m_subscriber_id = std::move(_subscriber_id);
    }

    /*!
     * @brief This function returns a constant reference to member subscriber_id
     * @return Constant reference to member subscriber_id
     */
    inline const eprosima::micrortps::ObjectId &subscriber_id() const
    {
        return m_subscriber_id;
    }

    /*!
     * @brief This function returns a reference to member subscriber_id
     * @return Reference to member subscriber_id
     */
    inline eprosima::micrortps::ObjectId &subscriber_id()
    {
        return m_subscriber_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectId m_participant_id;
    eprosima::micrortps::ObjectId m_subscriber_id;
};
/*!
 * @brief This class represents the structure OBJK_Type_Binary defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_Type_Binary
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_Type_Binary();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_Type_Binary();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Type_Binary that will be copied.
     */
    OBJK_Type_Binary(const OBJK_Type_Binary &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Type_Binary that will be copied.
     */
    OBJK_Type_Binary(OBJK_Type_Binary &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Type_Binary that will be copied.
     */
    OBJK_Type_Binary &operator=(const OBJK_Type_Binary &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Type_Binary that will be copied.
     */
    OBJK_Type_Binary &operator=(OBJK_Type_Binary &&x);

    /*!
     * @brief This function copies the value in member type_name
     * @param _type_name New value to be copied in member type_name
     */
    inline void type_name(const std::string &_type_name)
    {
        m_type_name = _type_name;
    }

    /*!
     * @brief This function moves the value in member type_name
     * @param _type_name New value to be moved in member type_name
     */
    inline void type_name(std::string &&_type_name)
    {
        m_type_name = std::move(_type_name);
    }

    /*!
     * @brief This function returns a constant reference to member type_name
     * @return Constant reference to member type_name
     */
    inline const std::string &type_name() const
    {
        return m_type_name;
    }

    /*!
     * @brief This function returns a reference to member type_name
     * @return Reference to member type_name
     */
    inline std::string &type_name()
    {
        return m_type_name;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    std::string m_type_name;
};
/*!
 * @brief This class represents the structure OBJK_Topic_QosBinary defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_Topic_QosBinary
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_Topic_QosBinary();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_Topic_QosBinary();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Topic_QosBinary that will be copied.
     */
    OBJK_Topic_QosBinary(const OBJK_Topic_QosBinary &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Topic_QosBinary that will be copied.
     */
    OBJK_Topic_QosBinary(OBJK_Topic_QosBinary &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Topic_QosBinary that will be copied.
     */
    OBJK_Topic_QosBinary &operator=(const OBJK_Topic_QosBinary &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Topic_QosBinary that will be copied.
     */
    OBJK_Topic_QosBinary &operator=(OBJK_Topic_QosBinary &&x);

    /*!
     * @brief This function copies the value in member topic_name
     * @param _topic_name New value to be copied in member topic_name
     */
    inline void topic_name(const std::string &_topic_name)
    {
        m_topic_name = _topic_name;
    }

    /*!
     * @brief This function moves the value in member topic_name
     * @param _topic_name New value to be moved in member topic_name
     */
    inline void topic_name(std::string &&_topic_name)
    {
        m_topic_name = std::move(_topic_name);
    }

    /*!
     * @brief This function returns a constant reference to member topic_name
     * @return Constant reference to member topic_name
     */
    inline const std::string &topic_name() const
    {
        return m_topic_name;
    }

    /*!
     * @brief This function returns a reference to member topic_name
     * @return Reference to member topic_name
     */
    inline std::string &topic_name()
    {
        return m_topic_name;
    }
    /*!
     * @brief This function copies the value in member type_name
     * @param _type_name New value to be copied in member type_name
     */
    inline void type_name(const std::string &_type_name)
    {
        m_type_name = _type_name;
    }

    /*!
     * @brief This function moves the value in member type_name
     * @param _type_name New value to be moved in member type_name
     */
    inline void type_name(std::string &&_type_name)
    {
        m_type_name = std::move(_type_name);
    }

    /*!
     * @brief This function returns a constant reference to member type_name
     * @return Constant reference to member type_name
     */
    inline const std::string &type_name() const
    {
        return m_type_name;
    }

    /*!
     * @brief This function returns a reference to member type_name
     * @return Reference to member type_name
     */
    inline std::string &type_name()
    {
        return m_type_name;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    std::string m_topic_name;
    std::string m_type_name;
};
/*!
 * @brief This class represents the structure OBJK_PUB_QosBinary defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_PUB_QosBinary
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_PUB_QosBinary();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_PUB_QosBinary();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_PUB_QosBinary that will be copied.
     */
    OBJK_PUB_QosBinary(const OBJK_PUB_QosBinary &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_PUB_QosBinary that will be copied.
     */
    OBJK_PUB_QosBinary(OBJK_PUB_QosBinary &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_PUB_QosBinary that will be copied.
     */
    OBJK_PUB_QosBinary &operator=(const OBJK_PUB_QosBinary &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_PUB_QosBinary that will be copied.
     */
    OBJK_PUB_QosBinary &operator=(OBJK_PUB_QosBinary &&x);

    /*!
     * @brief This function copies the value in member partitions
     * @param _partitions New value to be copied in member partitions
     */
    inline void partitions(const std::vector<std::string> &_partitions)
    {
        m_partitions = _partitions;
    }

    /*!
     * @brief This function moves the value in member partitions
     * @param _partitions New value to be moved in member partitions
     */
    inline void partitions(std::vector<std::string> &&_partitions)
    {
        m_partitions = std::move(_partitions);
    }

    /*!
     * @brief This function returns a constant reference to member partitions
     * @return Constant reference to member partitions
     */
    inline const std::vector<std::string> &partitions() const
    {
        return m_partitions;
    }

    /*!
     * @brief This function returns a reference to member partitions
     * @return Reference to member partitions
     */
    inline std::vector<std::string> &partitions()
    {
        return m_partitions;
    }
    /*!
     * @brief This function copies the value in member group_data
     * @param _group_data New value to be copied in member group_data
     */
    inline void group_data(const std::vector<uint8_t> &_group_data)
    {
        m_group_data = _group_data;
    }

    /*!
     * @brief This function moves the value in member group_data
     * @param _group_data New value to be moved in member group_data
     */
    inline void group_data(std::vector<uint8_t> &&_group_data)
    {
        m_group_data = std::move(_group_data);
    }

    /*!
     * @brief This function returns a constant reference to member group_data
     * @return Constant reference to member group_data
     */
    inline const std::vector<uint8_t> &group_data() const
    {
        return m_group_data;
    }

    /*!
     * @brief This function returns a reference to member group_data
     * @return Reference to member group_data
     */
    inline std::vector<uint8_t> &group_data()
    {
        return m_group_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    std::vector<std::string> m_partitions;
    std::vector<uint8_t> m_group_data;
};
/*!
 * @brief This class represents the structure OBJK_SUB_QosBinary defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_SUB_QosBinary
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_SUB_QosBinary();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_SUB_QosBinary();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_SUB_QosBinary that will be copied.
     */
    OBJK_SUB_QosBinary(const OBJK_SUB_QosBinary &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_SUB_QosBinary that will be copied.
     */
    OBJK_SUB_QosBinary(OBJK_SUB_QosBinary &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_SUB_QosBinary that will be copied.
     */
    OBJK_SUB_QosBinary &operator=(const OBJK_SUB_QosBinary &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_SUB_QosBinary that will be copied.
     */
    OBJK_SUB_QosBinary &operator=(OBJK_SUB_QosBinary &&x);

    /*!
     * @brief This function copies the value in member partitions
     * @param _partitions New value to be copied in member partitions
     */
    inline void partitions(const std::vector<std::string> &_partitions)
    {
        m_partitions = _partitions;
    }

    /*!
     * @brief This function moves the value in member partitions
     * @param _partitions New value to be moved in member partitions
     */
    inline void partitions(std::vector<std::string> &&_partitions)
    {
        m_partitions = std::move(_partitions);
    }

    /*!
     * @brief This function returns a constant reference to member partitions
     * @return Constant reference to member partitions
     */
    inline const std::vector<std::string> &partitions() const
    {
        return m_partitions;
    }

    /*!
     * @brief This function returns a reference to member partitions
     * @return Reference to member partitions
     */
    inline std::vector<std::string> &partitions()
    {
        return m_partitions;
    }
    /*!
     * @brief This function copies the value in member group_data
     * @param _group_data New value to be copied in member group_data
     */
    inline void group_data(const std::vector<uint8_t> &_group_data)
    {
        m_group_data = _group_data;
    }

    /*!
     * @brief This function moves the value in member group_data
     * @param _group_data New value to be moved in member group_data
     */
    inline void group_data(std::vector<uint8_t> &&_group_data)
    {
        m_group_data = std::move(_group_data);
    }

    /*!
     * @brief This function returns a constant reference to member group_data
     * @return Constant reference to member group_data
     */
    inline const std::vector<uint8_t> &group_data() const
    {
        return m_group_data;
    }

    /*!
     * @brief This function returns a reference to member group_data
     * @return Reference to member group_data
     */
    inline std::vector<uint8_t> &group_data()
    {
        return m_group_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    std::vector<std::string> m_partitions;
    std::vector<uint8_t> m_group_data;
};

/*!
 * @brief This class represents the enumeration EndpointQosFlags defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
enum EndpointQosFlags : uint16_t
{
    is_reliable                   = 0x01 << 0,
    is_history_keep_last          = 0x01 << 1,
    is_ownership_exclusive        = 0x01 << 2,
    is_durability_transient_local = 0x01 << 3,
    is_durability_transient       = 0x01 << 4,
    is_durability_persistent      = 0x01 << 5
};

/*!
 * @brief This class represents the structure OBJK_Endpoint_QosBinary defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_Endpoint_QosBinary
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_Endpoint_QosBinary();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_Endpoint_QosBinary();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Endpoint_QosBinary that will be copied.
     */
    OBJK_Endpoint_QosBinary(const OBJK_Endpoint_QosBinary &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_Endpoint_QosBinary that will be copied.
     */
    OBJK_Endpoint_QosBinary(OBJK_Endpoint_QosBinary &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Endpoint_QosBinary that will be copied.
     */
    OBJK_Endpoint_QosBinary &operator=(const OBJK_Endpoint_QosBinary &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_Endpoint_QosBinary that will be copied.
     */
    OBJK_Endpoint_QosBinary &operator=(OBJK_Endpoint_QosBinary &&x);

    /*!
     * @brief This function sets a value in member qos_flags
     * @param _qos_flags New value for member qos_flags
     */
    inline void qos_flags(eprosima::micrortps::EndpointQosFlags _qos_flags)
    {
        m_qos_flags = _qos_flags;
    }

    /*!
     * @brief This function returns the value of member qos_flags
     * @return Value of member qos_flags
     */
    inline eprosima::micrortps::EndpointQosFlags qos_flags() const
    {
        return m_qos_flags;
    }

    /*!
     * @brief This function returns a reference to member qos_flags
     * @return Reference to member qos_flags
     */
    inline eprosima::micrortps::EndpointQosFlags &qos_flags()
    {
        return m_qos_flags;
    }
    /*!
     * @brief This function sets a value in member history_depth
     * @param _history_depth New value for member history_depth
     */
    inline void history_depth(uint16_t _history_depth)
    {
        m_history_depth = _history_depth;
    }

    /*!
     * @brief This function returns the value of member history_depth
     * @return Value of member history_depth
     */
    inline uint16_t history_depth() const
    {
        return m_history_depth;
    }

    /*!
     * @brief This function returns a reference to member history_depth
     * @return Reference to member history_depth
     */
    inline uint16_t &history_depth()
    {
        return m_history_depth;
    }
    /*!
     * @brief This function sets a value in member deadline_msec
     * @param _deadline_msec New value for member deadline_msec
     */
    inline void deadline_msec(uint32_t _deadline_msec)
    {
        m_deadline_msec = _deadline_msec;
    }

    /*!
     * @brief This function returns the value of member deadline_msec
     * @return Value of member deadline_msec
     */
    inline uint32_t deadline_msec() const
    {
        return m_deadline_msec;
    }

    /*!
     * @brief This function returns a reference to member deadline_msec
     * @return Reference to member deadline_msec
     */
    inline uint32_t &deadline_msec()
    {
        return m_deadline_msec;
    }
    /*!
     * @brief This function sets a value in member lifespan_msec
     * @param _lifespan_msec New value for member lifespan_msec
     */
    inline void lifespan_msec(uint32_t _lifespan_msec)
    {
        m_lifespan_msec = _lifespan_msec;
    }

    /*!
     * @brief This function returns the value of member lifespan_msec
     * @return Value of member lifespan_msec
     */
    inline uint32_t lifespan_msec() const
    {
        return m_lifespan_msec;
    }

    /*!
     * @brief This function returns a reference to member lifespan_msec
     * @return Reference to member lifespan_msec
     */
    inline uint32_t &lifespan_msec()
    {
        return m_lifespan_msec;
    }
    /*!
     * @brief This function copies the value in member user_data
     * @param _user_data New value to be copied in member user_data
     */
    inline void user_data(const std::vector<uint8_t> &_user_data)
    {
        m_user_data = _user_data;
    }

    /*!
     * @brief This function moves the value in member user_data
     * @param _user_data New value to be moved in member user_data
     */
    inline void user_data(std::vector<uint8_t> &&_user_data)
    {
        m_user_data = std::move(_user_data);
    }

    /*!
     * @brief This function returns a constant reference to member user_data
     * @return Constant reference to member user_data
     */
    inline const std::vector<uint8_t> &user_data() const
    {
        return m_user_data;
    }

    /*!
     * @brief This function returns a reference to member user_data
     * @return Reference to member user_data
     */
    inline std::vector<uint8_t> &user_data()
    {
        return m_user_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::EndpointQosFlags m_qos_flags;
    uint16_t m_history_depth;
    uint32_t m_deadline_msec;
    uint32_t m_lifespan_msec;
    std::vector<uint8_t> m_user_data;
};
/*!
 * @brief This class represents the structure OBJK_DataReader_Binary defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_DataReader_Binary
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_DataReader_Binary();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_DataReader_Binary();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DataReader_Binary that will be copied.
     */
    OBJK_DataReader_Binary(const OBJK_DataReader_Binary &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DataReader_Binary that will be copied.
     */
    OBJK_DataReader_Binary(OBJK_DataReader_Binary &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DataReader_Binary that will be copied.
     */
    OBJK_DataReader_Binary &operator=(const OBJK_DataReader_Binary &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DataReader_Binary that will be copied.
     */
    OBJK_DataReader_Binary &operator=(OBJK_DataReader_Binary &&x);

    /*!
     * @brief This function copies the value in member topic_name
     * @param _topic_name New value to be copied in member topic_name
     */
    inline void topic_name(const std::string &_topic_name)
    {
        m_topic_name = _topic_name;
    }

    /*!
     * @brief This function moves the value in member topic_name
     * @param _topic_name New value to be moved in member topic_name
     */
    inline void topic_name(std::string &&_topic_name)
    {
        m_topic_name = std::move(_topic_name);
    }

    /*!
     * @brief This function returns a constant reference to member topic_name
     * @return Constant reference to member topic_name
     */
    inline const std::string &topic_name() const
    {
        return m_topic_name;
    }

    /*!
     * @brief This function returns a reference to member topic_name
     * @return Reference to member topic_name
     */
    inline std::string &topic_name()
    {
        return m_topic_name;
    }
    /*!
     * @brief This function copies the value in member endpoint_qos
     * @param _endpoint_qos New value to be copied in member endpoint_qos
     */
    inline void endpoint_qos(const eprosima::micrortps::OBJK_Endpoint_QosBinary &_endpoint_qos)
    {
        m_endpoint_qos = _endpoint_qos;
    }

    /*!
     * @brief This function moves the value in member endpoint_qos
     * @param _endpoint_qos New value to be moved in member endpoint_qos
     */
    inline void endpoint_qos(eprosima::micrortps::OBJK_Endpoint_QosBinary &&_endpoint_qos)
    {
        m_endpoint_qos = std::move(_endpoint_qos);
    }

    /*!
     * @brief This function returns a constant reference to member endpoint_qos
     * @return Constant reference to member endpoint_qos
     */
    inline const eprosima::micrortps::OBJK_Endpoint_QosBinary &endpoint_qos() const
    {
        return m_endpoint_qos;
    }

    /*!
     * @brief This function returns a reference to member endpoint_qos
     * @return Reference to member endpoint_qos
     */
    inline eprosima::micrortps::OBJK_Endpoint_QosBinary &endpoint_qos()
    {
        return m_endpoint_qos;
    }
    /*!
     * @brief This function sets a value in member timebasedfilter_msec
     * @param _timebasedfilter_msec New value for member timebasedfilter_msec
     */
    inline void timebasedfilter_msec(uint32_t _timebasedfilter_msec)
    {
        m_timebasedfilter_msec = _timebasedfilter_msec;
    }

    /*!
     * @brief This function returns the value of member timebasedfilter_msec
     * @return Value of member timebasedfilter_msec
     */
    inline uint32_t timebasedfilter_msec() const
    {
        return m_timebasedfilter_msec;
    }

    /*!
     * @brief This function returns a reference to member timebasedfilter_msec
     * @return Reference to member timebasedfilter_msec
     */
    inline uint32_t &timebasedfilter_msec()
    {
        return m_timebasedfilter_msec;
    }
    /*!
     * @brief This function copies the value in member contentbased_filter
     * @param _contentbased_filter New value to be copied in member contentbased_filter
     */
    inline void contentbased_filter(const std::string &_contentbased_filter)
    {
        m_contentbased_filter = _contentbased_filter;
    }

    /*!
     * @brief This function moves the value in member contentbased_filter
     * @param _contentbased_filter New value to be moved in member contentbased_filter
     */
    inline void contentbased_filter(std::string &&_contentbased_filter)
    {
        m_contentbased_filter = std::move(_contentbased_filter);
    }

    /*!
     * @brief This function returns a constant reference to member contentbased_filter
     * @return Constant reference to member contentbased_filter
     */
    inline const std::string &contentbased_filter() const
    {
        return m_contentbased_filter;
    }

    /*!
     * @brief This function returns a reference to member contentbased_filter
     * @return Reference to member contentbased_filter
     */
    inline std::string &contentbased_filter()
    {
        return m_contentbased_filter;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    std::string m_topic_name;
    eprosima::micrortps::OBJK_Endpoint_QosBinary m_endpoint_qos;
    uint32_t m_timebasedfilter_msec;
    std::string m_contentbased_filter;
};
/*!
 * @brief This class represents the structure OBJK_DataWriter_Binary defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_DataWriter_Binary
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_DataWriter_Binary();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_DataWriter_Binary();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DataWriter_Binary that will be copied.
     */
    OBJK_DataWriter_Binary(const OBJK_DataWriter_Binary &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DataWriter_Binary that will be copied.
     */
    OBJK_DataWriter_Binary(OBJK_DataWriter_Binary &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DataWriter_Binary that will be copied.
     */
    OBJK_DataWriter_Binary &operator=(const OBJK_DataWriter_Binary &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DataWriter_Binary that will be copied.
     */
    OBJK_DataWriter_Binary &operator=(OBJK_DataWriter_Binary &&x);

    /*!
     * @brief This function copies the value in member topic_name
     * @param _topic_name New value to be copied in member topic_name
     */
    inline void topic_name(const std::string &_topic_name)
    {
        m_topic_name = _topic_name;
    }

    /*!
     * @brief This function moves the value in member topic_name
     * @param _topic_name New value to be moved in member topic_name
     */
    inline void topic_name(std::string &&_topic_name)
    {
        m_topic_name = std::move(_topic_name);
    }

    /*!
     * @brief This function returns a constant reference to member topic_name
     * @return Constant reference to member topic_name
     */
    inline const std::string &topic_name() const
    {
        return m_topic_name;
    }

    /*!
     * @brief This function returns a reference to member topic_name
     * @return Reference to member topic_name
     */
    inline std::string &topic_name()
    {
        return m_topic_name;
    }
    /*!
     * @brief This function copies the value in member endpoint_qos
     * @param _endpoint_qos New value to be copied in member endpoint_qos
     */
    inline void endpoint_qos(const eprosima::micrortps::OBJK_Endpoint_QosBinary &_endpoint_qos)
    {
        m_endpoint_qos = _endpoint_qos;
    }

    /*!
     * @brief This function moves the value in member endpoint_qos
     * @param _endpoint_qos New value to be moved in member endpoint_qos
     */
    inline void endpoint_qos(eprosima::micrortps::OBJK_Endpoint_QosBinary &&_endpoint_qos)
    {
        m_endpoint_qos = std::move(_endpoint_qos);
    }

    /*!
     * @brief This function returns a constant reference to member endpoint_qos
     * @return Constant reference to member endpoint_qos
     */
    inline const eprosima::micrortps::OBJK_Endpoint_QosBinary &endpoint_qos() const
    {
        return m_endpoint_qos;
    }

    /*!
     * @brief This function returns a reference to member endpoint_qos
     * @return Reference to member endpoint_qos
     */
    inline eprosima::micrortps::OBJK_Endpoint_QosBinary &endpoint_qos()
    {
        return m_endpoint_qos;
    }
    /*!
     * @brief This function sets a value in member ownership_strength
     * @param _ownership_strength New value for member ownership_strength
     */
    inline void ownership_strength(uint32_t _ownership_strength)
    {
        m_ownership_strength = _ownership_strength;
    }

    /*!
     * @brief This function returns the value of member ownership_strength
     * @return Value of member ownership_strength
     */
    inline uint32_t ownership_strength() const
    {
        return m_ownership_strength;
    }

    /*!
     * @brief This function returns a reference to member ownership_strength
     * @return Reference to member ownership_strength
     */
    inline uint32_t &ownership_strength()
    {
        return m_ownership_strength;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    std::string m_topic_name;
    eprosima::micrortps::OBJK_Endpoint_QosBinary m_endpoint_qos;
    uint32_t m_ownership_strength;
};
/*!
 * @brief This class represents the union ObjectVariant defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class ObjectVariant
{
  public:
    /*!
     * @brief Default constructor.
     */
    ObjectVariant();

    /*!
     * @brief Default destructor.
     */
    ~ObjectVariant();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::ObjectVariant that will be copied.
     */
    ObjectVariant(const ObjectVariant &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::ObjectVariant that will be copied.
     */
    ObjectVariant(ObjectVariant &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::ObjectVariant that will be copied.
     */
    ObjectVariant &operator=(const ObjectVariant &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::ObjectVariant that will be copied.
     */
    ObjectVariant &operator=(ObjectVariant &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to
     * the selected union member.
     */
    void _d(eprosima::micrortps::ObjectKind __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eprosima::micrortps::ObjectKind _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eprosima::micrortps::ObjectKind &_d();

    /*!
     * @brief This function copies the value in member client
     * @param _client New value to be copied in member client
     */
    void client(const eprosima::micrortps::OBJK_CLIENT_Representation &_client);

    /*!
     * @brief This function moves the value in member client
     * @param _client New value to be moved in member client
     */
    void client(eprosima::micrortps::OBJK_CLIENT_Representation &&_client);

    /*!
     * @brief This function returns a constant reference to member client
     * @return Constant reference to member client
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_CLIENT_Representation &client() const;

    /*!
     * @brief This function returns a reference to member client
     * @return Reference to member client
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_CLIENT_Representation &client();
    /*!
     * @brief This function copies the value in member application
     * @param _application New value to be copied in member application
     */
    void application(const eprosima::micrortps::OBJK_APPLICATION_Representation &_application);

    /*!
     * @brief This function moves the value in member application
     * @param _application New value to be moved in member application
     */
    void application(eprosima::micrortps::OBJK_APPLICATION_Representation &&_application);

    /*!
     * @brief This function returns a constant reference to member application
     * @return Constant reference to member application
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_APPLICATION_Representation &application() const;

    /*!
     * @brief This function returns a reference to member application
     * @return Reference to member application
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_APPLICATION_Representation &application();
    /*!
     * @brief This function copies the value in member participant
     * @param _participant New value to be copied in member participant
     */
    void participant(const eprosima::micrortps::OBJK_PARTICIPANT_Representation &_participant);

    /*!
     * @brief This function moves the value in member participant
     * @param _participant New value to be moved in member participant
     */
    void participant(eprosima::micrortps::OBJK_PARTICIPANT_Representation &&_participant);

    /*!
     * @brief This function returns a constant reference to member participant
     * @return Constant reference to member participant
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_PARTICIPANT_Representation &participant() const;

    /*!
     * @brief This function returns a reference to member participant
     * @return Reference to member participant
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_PARTICIPANT_Representation &participant();
    /*!
     * @brief This function copies the value in member qos_profile
     * @param _qos_profile New value to be copied in member qos_profile
     */
    void qos_profile(const eprosima::micrortps::OBJK_QOSPROFILE_Representation &_qos_profile);

    /*!
     * @brief This function moves the value in member qos_profile
     * @param _qos_profile New value to be moved in member qos_profile
     */
    void qos_profile(eprosima::micrortps::OBJK_QOSPROFILE_Representation &&_qos_profile);

    /*!
     * @brief This function returns a constant reference to member qos_profile
     * @return Constant reference to member qos_profile
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_QOSPROFILE_Representation &qos_profile() const;

    /*!
     * @brief This function returns a reference to member qos_profile
     * @return Reference to member qos_profile
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_QOSPROFILE_Representation &qos_profile();
    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    void type(const eprosima::micrortps::OBJK_TYPE_Representation &_type);

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    void type(eprosima::micrortps::OBJK_TYPE_Representation &&_type);

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_TYPE_Representation &type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_TYPE_Representation &type();
    /*!
     * @brief This function copies the value in member topic
     * @param _topic New value to be copied in member topic
     */
    void topic(const eprosima::micrortps::OBJK_TOPIC_Representation &_topic);

    /*!
     * @brief This function moves the value in member topic
     * @param _topic New value to be moved in member topic
     */
    void topic(eprosima::micrortps::OBJK_TOPIC_Representation &&_topic);

    /*!
     * @brief This function returns a constant reference to member topic
     * @return Constant reference to member topic
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_TOPIC_Representation &topic() const;

    /*!
     * @brief This function returns a reference to member topic
     * @return Reference to member topic
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_TOPIC_Representation &topic();
    /*!
     * @brief This function copies the value in member publisher
     * @param _publisher New value to be copied in member publisher
     */
    void publisher(const eprosima::micrortps::OBJK_PUB_Representation &_publisher);

    /*!
     * @brief This function moves the value in member publisher
     * @param _publisher New value to be moved in member publisher
     */
    void publisher(eprosima::micrortps::OBJK_PUB_Representation &&_publisher);

    /*!
     * @brief This function returns a constant reference to member publisher
     * @return Constant reference to member publisher
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_PUB_Representation &publisher() const;

    /*!
     * @brief This function returns a reference to member publisher
     * @return Reference to member publisher
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_PUB_Representation &publisher();
    /*!
     * @brief This function copies the value in member subscriber
     * @param _subscriber New value to be copied in member subscriber
     */
    void subscriber(const eprosima::micrortps::OBJK_SUB_Representation &_subscriber);

    /*!
     * @brief This function moves the value in member subscriber
     * @param _subscriber New value to be moved in member subscriber
     */
    void subscriber(eprosima::micrortps::OBJK_SUB_Representation &&_subscriber);

    /*!
     * @brief This function returns a constant reference to member subscriber
     * @return Constant reference to member subscriber
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_SUB_Representation &subscriber() const;

    /*!
     * @brief This function returns a reference to member subscriber
     * @return Reference to member subscriber
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_SUB_Representation &subscriber();
    /*!
     * @brief This function copies the value in member data_writer
     * @param _data_writer New value to be copied in member data_writer
     */
    void data_writer(const eprosima::micrortps::OBJK_DW_Representation &_data_writer);

    /*!
     * @brief This function moves the value in member data_writer
     * @param _data_writer New value to be moved in member data_writer
     */
    void data_writer(eprosima::micrortps::OBJK_DW_Representation &&_data_writer);

    /*!
     * @brief This function returns a constant reference to member data_writer
     * @return Constant reference to member data_writer
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_DW_Representation &data_writer() const;

    /*!
     * @brief This function returns a reference to member data_writer
     * @return Reference to member data_writer
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_DW_Representation &data_writer();
    /*!
     * @brief This function copies the value in member data_reader
     * @param _data_reader New value to be copied in member data_reader
     */
    void data_reader(const eprosima::micrortps::OBJK_DR_Representation &_data_reader);

    /*!
     * @brief This function moves the value in member data_reader
     * @param _data_reader New value to be moved in member data_reader
     */
    void data_reader(eprosima::micrortps::OBJK_DR_Representation &&_data_reader);

    /*!
     * @brief This function returns a constant reference to member data_reader
     * @return Constant reference to member data_reader
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_DR_Representation &data_reader() const;

    /*!
     * @brief This function returns a reference to member data_reader
     * @return Reference to member data_reader
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_DR_Representation &data_reader();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectKind m__d;

    eprosima::micrortps::OBJK_CLIENT_Representation m_client;
    eprosima::micrortps::OBJK_APPLICATION_Representation m_application;
    eprosima::micrortps::OBJK_PARTICIPANT_Representation m_participant;
    eprosima::micrortps::OBJK_QOSPROFILE_Representation m_qos_profile;
    eprosima::micrortps::OBJK_TYPE_Representation m_type;
    eprosima::micrortps::OBJK_TOPIC_Representation m_topic;
    eprosima::micrortps::OBJK_PUB_Representation m_publisher;
    eprosima::micrortps::OBJK_SUB_Representation m_subscriber;
    eprosima::micrortps::OBJK_DW_Representation m_data_writer;
    eprosima::micrortps::OBJK_DR_Representation m_data_reader;
};

/*!
 * @brief This class represents the structure CreationMode defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class CreationMode
{
  public:
    /*!
     * @brief Default constructor.
     */
    CreationMode();

    /*!
     * @brief Default destructor.
     */
    ~CreationMode();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::CreationMode that will be copied.
     */
    CreationMode(const CreationMode &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::CreationMode that will be copied.
     */
    CreationMode(CreationMode &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::CreationMode that will be copied.
     */
    CreationMode &operator=(const CreationMode &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::CreationMode that will be copied.
     */
    CreationMode &operator=(CreationMode &&x);

    /*!
     * @brief This function sets a value in member reuse
     * @param _reuse New value for member reuse
     */
    inline void reuse(bool _reuse)
    {
        m_reuse = _reuse;
    }

    /*!
     * @brief This function returns the value of member reuse
     * @return Value of member reuse
     */
    inline bool reuse() const
    {
        return m_reuse;
    }

    /*!
     * @brief This function returns a reference to member reuse
     * @return Reference to member reuse
     */
    inline bool &reuse()
    {
        return m_reuse;
    }
    /*!
     * @brief This function sets a value in member replace
     * @param _replace New value for member replace
     */
    inline void replace(bool _replace)
    {
        m_replace = _replace;
    }

    /*!
     * @brief This function returns the value of member replace
     * @return Value of member replace
     */
    inline bool replace() const
    {
        return m_replace;
    }

    /*!
     * @brief This function returns a reference to member replace
     * @return Reference to member replace
     */
    inline bool &replace()
    {
        return m_replace;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    bool m_reuse;
    bool m_replace;
};

typedef std::array<uint8_t, 2> RequestId;
/*!
 * @brief This class represents the structure ResultStatus defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class ResultStatus
{
  public:
    /*!
     * @brief Default constructor.
     */
    ResultStatus();

    /*!
     * @brief Default destructor.
     */
    ~ResultStatus();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::ResultStatus that will be copied.
     */
    ResultStatus(const ResultStatus &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::ResultStatus that will be copied.
     */
    ResultStatus(ResultStatus &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::ResultStatus that will be copied.
     */
    ResultStatus &operator=(const ResultStatus &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::ResultStatus that will be copied.
     */
    ResultStatus &operator=(ResultStatus &&x);

    /*!
     * @brief This function copies the value in member request_id
     * @param _request_id New value to be copied in member request_id
     */
    inline void request_id(const eprosima::micrortps::RequestId &_request_id)
    {
        m_request_id = _request_id;
    }

    /*!
     * @brief This function moves the value in member request_id
     * @param _request_id New value to be moved in member request_id
     */
    inline void request_id(eprosima::micrortps::RequestId &&_request_id)
    {
        m_request_id = std::move(_request_id);
    }

    /*!
     * @brief This function returns a constant reference to member request_id
     * @return Constant reference to member request_id
     */
    inline const eprosima::micrortps::RequestId &request_id() const
    {
        return m_request_id;
    }

    /*!
     * @brief This function returns a reference to member request_id
     * @return Reference to member request_id
     */
    inline eprosima::micrortps::RequestId &request_id()
    {
        return m_request_id;
    }
    /*!
     * @brief This function sets a value in member status
     * @param _status New value for member status
     */
    inline void status(uint8_t _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function returns the value of member status
     * @return Value of member status
     */
    inline uint8_t status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    inline uint8_t &status()
    {
        return m_status;
    }
    /*!
     * @brief This function sets a value in member implementation_status
     * @param _implementation_status New value for member implementation_status
     */
    inline void implementation_status(uint8_t _implementation_status)
    {
        m_implementation_status = _implementation_status;
    }

    /*!
     * @brief This function returns the value of member implementation_status
     * @return Value of member implementation_status
     */
    inline uint8_t implementation_status() const
    {
        return m_implementation_status;
    }

    /*!
     * @brief This function returns a reference to member implementation_status
     * @return Reference to member implementation_status
     */
    inline uint8_t &implementation_status()
    {
        return m_implementation_status;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::RequestId m_request_id;
    uint8_t m_status;
    uint8_t m_implementation_status;
};

const uint8_t STATUS_OK                    = 0x00;
const uint8_t STATUS_OK_MATCHED            = 0x01;
const uint8_t STATUS_ERR_DDS_ERROR         = 0x80;
const uint8_t STATUS_ERR_MISMATCH          = 0x81;
const uint8_t STATUS_ERR_ALREADY_EXISTS    = 0x82;
const uint8_t STATUS_ERR_DENIED            = 0x83;
const uint8_t STATUS_ERR_UNKNOWN_REFERENCE = 0x84;
const uint8_t STATUS_ERR_INVALID_DATA      = 0x85;
const uint8_t STATUS_ERR_INCOMPATIBLE      = 0x86;
const uint8_t STATUS_ERR_RESOURCES         = 0x87;

const uint8_t STATUS_LAST_OP_NONE   = 0;
const uint8_t STATUS_LAST_OP_CREATE = 1;
const uint8_t STATUS_LAST_OP_UPDATE = 2;
const uint8_t STATUS_LAST_OP_DELETE = 3;
const uint8_t STATUS_LAST_OP_LOOKUP = 4;
const uint8_t STATUS_LAST_OP_READ   = 5;
const uint8_t STATUS_LAST_OP_WRITE  = 6;

/*!
 * @brief This class represents the enumeration InfoMask defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
enum InfoMask : uint32_t
{
    INFO_CONFIGURATION = 0x01 << 0,
    INFO_ACTIVITY      = 0x01 << 1
};

/*!
 * @brief This class represents the structure OBJK_DATAREADER_ActivityInfo defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_DATAREADER_ActivityInfo
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_DATAREADER_ActivityInfo();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_DATAREADER_ActivityInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DATAREADER_ActivityInfo that will be copied.
     */
    OBJK_DATAREADER_ActivityInfo(const OBJK_DATAREADER_ActivityInfo &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DATAREADER_ActivityInfo that will be copied.
     */
    OBJK_DATAREADER_ActivityInfo(OBJK_DATAREADER_ActivityInfo &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DATAREADER_ActivityInfo that will be copied.
     */
    OBJK_DATAREADER_ActivityInfo &operator=(const OBJK_DATAREADER_ActivityInfo &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DATAREADER_ActivityInfo that will be copied.
     */
    OBJK_DATAREADER_ActivityInfo &operator=(OBJK_DATAREADER_ActivityInfo &&x);

    /*!
     * @brief This function sets a value in member highest_acked_num
     * @param _highest_acked_num New value for member highest_acked_num
     */
    inline void highest_acked_num(int16_t _highest_acked_num)
    {
        m_highest_acked_num = _highest_acked_num;
    }

    /*!
     * @brief This function returns the value of member highest_acked_num
     * @return Value of member highest_acked_num
     */
    inline int16_t highest_acked_num() const
    {
        return m_highest_acked_num;
    }

    /*!
     * @brief This function returns a reference to member highest_acked_num
     * @return Reference to member highest_acked_num
     */
    inline int16_t &highest_acked_num()
    {
        return m_highest_acked_num;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    int16_t m_highest_acked_num;
};
/*!
 * @brief This class represents the structure OBJK_DATAWRITER_ActivityInfo defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class OBJK_DATAWRITER_ActivityInfo
{
  public:
    /*!
     * @brief Default constructor.
     */
    OBJK_DATAWRITER_ActivityInfo();

    /*!
     * @brief Default destructor.
     */
    ~OBJK_DATAWRITER_ActivityInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo that will be copied.
     */
    OBJK_DATAWRITER_ActivityInfo(const OBJK_DATAWRITER_ActivityInfo &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo that will be copied.
     */
    OBJK_DATAWRITER_ActivityInfo(OBJK_DATAWRITER_ActivityInfo &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo that will be copied.
     */
    OBJK_DATAWRITER_ActivityInfo &operator=(const OBJK_DATAWRITER_ActivityInfo &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo that will be copied.
     */
    OBJK_DATAWRITER_ActivityInfo &operator=(OBJK_DATAWRITER_ActivityInfo &&x);

    /*!
     * @brief This function sets a value in member stream_seq_num
     * @param _stream_seq_num New value for member stream_seq_num
     */
    inline void stream_seq_num(int16_t _stream_seq_num)
    {
        m_stream_seq_num = _stream_seq_num;
    }

    /*!
     * @brief This function returns the value of member stream_seq_num
     * @return Value of member stream_seq_num
     */
    inline int16_t stream_seq_num() const
    {
        return m_stream_seq_num;
    }

    /*!
     * @brief This function returns a reference to member stream_seq_num
     * @return Reference to member stream_seq_num
     */
    inline int16_t &stream_seq_num()
    {
        return m_stream_seq_num;
    }
    /*!
     * @brief This function sets a value in member sample_seq_num
     * @param _sample_seq_num New value for member sample_seq_num
     */
    inline void sample_seq_num(uint64_t _sample_seq_num)
    {
        m_sample_seq_num = _sample_seq_num;
    }

    /*!
     * @brief This function returns the value of member sample_seq_num
     * @return Value of member sample_seq_num
     */
    inline uint64_t sample_seq_num() const
    {
        return m_sample_seq_num;
    }

    /*!
     * @brief This function returns a reference to member sample_seq_num
     * @return Reference to member sample_seq_num
     */
    inline uint64_t &sample_seq_num()
    {
        return m_sample_seq_num;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    int16_t m_stream_seq_num;
    uint64_t m_sample_seq_num;
};
/*!
 * @brief This class represents the union ActivityInfoVariant defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class ActivityInfoVariant
{
  public:
    /*!
     * @brief Default constructor.
     */
    ActivityInfoVariant();

    /*!
     * @brief Default destructor.
     */
    ~ActivityInfoVariant();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::ActivityInfoVariant that will be copied.
     */
    ActivityInfoVariant(const ActivityInfoVariant &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::ActivityInfoVariant that will be copied.
     */
    ActivityInfoVariant(ActivityInfoVariant &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::ActivityInfoVariant that will be copied.
     */
    ActivityInfoVariant &operator=(const ActivityInfoVariant &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::ActivityInfoVariant that will be copied.
     */
    ActivityInfoVariant &operator=(ActivityInfoVariant &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to
     * the selected union member.
     */
    void _d(eprosima::micrortps::ObjectKind __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eprosima::micrortps::ObjectKind _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eprosima::micrortps::ObjectKind &_d();

    /*!
     * @brief This function copies the value in member data_writer
     * @param _data_writer New value to be copied in member data_writer
     */
    void data_writer(const eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo &_data_writer);

    /*!
     * @brief This function moves the value in member data_writer
     * @param _data_writer New value to be moved in member data_writer
     */
    void data_writer(eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo &&_data_writer);

    /*!
     * @brief This function returns a constant reference to member data_writer
     * @return Constant reference to member data_writer
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo &data_writer() const;

    /*!
     * @brief This function returns a reference to member data_writer
     * @return Reference to member data_writer
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo &data_writer();
    /*!
     * @brief This function copies the value in member data_reader
     * @param _data_reader New value to be copied in member data_reader
     */
    void data_reader(const eprosima::micrortps::OBJK_DATAREADER_ActivityInfo &_data_reader);

    /*!
     * @brief This function moves the value in member data_reader
     * @param _data_reader New value to be moved in member data_reader
     */
    void data_reader(eprosima::micrortps::OBJK_DATAREADER_ActivityInfo &&_data_reader);

    /*!
     * @brief This function returns a constant reference to member data_reader
     * @return Constant reference to member data_reader
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::OBJK_DATAREADER_ActivityInfo &data_reader() const;

    /*!
     * @brief This function returns a reference to member data_reader
     * @return Reference to member data_reader
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::OBJK_DATAREADER_ActivityInfo &data_reader();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectKind m__d;

    eprosima::micrortps::OBJK_DATAWRITER_ActivityInfo m_data_writer;
    eprosima::micrortps::OBJK_DATAREADER_ActivityInfo m_data_reader;
};
/*!
 * @brief This class represents the structure Info defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class Info
{
  public:
    /*!
     * @brief Default constructor.
     */
    Info();

    /*!
     * @brief Default destructor.
     */
    ~Info();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::Info that will be copied.
     */
    Info(const Info &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::Info that will be copied.
     */
    Info(Info &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::Info that will be copied.
     */
    Info &operator=(const Info &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::Info that will be copied.
     */
    Info &operator=(Info &&x);

    /*!
     * @brief This function copies the value in member config
     * @param _config New value to be copied in member config
     */
    inline void config(const eprosima::micrortps::ObjectVariant &_config)
    {
        m_config = _config;
    }

    /*!
     * @brief This function moves the value in member config
     * @param _config New value to be moved in member config
     */
    inline void config(eprosima::micrortps::ObjectVariant &&_config)
    {
        m_config = std::move(_config);
    }

    /*!
     * @brief This function returns a constant reference to member config
     * @return Constant reference to member config
     */
    inline const eprosima::micrortps::ObjectVariant &config() const
    {
        return m_config;
    }

    /*!
     * @brief This function returns a reference to member config
     * @return Reference to member config
     */
    inline eprosima::micrortps::ObjectVariant &config()
    {
        return m_config;
    }
    /*!
     * @brief This function copies the value in member activity
     * @param _activity New value to be copied in member activity
     */
    inline void activity(const eprosima::micrortps::ActivityInfoVariant &_activity)
    {
        m_activity = _activity;
    }

    /*!
     * @brief This function moves the value in member activity
     * @param _activity New value to be moved in member activity
     */
    inline void activity(eprosima::micrortps::ActivityInfoVariant &&_activity)
    {
        m_activity = std::move(_activity);
    }

    /*!
     * @brief This function returns a constant reference to member activity
     * @return Constant reference to member activity
     */
    inline const eprosima::micrortps::ActivityInfoVariant &activity() const
    {
        return m_activity;
    }

    /*!
     * @brief This function returns a reference to member activity
     * @return Reference to member activity
     */
    inline eprosima::micrortps::ActivityInfoVariant &activity()
    {
        return m_activity;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectVariant m_config;
    eprosima::micrortps::ActivityInfoVariant m_activity;
};
/*!
 * @brief This class represents the structure BaseRequest defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class BaseRequest
{
  public:
    /*!
     * @brief Default constructor.
     */
    BaseRequest();

    /*!
     * @brief Default destructor.
     */
    virtual ~BaseRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::BaseRequest that will be copied.
     */
    BaseRequest(const BaseRequest &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::BaseRequest that will be copied.
     */
    BaseRequest(BaseRequest &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::BaseRequest that will be copied.
     */
    BaseRequest &operator=(const BaseRequest &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::BaseRequest that will be copied.
     */
    BaseRequest &operator=(BaseRequest &&x);

    /*!
     * @brief This function copies the value in member request_id
     * @param _request_id New value to be copied in member request_id
     */
    inline void request_id(const eprosima::micrortps::RequestId &_request_id)
    {
        m_request_id = _request_id;
    }

    /*!
     * @brief This function moves the value in member request_id
     * @param _request_id New value to be moved in member request_id
     */
    inline void request_id(eprosima::micrortps::RequestId &&_request_id)
    {
        m_request_id = std::move(_request_id);
    }

    /*!
     * @brief This function returns a constant reference to member request_id
     * @return Constant reference to member request_id
     */
    inline const eprosima::micrortps::RequestId &request_id() const
    {
        return m_request_id;
    }

    /*!
     * @brief This function returns a reference to member request_id
     * @return Reference to member request_id
     */
    inline eprosima::micrortps::RequestId &request_id()
    {
        return m_request_id;
    }
    /*!
     * @brief This function copies the value in member object_id
     * @param _object_id New value to be copied in member object_id
     */
    inline void object_id(const eprosima::micrortps::ObjectId &_object_id)
    {
        m_object_id = _object_id;
    }

    /*!
     * @brief This function moves the value in member object_id
     * @param _object_id New value to be moved in member object_id
     */
    inline void object_id(eprosima::micrortps::ObjectId &&_object_id)
    {
        m_object_id = std::move(_object_id);
    }

    /*!
     * @brief This function returns a constant reference to member object_id
     * @return Constant reference to member object_id
     */
    inline const eprosima::micrortps::ObjectId &object_id() const
    {
        return m_object_id;
    }

    /*!
     * @brief This function returns a reference to member object_id
     * @return Reference to member object_id
     */
    inline eprosima::micrortps::ObjectId &object_id()
    {
        return m_object_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::RequestId m_request_id;
    eprosima::micrortps::ObjectId m_object_id;
};
/*!
 * @brief This class represents the structure BaseObjectRequest defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class BaseObjectRequest : public BaseRequest
{
  public:
    /*!
     * @brief Default constructor.
     */
    BaseObjectRequest();

    /*!
     * @brief Default destructor.
     */
    virtual ~BaseObjectRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::BaseObjectRequest that will be copied.
     */
    BaseObjectRequest(const BaseObjectRequest &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::BaseObjectRequest that will be copied.
     */
    BaseObjectRequest(BaseObjectRequest &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::BaseObjectRequest that will be copied.
     */
    BaseObjectRequest &operator=(const BaseObjectRequest &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::BaseObjectRequest that will be copied.
     */
    BaseObjectRequest &operator=(BaseObjectRequest &&x);

    /*!
     * @brief This function copies the value in member object_id
     * @param _object_id New value to be copied in member object_id
     */
    inline void object_id(const eprosima::micrortps::ObjectId &_object_id)
    {
        m_object_id = _object_id;
    }

    /*!
     * @brief This function moves the value in member object_id
     * @param _object_id New value to be moved in member object_id
     */
    inline void object_id(eprosima::micrortps::ObjectId &&_object_id)
    {
        m_object_id = std::move(_object_id);
    }

    /*!
     * @brief This function returns a constant reference to member object_id
     * @return Constant reference to member object_id
     */
    inline const eprosima::micrortps::ObjectId &object_id() const
    {
        return m_object_id;
    }

    /*!
     * @brief This function returns a reference to member object_id
     * @return Reference to member object_id
     */
    inline eprosima::micrortps::ObjectId &object_id()
    {
        return m_object_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectId m_object_id;
};
/*!
 * @brief This class represents the structure BaseReply defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class BaseReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    BaseReply();

    /*!
     * @brief Default destructor.
     */
    virtual ~BaseReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::BaseReply that will be copied.
     */
    BaseReply(const BaseReply &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::BaseReply that will be copied.
     */
    BaseReply(BaseReply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::BaseReply that will be copied.
     */
    BaseReply &operator=(const BaseReply &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::BaseReply that will be copied.
     */
    BaseReply &operator=(BaseReply &&x);

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    inline void result(const eprosima::micrortps::ResultStatus &_result)
    {
        m_result = _result;
    }

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    inline void result(eprosima::micrortps::ResultStatus &&_result)
    {
        m_result = std::move(_result);
    }

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     */
    inline const eprosima::micrortps::ResultStatus &result() const
    {
        return m_result;
    }

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     */
    inline eprosima::micrortps::ResultStatus &result()
    {
        return m_result;
    }
    /*!
     * @brief This function copies the value in member request_id
     * @param _request_id New value to be copied in member request_id
     */
    inline void request_id(const eprosima::micrortps::RequestId &_request_id)
    {
        m_request_id = _request_id;
    }

    /*!
     * @brief This function moves the value in member request_id
     * @param _request_id New value to be moved in member request_id
     */
    inline void request_id(eprosima::micrortps::RequestId &&_request_id)
    {
        m_request_id = std::move(_request_id);
    }

    /*!
     * @brief This function returns a constant reference to member request_id
     * @return Constant reference to member request_id
     */
    inline const eprosima::micrortps::RequestId &request_id() const
    {
        return m_request_id;
    }

    /*!
     * @brief This function returns a reference to member request_id
     * @return Reference to member request_id
     */
    inline eprosima::micrortps::RequestId &request_id()
    {
        return m_request_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ResultStatus m_result;
    eprosima::micrortps::RequestId m_request_id;
};
/*!
 * @brief This class represents the structure BaseObjectReply defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class BaseObjectReply : public BaseReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    BaseObjectReply();

    /*!
     * @brief Default destructor.
     */
    virtual ~BaseObjectReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::BaseObjectReply that will be copied.
     */
    BaseObjectReply(const BaseObjectReply &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::BaseObjectReply that will be copied.
     */
    BaseObjectReply(BaseObjectReply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::BaseObjectReply that will be copied.
     */
    BaseObjectReply &operator=(const BaseObjectReply &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::BaseObjectReply that will be copied.
     */
    BaseObjectReply &operator=(BaseObjectReply &&x);

    /*!
     * @brief This function copies the value in member object_id
     * @param _object_id New value to be copied in member object_id
     */
    inline void object_id(const eprosima::micrortps::ObjectId &_object_id)
    {
        m_object_id = _object_id;
    }

    /*!
     * @brief This function moves the value in member object_id
     * @param _object_id New value to be moved in member object_id
     */
    inline void object_id(eprosima::micrortps::ObjectId &&_object_id)
    {
        m_object_id = std::move(_object_id);
    }

    /*!
     * @brief This function returns a constant reference to member object_id
     * @return Constant reference to member object_id
     */
    inline const eprosima::micrortps::ObjectId &object_id() const
    {
        return m_object_id;
    }

    /*!
     * @brief This function returns a reference to member object_id
     * @return Reference to member object_id
     */
    inline eprosima::micrortps::ObjectId &object_id()
    {
        return m_object_id;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectId m_object_id;
};
/*!
 * @brief This class represents the structure InfoReply defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class InfoReply : public BaseObjectReply
{
  public:
    /*!
     * @brief Default constructor.
     */
    InfoReply();

    /*!
     * @brief Default destructor.
     */
    virtual ~InfoReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::InfoReply that will be copied.
     */
    InfoReply(const InfoReply &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::InfoReply that will be copied.
     */
    InfoReply(InfoReply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::InfoReply that will be copied.
     */
    InfoReply &operator=(const InfoReply &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::InfoReply that will be copied.
     */
    InfoReply &operator=(InfoReply &&x);

    /*!
     * @brief This function copies the value in member info
     * @param _info New value to be copied in member info
     */
    inline void info(const eprosima::micrortps::ObjectVariant &_info)
    {
        m_info = _info;
    }

    /*!
     * @brief This function moves the value in member info
     * @param _info New value to be moved in member info
     */
    inline void info(eprosima::micrortps::ObjectVariant &&_info)
    {
        m_info = std::move(_info);
    }

    /*!
     * @brief This function returns a constant reference to member info
     * @return Constant reference to member info
     */
    inline const eprosima::micrortps::ObjectVariant &info() const
    {
        return m_info;
    }

    /*!
     * @brief This function returns a reference to member info
     * @return Reference to member info
     */
    inline eprosima::micrortps::ObjectVariant &info()
    {
        return m_info;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    virtual void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::ObjectVariant m_info;
};

typedef uint8_t DataFormat;
const eprosima::micrortps::DataFormat FORMAT_DATA           = 0x00;
const eprosima::micrortps::DataFormat FORMAT_DATA_SEQ       = 0x01;
const eprosima::micrortps::DataFormat FORMAT_SAMPLE         = 0x02;
const eprosima::micrortps::DataFormat FORMAT_SAMPLE_SEQ     = 0x03;
const eprosima::micrortps::DataFormat FORMAT_PACKED_SAMPLES = 0x04;
/*!
 * @brief This class represents the structure DataDeliveryControl defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class DataDeliveryControl
{
  public:
    /*!
     * @brief Default constructor.
     */
    DataDeliveryControl();

    /*!
     * @brief Default destructor.
     */
    ~DataDeliveryControl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DataDeliveryControl that will be copied.
     */
    DataDeliveryControl(const DataDeliveryControl &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DataDeliveryControl that will be copied.
     */
    DataDeliveryControl(DataDeliveryControl &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DataDeliveryControl that will be copied.
     */
    DataDeliveryControl &operator=(const DataDeliveryControl &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DataDeliveryControl that will be copied.
     */
    DataDeliveryControl &operator=(DataDeliveryControl &&x);

    /*!
     * @brief This function sets a value in member max_samples
     * @param _max_samples New value for member max_samples
     */
    inline void max_samples(uint16_t _max_samples)
    {
        m_max_samples = _max_samples;
    }

    /*!
     * @brief This function returns the value of member max_samples
     * @return Value of member max_samples
     */
    inline uint16_t max_samples() const
    {
        return m_max_samples;
    }

    /*!
     * @brief This function returns a reference to member max_samples
     * @return Reference to member max_samples
     */
    inline uint16_t &max_samples()
    {
        return m_max_samples;
    }
    /*!
     * @brief This function sets a value in member max_elapsed_time
     * @param _max_elapsed_time New value for member max_elapsed_time
     */
    inline void max_elapsed_time(uint32_t _max_elapsed_time)
    {
        m_max_elapsed_time = _max_elapsed_time;
    }

    /*!
     * @brief This function returns the value of member max_elapsed_time
     * @return Value of member max_elapsed_time
     */
    inline uint32_t max_elapsed_time() const
    {
        return m_max_elapsed_time;
    }

    /*!
     * @brief This function returns a reference to member max_elapsed_time
     * @return Reference to member max_elapsed_time
     */
    inline uint32_t &max_elapsed_time()
    {
        return m_max_elapsed_time;
    }
    /*!
     * @brief This function sets a value in member max_rate
     * @param _max_rate New value for member max_rate
     */
    inline void max_rate(uint32_t _max_rate)
    {
        m_max_rate = _max_rate;
    }

    /*!
     * @brief This function returns the value of member max_rate
     * @return Value of member max_rate
     */
    inline uint32_t max_rate() const
    {
        return m_max_rate;
    }

    /*!
     * @brief This function returns a reference to member max_rate
     * @return Reference to member max_rate
     */
    inline uint32_t &max_rate()
    {
        return m_max_rate;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    uint16_t m_max_samples;      // Maximum number of samples
    uint32_t m_max_elapsed_time; // In milliseconds
    uint32_t m_max_rate;         // Bytes per second
};
/*!
 * @brief This class represents the union DataDeliveryConfig defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class DataDeliveryConfig
{
  public:
    /*!
     * @brief Default constructor.
     */
    DataDeliveryConfig();

    /*!
     * @brief Default destructor.
     */
    ~DataDeliveryConfig();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DataDeliveryConfig that will be copied.
     */
    DataDeliveryConfig(const DataDeliveryConfig &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DataDeliveryConfig that will be copied.
     */
    DataDeliveryConfig(DataDeliveryConfig &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DataDeliveryConfig that will be copied.
     */
    DataDeliveryConfig &operator=(const DataDeliveryConfig &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DataDeliveryConfig that will be copied.
     */
    DataDeliveryConfig &operator=(DataDeliveryConfig &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to
     * the selected union member.
     */
    void _d(eprosima::micrortps::DataFormat __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eprosima::micrortps::DataFormat _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eprosima::micrortps::DataFormat &_d();

    /*!
     * @brief This function copies the value in member delivey_control
     * @param _delivey_control New value to be copied in member delivey_control
     */
    void delivey_control(const eprosima::micrortps::DataDeliveryControl &_delivey_control);

    /*!
     * @brief This function moves the value in member delivey_control
     * @param _delivey_control New value to be moved in member delivey_control
     */
    void delivey_control(eprosima::micrortps::DataDeliveryControl &&_delivey_control);

    /*!
     * @brief This function returns a constant reference to member delivey_control
     * @return Constant reference to member delivey_control
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::DataDeliveryControl &delivey_control() const;

    /*!
     * @brief This function returns a reference to member delivey_control
     * @return Reference to member delivey_control
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::DataDeliveryControl &delivey_control();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::DataFormat m__d;

    eprosima::micrortps::DataDeliveryControl m_delivey_control;
};
/*!
 * @brief This class represents the structure ReadSpecification defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class ReadSpecification
{
  public:
    /*!
     * @brief Default constructor.
     */
    ReadSpecification();

    /*!
     * @brief Default destructor.
     */
    ~ReadSpecification();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::ReadSpecification that will be copied.
     */
    ReadSpecification(const ReadSpecification &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::ReadSpecification that will be copied.
     */
    ReadSpecification(ReadSpecification &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::ReadSpecification that will be copied.
     */
    ReadSpecification &operator=(const ReadSpecification &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::ReadSpecification that will be copied.
     */
    ReadSpecification &operator=(ReadSpecification &&x);

    /*!
     * @brief This function copies the value in member content_filter_expression
     * @param _content_filter_expression New value to be copied in member content_filter_expression
     */
    inline void content_filter_expression(const std::string &_content_filter_expression)
    {
        m_content_filter_expression = _content_filter_expression;
    }

    /*!
     * @brief This function moves the value in member content_filter_expression
     * @param _content_filter_expression New value to be moved in member content_filter_expression
     */
    inline void content_filter_expression(std::string &&_content_filter_expression)
    {
        m_content_filter_expression = std::move(_content_filter_expression);
    }

    /*!
     * @brief This function returns a constant reference to member content_filter_expression
     * @return Constant reference to member content_filter_expression
     */
    inline const std::string &content_filter_expression() const
    {
        return m_content_filter_expression;
    }

    /*!
     * @brief This function returns a reference to member content_filter_expression
     * @return Reference to member content_filter_expression
     */
    inline std::string &content_filter_expression()
    {
        return m_content_filter_expression;
    }
    /*!
     * @brief This function copies the value in member delivery_config
     * @param _delivery_config New value to be copied in member delivery_config
     */
    inline void delivery_config(const eprosima::micrortps::DataDeliveryConfig &_delivery_config)
    {
        m_delivery_config = _delivery_config;
    }

    /*!
     * @brief This function moves the value in member delivery_config
     * @param _delivery_config New value to be moved in member delivery_config
     */
    inline void delivery_config(eprosima::micrortps::DataDeliveryConfig &&_delivery_config)
    {
        m_delivery_config = std::move(_delivery_config);
    }

    /*!
     * @brief This function returns a constant reference to member delivery_config
     * @return Constant reference to member delivery_config
     */
    inline const eprosima::micrortps::DataDeliveryConfig &delivery_config() const
    {
        return m_delivery_config;
    }

    /*!
     * @brief This function returns a reference to member delivery_config
     * @return Reference to member delivery_config
     */
    inline eprosima::micrortps::DataDeliveryConfig &delivery_config()
    {
        return m_delivery_config;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    std::string m_content_filter_expression;
    eprosima::micrortps::DataDeliveryConfig m_delivery_config;
};
/*!
 * @brief This class represents the structure SampleInfo defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class SampleInfo
{
  public:
    /*!
     * @brief Default constructor.
     */
    SampleInfo();

    /*!
     * @brief Default destructor.
     */
    ~SampleInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::SampleInfo that will be copied.
     */
    SampleInfo(const SampleInfo &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::SampleInfo that will be copied.
     */
    SampleInfo(SampleInfo &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::SampleInfo that will be copied.
     */
    SampleInfo &operator=(const SampleInfo &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::SampleInfo that will be copied.
     */
    SampleInfo &operator=(SampleInfo &&x);

    /*!
     * @brief This function sets a value in member state
     * @param _state New value for member state
     */
    inline void state(uint32_t _state)
    {
        m_state = _state;
    }

    /*!
     * @brief This function returns the value of member state
     * @return Value of member state
     */
    inline uint32_t state() const
    {
        return m_state;
    }

    /*!
     * @brief This function returns a reference to member state
     * @return Reference to member state
     */
    inline uint32_t &state()
    {
        return m_state;
    }
    /*!
     * @brief This function sets a value in member sequence_number
     * @param _sequence_number New value for member sequence_number
     */
    inline void sequence_number(uint32_t _sequence_number)
    {
        m_sequence_number = _sequence_number;
    }

    /*!
     * @brief This function returns the value of member sequence_number
     * @return Value of member sequence_number
     */
    inline uint32_t sequence_number() const
    {
        return m_sequence_number;
    }

    /*!
     * @brief This function returns a reference to member sequence_number
     * @return Reference to member sequence_number
     */
    inline uint32_t &sequence_number()
    {
        return m_sequence_number;
    }
    /*!
     * @brief This function sets a value in member session_time_offset
     * @param _session_time_offset New value for member session_time_offset
     */
    inline void session_time_offset(uint32_t _session_time_offset)
    {
        m_session_time_offset = _session_time_offset;
    }

    /*!
     * @brief This function returns the value of member session_time_offset
     * @return Value of member session_time_offset
     */
    inline uint32_t session_time_offset() const
    {
        return m_session_time_offset;
    }

    /*!
     * @brief This function returns a reference to member session_time_offset
     * @return Reference to member session_time_offset
     */
    inline uint32_t &session_time_offset()
    {
        return m_session_time_offset;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    uint32_t m_state;
    uint32_t m_sequence_number;
    uint32_t m_session_time_offset;
};
/*!
 * @brief This class represents the structure SampleInfoDelta defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class SampleInfoDelta
{
  public:
    /*!
     * @brief Default constructor.
     */
    SampleInfoDelta();

    /*!
     * @brief Default destructor.
     */
    ~SampleInfoDelta();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::SampleInfoDelta that will be copied.
     */
    SampleInfoDelta(const SampleInfoDelta &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::SampleInfoDelta that will be copied.
     */
    SampleInfoDelta(SampleInfoDelta &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::SampleInfoDelta that will be copied.
     */
    SampleInfoDelta &operator=(const SampleInfoDelta &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::SampleInfoDelta that will be copied.
     */
    SampleInfoDelta &operator=(SampleInfoDelta &&x);

    /*!
     * @brief This function sets a value in member state
     * @param _state New value for member state
     */
    inline void state(uint8_t _state)
    {
        m_state = _state;
    }

    /*!
     * @brief This function returns the value of member state
     * @return Value of member state
     */
    inline uint8_t state() const
    {
        return m_state;
    }

    /*!
     * @brief This function returns a reference to member state
     * @return Reference to member state
     */
    inline uint8_t &state()
    {
        return m_state;
    }
    /*!
     * @brief This function sets a value in member seq_number_delta
     * @param _seq_number_delta New value for member seq_number_delta
     */
    inline void seq_number_delta(uint8_t _seq_number_delta)
    {
        m_seq_number_delta = _seq_number_delta;
    }

    /*!
     * @brief This function returns the value of member seq_number_delta
     * @return Value of member seq_number_delta
     */
    inline uint8_t seq_number_delta() const
    {
        return m_seq_number_delta;
    }

    /*!
     * @brief This function returns a reference to member seq_number_delta
     * @return Reference to member seq_number_delta
     */
    inline uint8_t &seq_number_delta()
    {
        return m_seq_number_delta;
    }
    /*!
     * @brief This function sets a value in member timestamp_delta
     * @param _timestamp_delta New value for member timestamp_delta
     */
    inline void timestamp_delta(uint16_t _timestamp_delta)
    {
        m_timestamp_delta = _timestamp_delta;
    }

    /*!
     * @brief This function returns the value of member timestamp_delta
     * @return Value of member timestamp_delta
     */
    inline uint16_t timestamp_delta() const
    {
        return m_timestamp_delta;
    }

    /*!
     * @brief This function returns a reference to member timestamp_delta
     * @return Reference to member timestamp_delta
     */
    inline uint16_t &timestamp_delta()
    {
        return m_timestamp_delta;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    uint8_t m_state;
    uint8_t m_seq_number_delta;
    uint16_t m_timestamp_delta;
};
/*!
 * @brief This class represents the structure SampleData defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class SampleData
{
  public:
    /*!
     * @brief Default constructor.
     */
    SampleData();

    /*!
     * @brief Default destructor.
     */
    ~SampleData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::SampleData that will be copied.
     */
    SampleData(const SampleData &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::SampleData that will be copied.
     */
    SampleData(SampleData &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::SampleData that will be copied.
     */
    SampleData &operator=(const SampleData &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::SampleData that will be copied.
     */
    SampleData &operator=(SampleData &&x);

    /*!
     * @brief This function copies the value in member serialized_data
     * @param _serialized_data New value to be copied in member serialized_data
     */
    inline void serialized_data(const std::vector<uint8_t> &_serialized_data)
    {
        m_serialized_data = _serialized_data;
    }

    /*!
     * @brief This function moves the value in member serialized_data
     * @param _serialized_data New value to be moved in member serialized_data
     */
    inline void serialized_data(std::vector<uint8_t> &&_serialized_data)
    {
        m_serialized_data = std::move(_serialized_data);
    }

    /*!
     * @brief This function returns a constant reference to member serialized_data
     * @return Constant reference to member serialized_data
     */
    inline const std::vector<uint8_t> &serialized_data() const
    {
        return m_serialized_data;
    }

    /*!
     * @brief This function returns a reference to member serialized_data
     * @return Reference to member serialized_data
     */
    inline std::vector<uint8_t> &serialized_data()
    {
        return m_serialized_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    std::vector<uint8_t> m_serialized_data;
};
typedef std::vector<eprosima::micrortps::SampleData> SampleDataSeq;
/*!
 * @brief This class represents the structure Sample defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class Sample
{
  public:
    /*!
     * @brief Default constructor.
     */
    Sample();

    /*!
     * @brief Default destructor.
     */
    ~Sample();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::Sample that will be copied.
     */
    Sample(const Sample &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::Sample that will be copied.
     */
    Sample(Sample &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::Sample that will be copied.
     */
    Sample &operator=(const Sample &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::Sample that will be copied.
     */
    Sample &operator=(Sample &&x);

    /*!
     * @brief This function copies the value in member info
     * @param _info New value to be copied in member info
     */
    inline void info(const eprosima::micrortps::SampleInfo &_info)
    {
        m_info = _info;
    }

    /*!
     * @brief This function moves the value in member info
     * @param _info New value to be moved in member info
     */
    inline void info(eprosima::micrortps::SampleInfo &&_info)
    {
        m_info = std::move(_info);
    }

    /*!
     * @brief This function returns a constant reference to member info
     * @return Constant reference to member info
     */
    inline const eprosima::micrortps::SampleInfo &info() const
    {
        return m_info;
    }

    /*!
     * @brief This function returns a reference to member info
     * @return Reference to member info
     */
    inline eprosima::micrortps::SampleInfo &info()
    {
        return m_info;
    }
    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    inline void data(const eprosima::micrortps::SampleData &_data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    inline void data(eprosima::micrortps::SampleData &&_data)
    {
        m_data = std::move(_data);
    }

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    inline const eprosima::micrortps::SampleData &data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    inline eprosima::micrortps::SampleData &data()
    {
        return m_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::SampleInfo m_info;
    eprosima::micrortps::SampleData m_data;
};

typedef std::vector<eprosima::micrortps::Sample> SampleSeq;

/*!
 * @brief This class represents the structure SampleDelta defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class SampleDelta
{
  public:
    /*!
     * @brief Default constructor.
     */
    SampleDelta();

    /*!
     * @brief Default destructor.
     */
    ~SampleDelta();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::SampleDelta that will be copied.
     */
    SampleDelta(const SampleDelta &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::SampleDelta that will be copied.
     */
    SampleDelta(SampleDelta &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::SampleDelta that will be copied.
     */
    SampleDelta &operator=(const SampleDelta &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::SampleDelta that will be copied.
     */
    SampleDelta &operator=(SampleDelta &&x);

    /*!
     * @brief This function copies the value in member info_delta
     * @param _info_delta New value to be copied in member info_delta
     */
    inline void info_delta(const eprosima::micrortps::SampleInfoDelta &_info_delta)
    {
        m_info_delta = _info_delta;
    }

    /*!
     * @brief This function moves the value in member info_delta
     * @param _info_delta New value to be moved in member info_delta
     */
    inline void info_delta(eprosima::micrortps::SampleInfoDelta &&_info_delta)
    {
        m_info_delta = std::move(_info_delta);
    }

    /*!
     * @brief This function returns a constant reference to member info_delta
     * @return Constant reference to member info_delta
     */
    inline const eprosima::micrortps::SampleInfoDelta &info_delta() const
    {
        return m_info_delta;
    }

    /*!
     * @brief This function returns a reference to member info_delta
     * @return Reference to member info_delta
     */
    inline eprosima::micrortps::SampleInfoDelta &info_delta()
    {
        return m_info_delta;
    }
    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    inline void data(const eprosima::micrortps::SampleData &_data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    inline void data(eprosima::micrortps::SampleData &&_data)
    {
        m_data = std::move(_data);
    }

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    inline const eprosima::micrortps::SampleData &data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    inline eprosima::micrortps::SampleData &data()
    {
        return m_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::SampleInfoDelta m_info_delta;
    eprosima::micrortps::SampleData m_data;
};
/*!
 * @brief This class represents the structure PackedSamples defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class PackedSamples
{
  public:
    /*!
     * @brief Default constructor.
     */
    PackedSamples();

    /*!
     * @brief Default destructor.
     */
    ~PackedSamples();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::PackedSamples that will be copied.
     */
    PackedSamples(const PackedSamples &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::PackedSamples that will be copied.
     */
    PackedSamples(PackedSamples &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::PackedSamples that will be copied.
     */
    PackedSamples &operator=(const PackedSamples &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::PackedSamples that will be copied.
     */
    PackedSamples &operator=(PackedSamples &&x);

    /*!
     * @brief This function copies the value in member info_base
     * @param _info_base New value to be copied in member info_base
     */
    inline void info_base(const eprosima::micrortps::SampleInfo &_info_base)
    {
        m_info_base = _info_base;
    }

    /*!
     * @brief This function moves the value in member info_base
     * @param _info_base New value to be moved in member info_base
     */
    inline void info_base(eprosima::micrortps::SampleInfo &&_info_base)
    {
        m_info_base = std::move(_info_base);
    }

    /*!
     * @brief This function returns a constant reference to member info_base
     * @return Constant reference to member info_base
     */
    inline const eprosima::micrortps::SampleInfo &info_base() const
    {
        return m_info_base;
    }

    /*!
     * @brief This function returns a reference to member info_base
     * @return Reference to member info_base
     */
    inline eprosima::micrortps::SampleInfo &info_base()
    {
        return m_info_base;
    }
    /*!
     * @brief This function copies the value in member sample_delta_seq
     * @param _sample_delta_seq New value to be copied in member sample_delta_seq
     */
    inline void sample_delta_seq(const std::vector<eprosima::micrortps::SampleDelta> &_sample_delta_seq)
    {
        m_sample_delta_seq = _sample_delta_seq;
    }

    /*!
     * @brief This function moves the value in member sample_delta_seq
     * @param _sample_delta_seq New value to be moved in member sample_delta_seq
     */
    inline void sample_delta_seq(std::vector<eprosima::micrortps::SampleDelta> &&_sample_delta_seq)
    {
        m_sample_delta_seq = std::move(_sample_delta_seq);
    }

    /*!
     * @brief This function returns a constant reference to member sample_delta_seq
     * @return Constant reference to member sample_delta_seq
     */
    inline const std::vector<eprosima::micrortps::SampleDelta> &sample_delta_seq() const
    {
        return m_sample_delta_seq;
    }

    /*!
     * @brief This function returns a reference to member sample_delta_seq
     * @return Reference to member sample_delta_seq
     */
    inline std::vector<eprosima::micrortps::SampleDelta> &sample_delta_seq()
    {
        return m_sample_delta_seq;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::SampleInfo m_info_base;
    std::vector<eprosima::micrortps::SampleDelta> m_sample_delta_seq;
};
typedef std::vector<eprosima::micrortps::PackedSamples> PackedSampleSeq;
/*!
 * @brief This class represents the union DataRepresentation defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
class DataRepresentation
{
  public:
    /*!
     * @brief Default constructor.
     */
    DataRepresentation();

    /*!
     * @brief Default destructor.
     */
    ~DataRepresentation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::micrortps::DataRepresentation that will be copied.
     */
    DataRepresentation(const DataRepresentation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::micrortps::DataRepresentation that will be copied.
     */
    DataRepresentation(DataRepresentation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::micrortps::DataRepresentation that will be copied.
     */
    DataRepresentation &operator=(const DataRepresentation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::micrortps::DataRepresentation that will be copied.
     */
    DataRepresentation &operator=(DataRepresentation &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to
     * the selected union member.
     */
    void _d(eprosima::micrortps::DataFormat __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eprosima::micrortps::DataFormat _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eprosima::micrortps::DataFormat &_d();

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    void data(const eprosima::micrortps::SampleData &_data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    void data(eprosima::micrortps::SampleData &&_data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::SampleData &data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::SampleData &data();
    /*!
     * @brief This function copies the value in member data_seq
     * @param _data_seq New value to be copied in member data_seq
     */
    void data_seq(const eprosima::micrortps::SampleDataSeq &_data_seq);

    /*!
     * @brief This function moves the value in member data_seq
     * @param _data_seq New value to be moved in member data_seq
     */
    void data_seq(eprosima::micrortps::SampleDataSeq &&_data_seq);

    /*!
     * @brief This function returns a constant reference to member data_seq
     * @return Constant reference to member data_seq
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::SampleDataSeq &data_seq() const;

    /*!
     * @brief This function returns a reference to member data_seq
     * @return Reference to member data_seq
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::SampleDataSeq &data_seq();
    /*!
     * @brief This function copies the value in member sample
     * @param _sample New value to be copied in member sample
     */
    void sample(const eprosima::micrortps::Sample &_sample);

    /*!
     * @brief This function moves the value in member sample
     * @param _sample New value to be moved in member sample
     */
    void sample(eprosima::micrortps::Sample &&_sample);

    /*!
     * @brief This function returns a constant reference to member sample
     * @return Constant reference to member sample
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::Sample &sample() const;

    /*!
     * @brief This function returns a reference to member sample
     * @return Reference to member sample
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::Sample &sample();
    /*!
     * @brief This function copies the value in member sample_seq
     * @param _sample_seq New value to be copied in member sample_seq
     */
    void sample_seq(const eprosima::micrortps::SampleSeq &_sample_seq);

    /*!
     * @brief This function moves the value in member sample_seq
     * @param _sample_seq New value to be moved in member sample_seq
     */
    void sample_seq(eprosima::micrortps::SampleSeq &&_sample_seq);

    /*!
     * @brief This function returns a constant reference to member sample_seq
     * @return Constant reference to member sample_seq
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::SampleSeq &sample_seq() const;

    /*!
     * @brief This function returns a reference to member sample_seq
     * @return Reference to member sample_seq
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::SampleSeq &sample_seq();
    /*!
     * @brief This function copies the value in member packed_samples
     * @param _packed_samples New value to be copied in member packed_samples
     */
    void packed_samples(const eprosima::micrortps::PackedSamples &_packed_samples);

    /*!
     * @brief This function moves the value in member packed_samples
     * @param _packed_samples New value to be moved in member packed_samples
     */
    void packed_samples(eprosima::micrortps::PackedSamples &&_packed_samples);

    /*!
     * @brief This function returns a constant reference to member packed_samples
     * @return Constant reference to member packed_samples
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    const eprosima::micrortps::PackedSamples &packed_samples() const;

    /*!
     * @brief This function returns a reference to member packed_samples
     * @return Reference to member packed_samples
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the
     * current selection.
     */
    eprosima::micrortps::PackedSamples &packed_samples();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    virtual size_t getCdrSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

  private:
    eprosima::micrortps::DataFormat m__d;

    eprosima::micrortps::SampleData m_data;
    eprosima::micrortps::SampleDataSeq m_data_seq;
    eprosima::micrortps::Sample m_sample;
    eprosima::micrortps::SampleSeq m_sample_seq;
    eprosima::micrortps::PackedSamples m_packed_samples;
};
/*!
 * @brief This class represents the enumeration SubmessageId defined by the user in the IDL file.
 * @ingroup DDS_XRCE_TYPES
 */
enum SubmessageId : uint8_t
{
    CREATE_CLIENT = 0,
    CREATE        = 1,
    GET_INFO      = 2,
    DELETE        = 3,
    STATUS        = 4,
    INFO          = 5,
    WRITE_DATA    = 6,
    READ_DATA     = 7,
    DATA          = 8,
    ACKNACK       = 9,
    HEARTBEAT     = 10,
    FRAGMENT      = 12,
    FRAGMENT_END  = 13
};
} // namespace micrortps
} // namespace eprosima

#endif // _dds_xrce_types_H_