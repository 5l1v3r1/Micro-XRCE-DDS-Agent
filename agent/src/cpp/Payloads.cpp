// Copyright 2017 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Payloads.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "agent/Payloads.h"

#include <fastcdr/FastCdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

namespace eprosima {
namespace micrortps {


CREATE_PAYLOAD::CREATE_PAYLOAD()
{



}

CREATE_PAYLOAD::~CREATE_PAYLOAD()
{
}

CREATE_PAYLOAD::CREATE_PAYLOAD(const CREATE_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    object_id_ = x.object_id_;
    object_representation_ = x.object_representation_;
}

CREATE_PAYLOAD::CREATE_PAYLOAD(CREATE_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    object_id_ = std::move(x.object_id_);
    object_representation_ = std::move(x.object_representation_);
}

CREATE_PAYLOAD& CREATE_PAYLOAD::operator=(const CREATE_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    object_id_ = x.object_id_;
    object_representation_ = x.object_representation_;
    
    return *this;
}

CREATE_PAYLOAD& CREATE_PAYLOAD::operator=(CREATE_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    object_id_ = std::move(x.object_id_);
    object_representation_ = std::move(x.object_representation_);
    
    return *this;
}

size_t CREATE_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);

    current_alignment += ((3) * 1);

    current_alignment += ObjectVariant::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t CREATE_PAYLOAD::getCdrSerializedSize(const CREATE_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);
    current_alignment += ((3) * 1);
    current_alignment += ObjectVariant::getCdrSerializedSize(data.object_representation(), current_alignment);

    return current_alignment - initial_alignment;
}

void CREATE_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
    scdr << object_id_;
    scdr << object_representation_;
}

void CREATE_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
    dcdr >> object_id_;
    dcdr >> object_representation_;
}

DELETE_PAYLOAD::DELETE_PAYLOAD()
{


}

DELETE_PAYLOAD::~DELETE_PAYLOAD()
{
}

DELETE_PAYLOAD::DELETE_PAYLOAD(const DELETE_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    object_id_ = x.object_id_;
}

DELETE_PAYLOAD::DELETE_PAYLOAD(DELETE_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    object_id_ = std::move(x.object_id_);
}

DELETE_PAYLOAD& DELETE_PAYLOAD::operator=(const DELETE_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    object_id_ = x.object_id_;

    return *this;
}

DELETE_PAYLOAD& DELETE_PAYLOAD::operator=(DELETE_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    object_id_ = std::move(x.object_id_);

    return *this;
}

size_t DELETE_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ((4) * 1);

    current_alignment += ((3) * 1);


    return current_alignment - initial_alignment;
}

size_t DELETE_PAYLOAD::getCdrSerializedSize(const DELETE_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ((4) * 1);
    current_alignment += ((3) * 1);

    return current_alignment - initial_alignment;
}

void DELETE_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
    scdr << object_id_;
}

void DELETE_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
    dcdr >> object_id_;
}

RESOURCE_STATUS_PAYLOAD::RESOURCE_STATUS_PAYLOAD()
{


}

RESOURCE_STATUS_PAYLOAD::~RESOURCE_STATUS_PAYLOAD()
{
}

RESOURCE_STATUS_PAYLOAD::RESOURCE_STATUS_PAYLOAD(const RESOURCE_STATUS_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    request_status_ = x.request_status_;
}

RESOURCE_STATUS_PAYLOAD::RESOURCE_STATUS_PAYLOAD(RESOURCE_STATUS_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    request_status_ = std::move(x.request_status_);
}

RESOURCE_STATUS_PAYLOAD& RESOURCE_STATUS_PAYLOAD::operator=(const RESOURCE_STATUS_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    request_status_ = x.request_status_;
    
    return *this;
}

RESOURCE_STATUS_PAYLOAD& RESOURCE_STATUS_PAYLOAD::operator=(RESOURCE_STATUS_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    request_status_ = std::move(x.request_status_);
    
    return *this;
}

size_t RESOURCE_STATUS_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);

    current_alignment += Status::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t RESOURCE_STATUS_PAYLOAD::getCdrSerializedSize(const RESOURCE_STATUS_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);
    current_alignment += Status::getCdrSerializedSize(data.request_status(), current_alignment);

    return current_alignment - initial_alignment;
}

void RESOURCE_STATUS_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
    scdr << request_status_;
}

void RESOURCE_STATUS_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
    dcdr >> request_status_;
}

GET_INFO_PAYLOAD::GET_INFO_PAYLOAD()
{
}

GET_INFO_PAYLOAD::~GET_INFO_PAYLOAD()
{
}

GET_INFO_PAYLOAD::GET_INFO_PAYLOAD(const GET_INFO_PAYLOAD &x)
{
    request_id_ = x.request_id_;
}

GET_INFO_PAYLOAD::GET_INFO_PAYLOAD(GET_INFO_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
}

GET_INFO_PAYLOAD& GET_INFO_PAYLOAD::operator=(const GET_INFO_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    
    return *this;
}

GET_INFO_PAYLOAD& GET_INFO_PAYLOAD::operator=(GET_INFO_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    
    return *this;
}

size_t GET_INFO_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);

    return current_alignment - initial_alignment;
}

size_t GET_INFO_PAYLOAD::getCdrSerializedSize(const GET_INFO_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);
    return current_alignment - initial_alignment;
}

void GET_INFO_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
}

void GET_INFO_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
}

INFO_PAYLOAD::INFO_PAYLOAD()
{


}

INFO_PAYLOAD::~INFO_PAYLOAD()
{
}

INFO_PAYLOAD::INFO_PAYLOAD(const INFO_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    resource_info_ = x.resource_info_;
}

INFO_PAYLOAD::INFO_PAYLOAD(INFO_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    resource_info_ = std::move(x.resource_info_);
}

INFO_PAYLOAD& INFO_PAYLOAD::operator=(const INFO_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    resource_info_ = x.resource_info_;
    
    return *this;
}

INFO_PAYLOAD& INFO_PAYLOAD::operator=(INFO_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    resource_info_ = std::move(x.resource_info_);
    
    return *this;
}

size_t INFO_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);

    current_alignment += Info::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t INFO_PAYLOAD::getCdrSerializedSize(const INFO_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);
    current_alignment += Info::getCdrSerializedSize(data.resource_info(), current_alignment);

    return current_alignment - initial_alignment;
}

void INFO_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
    scdr << resource_info_;
}

void INFO_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
    dcdr >> resource_info_;
}

READ_RESOURCE_PAYLOAD::READ_RESOURCE_PAYLOAD()
{


}

READ_RESOURCE_PAYLOAD::~READ_RESOURCE_PAYLOAD()
{
}

READ_RESOURCE_PAYLOAD::READ_RESOURCE_PAYLOAD(const READ_RESOURCE_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    datareader_spec_ = x.datareader_spec_;
}

READ_RESOURCE_PAYLOAD::READ_RESOURCE_PAYLOAD(READ_RESOURCE_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    datareader_spec_ = std::move(x.datareader_spec_);
}

READ_RESOURCE_PAYLOAD& READ_RESOURCE_PAYLOAD::operator=(const READ_RESOURCE_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    datareader_spec_ = x.datareader_spec_;
    
    return *this;
}

READ_RESOURCE_PAYLOAD& READ_RESOURCE_PAYLOAD::operator=(READ_RESOURCE_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    datareader_spec_ = std::move(x.datareader_spec_);
    
    return *this;
}

size_t READ_RESOURCE_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);

    current_alignment += DataReaderReadeSpec::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t READ_RESOURCE_PAYLOAD::getCdrSerializedSize(const READ_RESOURCE_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);
    current_alignment += DataReaderReadeSpec::getCdrSerializedSize(data.datareader_spec(), current_alignment);

    return current_alignment - initial_alignment;
}

void READ_RESOURCE_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
    scdr << datareader_spec_;
}

void READ_RESOURCE_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
    dcdr >> datareader_spec_;
}

READ_DATA_PAYLOAD::READ_DATA_PAYLOAD()
{


    max_messages_ = 0;
    read_mode_ = 0;
    max_elapsed_time_ = 0;
    max_rate_ = 0;

    max_samples_ = 0;
    include_sample_info_ = false;
}

READ_DATA_PAYLOAD::~READ_DATA_PAYLOAD()
{
}

READ_DATA_PAYLOAD::READ_DATA_PAYLOAD(const READ_DATA_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    object_id_ = x.object_id_;
    max_messages_ = x.max_messages_;
    read_mode_ = x.read_mode_;
    max_elapsed_time_ = x.max_elapsed_time_;
    max_rate_ = x.max_rate_;
//    content_filter_expression_ = x.content_filter_expression_;
    max_samples_ = x.max_samples_;
    include_sample_info_ = x.include_sample_info_;
}

READ_DATA_PAYLOAD::READ_DATA_PAYLOAD(READ_DATA_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    object_id_ = std::move(x.object_id_);
    max_messages_ = x.max_messages_;
    read_mode_ = x.read_mode_;
    max_elapsed_time_ = x.max_elapsed_time_;
    max_rate_ = x.max_rate_;
//    content_filter_expression_ = std::move(x.content_filter_expression_);
    max_samples_ = x.max_samples_;
    include_sample_info_ = x.include_sample_info_;
}

READ_DATA_PAYLOAD& READ_DATA_PAYLOAD::operator=(const READ_DATA_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    object_id_ = x.object_id_;
    max_messages_ = x.max_messages_;
    read_mode_ = x.read_mode_;
    max_elapsed_time_ = x.max_elapsed_time_;
    max_rate_ = x.max_rate_;
//    content_filter_expression_ = x.content_filter_expression_;
    max_samples_ = x.max_samples_;
    include_sample_info_ = x.include_sample_info_;
    
    return *this;
}

READ_DATA_PAYLOAD& READ_DATA_PAYLOAD::operator=(READ_DATA_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    object_id_ = std::move(x.object_id_);
    max_messages_ = x.max_messages_;
    read_mode_ = x.read_mode_;
    max_elapsed_time_ = x.max_elapsed_time_;
    max_rate_ = x.max_rate_;
//    content_filter_expression_ = std::move(x.content_filter_expression_);
    max_samples_ = x.max_samples_;
    include_sample_info_ = x.include_sample_info_;
    
    return *this;
}

size_t READ_DATA_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);

    current_alignment += ((3) * 1);

    current_alignment += 2;
    current_alignment += 1;
    current_alignment += 4;
    current_alignment += 4;
    current_alignment += 2;
    current_alignment += 1;


    return current_alignment - initial_alignment;
}

size_t READ_DATA_PAYLOAD::getCdrSerializedSize(const READ_DATA_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);
    current_alignment += ((3) * 1);
    current_alignment += 2;

    current_alignment += 1;

    current_alignment += 4;

    current_alignment += 4;

    current_alignment += 2;

    current_alignment += 1;


    return current_alignment - initial_alignment;
}

void READ_DATA_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
    scdr << object_id_;
    scdr << max_messages_;
    scdr << read_mode_;
    scdr << max_elapsed_time_;
    scdr << max_rate_;
    //scdr << content_filter_expression_;
    scdr << max_samples_;
    scdr << include_sample_info_;
}

void READ_DATA_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
    dcdr >> object_id_;
    dcdr >> max_messages_;
    dcdr >> read_mode_;
    dcdr >> max_elapsed_time_;
    dcdr >> max_rate_;
    //dcdr >> content_filter_expression_;
    dcdr >> max_samples_;
    dcdr >> include_sample_info_;
}

DATA_PAYLOAD::DATA_PAYLOAD()
{



}

DATA_PAYLOAD::~DATA_PAYLOAD()
{
}

DATA_PAYLOAD::DATA_PAYLOAD(const DATA_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    resource_id_ = x.resource_id_;
    data_reader_ = x.data_reader_;
}

DATA_PAYLOAD::DATA_PAYLOAD(DATA_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    resource_id_ = std::move(x.resource_id_);
    data_reader_ = std::move(x.data_reader_);
}

DATA_PAYLOAD& DATA_PAYLOAD::operator=(const DATA_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    resource_id_ = x.resource_id_;
    data_reader_ = x.data_reader_;
    
    return *this;
}

DATA_PAYLOAD& DATA_PAYLOAD::operator=(DATA_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    resource_id_ = std::move(x.resource_id_);
    data_reader_ = std::move(x.data_reader_);
    
    return *this;
}

size_t DATA_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);

    current_alignment += ((3) * 1);

    current_alignment += RT_Data::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t DATA_PAYLOAD::getCdrSerializedSize(const DATA_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);
    current_alignment += ((3) * 1);
    current_alignment += RT_Data::getCdrSerializedSize(data.data_reader(), current_alignment);

    return current_alignment - initial_alignment;
}

void DATA_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
    scdr << resource_id_;
    scdr << data_reader_;
}

void DATA_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
    dcdr >> resource_id_;
    dcdr >> data_reader_;
}

WRITE_DATA_PAYLOAD::WRITE_DATA_PAYLOAD()
{



}

WRITE_DATA_PAYLOAD::~WRITE_DATA_PAYLOAD()
{
}

WRITE_DATA_PAYLOAD::WRITE_DATA_PAYLOAD(const WRITE_DATA_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    object_id_ = x.object_id_;
    data_writer_ = x.data_writer_;
}

WRITE_DATA_PAYLOAD::WRITE_DATA_PAYLOAD(WRITE_DATA_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    object_id_ = std::move(x.object_id_);
    data_writer_ = std::move(x.data_writer_);
}

WRITE_DATA_PAYLOAD& WRITE_DATA_PAYLOAD::operator=(const WRITE_DATA_PAYLOAD &x)
{
    request_id_ = x.request_id_;
    object_id_ = x.object_id_;
    data_writer_ = x.data_writer_;
    
    return *this;
}

WRITE_DATA_PAYLOAD& WRITE_DATA_PAYLOAD::operator=(WRITE_DATA_PAYLOAD &&x)
{
    request_id_ = std::move(x.request_id_);
    object_id_ = std::move(x.object_id_);
    data_writer_ = std::move(x.data_writer_);
    
    return *this;
}

size_t WRITE_DATA_PAYLOAD::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);

    current_alignment += ((3) * 1);

    current_alignment += RT_Data::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t WRITE_DATA_PAYLOAD::getCdrSerializedSize(const WRITE_DATA_PAYLOAD& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ((4) * 1);
    current_alignment += ((3) * 1);
    current_alignment += RT_Data::getCdrSerializedSize(data.data_writer(), current_alignment);

    return current_alignment - initial_alignment;
}

void WRITE_DATA_PAYLOAD::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << request_id_;
    scdr << object_id_;
    scdr << data_writer_;
}

void WRITE_DATA_PAYLOAD::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr >> request_id_;
    dcdr >> object_id_;
    dcdr >> data_writer_;
}


} /* namespace micrortps */
} /* namespace eprosima */
