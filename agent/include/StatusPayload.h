// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file StatusPayload.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _StatusPayload_H_
#define _StatusPayload_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(StatusPayload_SOURCE)
#define StatusPayload_DllAPI __declspec( dllexport )
#else
#define StatusPayload_DllAPI __declspec( dllimport )
#endif // StatusPayload_SOURCE
#else
#define StatusPayload_DllAPI
#endif
#else
#define StatusPayload_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

typedef std::array<uint8_t, 2> RequestId;
typedef std::array<uint8_t, 3> ObjectId;
typedef uint8_t ObjectKind;

const ObjectKind OBJK_INVALID     = 0x0;
// const ObjectKind OBJK_SESSION  = 0x1;
const ObjectKind OBJK_PARTICIPANT = 0x1; // Matches RTPS EntityKind
const ObjectKind OBJK_TOPIC       = 0x4;
const ObjectKind OBJK_DATAWRITER  = 0x3; // Matches RTPS EntityKind
const ObjectKind OBJK_DATAREADER  = 0x7; // Matches RTPS EntityKind
const ObjectKind OBJK_SUBSCRIBER  = 0x8;
const ObjectKind OBJK_PUBLISHER   = 0x9;
const ObjectKind OBJK_TYPE        = 0x10;
const ObjectKind OBJK_QOSPROFILE  = 0x11;
const ObjectKind OBJK_APPLICATION = 0x20;
const ObjectKind OBJK_CLIENT      = 0x21;
/*!
 * @brief This class represents the structure OBJK_DATAREADER_Status defined by the user in the IDL file.
 * @ingroup STATUSPAYLOAD
 */
class OBJK_DATAREADER_Status
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OBJK_DATAREADER_Status();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OBJK_DATAREADER_Status();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OBJK_DATAREADER_Status that will be copied.
     */
    eProsima_user_DllExport OBJK_DATAREADER_Status(const OBJK_DATAREADER_Status &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object OBJK_DATAREADER_Status that will be copied.
     */
    eProsima_user_DllExport OBJK_DATAREADER_Status(OBJK_DATAREADER_Status &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OBJK_DATAREADER_Status that will be copied.
     */
    eProsima_user_DllExport OBJK_DATAREADER_Status& operator=(const OBJK_DATAREADER_Status &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object OBJK_DATAREADER_Status that will be copied.
     */
    eProsima_user_DllExport OBJK_DATAREADER_Status& operator=(OBJK_DATAREADER_Status &&x);
    
    /*!
     * @brief This function sets a value in member highest_acked_num
     * @param _highest_acked_num New value for member highest_acked_num
     */
    inline eProsima_user_DllExport void highest_acked_num(int16_t _highest_acked_num)
    {
        m_highest_acked_num = _highest_acked_num;
    }

    /*!
     * @brief This function returns the value of member highest_acked_num
     * @return Value of member highest_acked_num
     */
    inline eProsima_user_DllExport int16_t highest_acked_num() const
    {
        return m_highest_acked_num;
    }

    /*!
     * @brief This function returns a reference to member highest_acked_num
     * @return Reference to member highest_acked_num
     */
    inline eProsima_user_DllExport int16_t& highest_acked_num()
    {
        return m_highest_acked_num;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const OBJK_DATAREADER_Status& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    int16_t m_highest_acked_num;
};
/*!
 * @brief This class represents the structure OBJK_DATAWRITER_Status defined by the user in the IDL file.
 * @ingroup STATUSPAYLOAD
 */
class OBJK_DATAWRITER_Status
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OBJK_DATAWRITER_Status();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OBJK_DATAWRITER_Status();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OBJK_DATAWRITER_Status that will be copied.
     */
    eProsima_user_DllExport OBJK_DATAWRITER_Status(const OBJK_DATAWRITER_Status &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object OBJK_DATAWRITER_Status that will be copied.
     */
    eProsima_user_DllExport OBJK_DATAWRITER_Status(OBJK_DATAWRITER_Status &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OBJK_DATAWRITER_Status that will be copied.
     */
    eProsima_user_DllExport OBJK_DATAWRITER_Status& operator=(const OBJK_DATAWRITER_Status &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object OBJK_DATAWRITER_Status that will be copied.
     */
    eProsima_user_DllExport OBJK_DATAWRITER_Status& operator=(OBJK_DATAWRITER_Status &&x);
    
    /*!
     * @brief This function sets a value in member stream_seq_num
     * @param _stream_seq_num New value for member stream_seq_num
     */
    inline eProsima_user_DllExport void stream_seq_num(int16_t _stream_seq_num)
    {
        m_stream_seq_num = _stream_seq_num;
    }

    /*!
     * @brief This function returns the value of member stream_seq_num
     * @return Value of member stream_seq_num
     */
    inline eProsima_user_DllExport int16_t stream_seq_num() const
    {
        return m_stream_seq_num;
    }

    /*!
     * @brief This function returns a reference to member stream_seq_num
     * @return Reference to member stream_seq_num
     */
    inline eProsima_user_DllExport int16_t& stream_seq_num()
    {
        return m_stream_seq_num;
    }
    /*!
     * @brief This function sets a value in member sample_seq_num
     * @param _sample_seq_num New value for member sample_seq_num
     */
    inline eProsima_user_DllExport void sample_seq_num(uint64_t _sample_seq_num)
    {
        m_sample_seq_num = _sample_seq_num;
    }

    /*!
     * @brief This function returns the value of member sample_seq_num
     * @return Value of member sample_seq_num
     */
    inline eProsima_user_DllExport uint64_t sample_seq_num() const
    {
        return m_sample_seq_num;
    }

    /*!
     * @brief This function returns a reference to member sample_seq_num
     * @return Reference to member sample_seq_num
     */
    inline eProsima_user_DllExport uint64_t& sample_seq_num()
    {
        return m_sample_seq_num;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const OBJK_DATAWRITER_Status& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    int16_t m_stream_seq_num;
    uint64_t m_sample_seq_num;
};
/*!
 * @brief This class represents the union StatusVariant defined by the user in the IDL file.
 * @ingroup STATUSPAYLOAD
 */
class StatusVariant
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StatusVariant();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StatusVariant();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StatusVariant that will be copied.
     */
    eProsima_user_DllExport StatusVariant(const StatusVariant &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object StatusVariant that will be copied.
     */
    eProsima_user_DllExport StatusVariant(StatusVariant &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StatusVariant that will be copied.
     */
    eProsima_user_DllExport StatusVariant& operator=(const StatusVariant &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object StatusVariant that will be copied.
     */
    eProsima_user_DllExport StatusVariant& operator=(StatusVariant &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(ObjectKind __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport ObjectKind _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport ObjectKind& _d();
    
    /*!
     * @brief This function copies the value in member data_writer
     * @param _data_writer New value to be copied in member data_writer
     */
    eProsima_user_DllExport void data_writer(const OBJK_DATAWRITER_Status &_data_writer);

    /*!
     * @brief This function moves the value in member data_writer
     * @param _data_writer New value to be moved in member data_writer
     */
    eProsima_user_DllExport void data_writer(OBJK_DATAWRITER_Status &&_data_writer);

    /*!
     * @brief This function returns a constant reference to member data_writer
     * @return Constant reference to member data_writer
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const OBJK_DATAWRITER_Status& data_writer() const;

    /*!
     * @brief This function returns a reference to member data_writer
     * @return Reference to member data_writer
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport OBJK_DATAWRITER_Status& data_writer();
    /*!
     * @brief This function copies the value in member data_reader
     * @param _data_reader New value to be copied in member data_reader
     */
    eProsima_user_DllExport void data_reader(const OBJK_DATAREADER_Status &_data_reader);

    /*!
     * @brief This function moves the value in member data_reader
     * @param _data_reader New value to be moved in member data_reader
     */
    eProsima_user_DllExport void data_reader(OBJK_DATAREADER_Status &&_data_reader);

    /*!
     * @brief This function returns a constant reference to member data_reader
     * @return Constant reference to member data_reader
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const OBJK_DATAREADER_Status& data_reader() const;

    /*!
     * @brief This function returns a reference to member data_reader
     * @return Reference to member data_reader
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport OBJK_DATAREADER_Status& data_reader();
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const StatusVariant& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    ObjectKind m__d;
    
    OBJK_DATAWRITER_Status m_data_writer;
    OBJK_DATAREADER_Status m_data_reader;
};
/*!
 * @brief This class represents the structure ResultStatus defined by the user in the IDL file.
 * @ingroup STATUSPAYLOAD
 */
class ResultStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ResultStatus();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ResultStatus();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ResultStatus that will be copied.
     */
    eProsima_user_DllExport ResultStatus(const ResultStatus &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object ResultStatus that will be copied.
     */
    eProsima_user_DllExport ResultStatus(ResultStatus &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ResultStatus that will be copied.
     */
    eProsima_user_DllExport ResultStatus& operator=(const ResultStatus &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object ResultStatus that will be copied.
     */
    eProsima_user_DllExport ResultStatus& operator=(ResultStatus &&x);
    
    /*!
     * @brief This function copies the value in member request_id
     * @param _request_id New value to be copied in member request_id
     */
    inline eProsima_user_DllExport void request_id(const RequestId &_request_id)
    {
        m_request_id = _request_id;
    }

    /*!
     * @brief This function moves the value in member request_id
     * @param _request_id New value to be moved in member request_id
     */
    inline eProsima_user_DllExport void request_id(RequestId &&_request_id)
    {
        m_request_id = std::move(_request_id);
    }

    /*!
     * @brief This function returns a constant reference to member request_id
     * @return Constant reference to member request_id
     */
    inline eProsima_user_DllExport const RequestId& request_id() const
    {
        return m_request_id;
    }

    /*!
     * @brief This function returns a reference to member request_id
     * @return Reference to member request_id
     */
    inline eProsima_user_DllExport RequestId& request_id()
    {
        return m_request_id;
    }
    /*!
     * @brief This function sets a value in member status
     * @param _status New value for member status
     */
    inline eProsima_user_DllExport void status(uint8_t _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function returns the value of member status
     * @return Value of member status
     */
    inline eProsima_user_DllExport uint8_t status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    inline eProsima_user_DllExport uint8_t& status()
    {
        return m_status;
    }
    /*!
     * @brief This function sets a value in member implementation_status
     * @param _implementation_status New value for member implementation_status
     */
    inline eProsima_user_DllExport void implementation_status(uint8_t _implementation_status)
    {
        m_implementation_status = _implementation_status;
    }

    /*!
     * @brief This function returns the value of member implementation_status
     * @return Value of member implementation_status
     */
    inline eProsima_user_DllExport uint8_t implementation_status() const
    {
        return m_implementation_status;
    }

    /*!
     * @brief This function returns a reference to member implementation_status
     * @return Reference to member implementation_status
     */
    inline eProsima_user_DllExport uint8_t& implementation_status()
    {
        return m_implementation_status;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const ResultStatus& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    RequestId m_request_id;
    uint8_t m_status;
    uint8_t m_implementation_status;
};
/*!
 * @brief This class represents the structure Status defined by the user in the IDL file.
 * @ingroup STATUSPAYLOAD
 */
class Status
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Status();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Status();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Status that will be copied.
     */
    eProsima_user_DllExport Status(const Status &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Status that will be copied.
     */
    eProsima_user_DllExport Status(Status &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Status that will be copied.
     */
    eProsima_user_DllExport Status& operator=(const Status &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Status that will be copied.
     */
    eProsima_user_DllExport Status& operator=(Status &&x);
    
    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    inline eProsima_user_DllExport void result(const ResultStatus &_result)
    {
        m_result = _result;
    }

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    inline eProsima_user_DllExport void result(ResultStatus &&_result)
    {
        m_result = std::move(_result);
    }

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     */
    inline eProsima_user_DllExport const ResultStatus& result() const
    {
        return m_result;
    }

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     */
    inline eProsima_user_DllExport ResultStatus& result()
    {
        return m_result;
    }
    /*!
     * @brief This function copies the value in member object_id
     * @param _object_id New value to be copied in member object_id
     */
    inline eProsima_user_DllExport void object_id(const ObjectId &_object_id)
    {
        m_object_id = _object_id;
    }

    /*!
     * @brief This function moves the value in member object_id
     * @param _object_id New value to be moved in member object_id
     */
    inline eProsima_user_DllExport void object_id(ObjectId &&_object_id)
    {
        m_object_id = std::move(_object_id);
    }

    /*!
     * @brief This function returns a constant reference to member object_id
     * @return Constant reference to member object_id
     */
    inline eProsima_user_DllExport const ObjectId& object_id() const
    {
        return m_object_id;
    }

    /*!
     * @brief This function returns a reference to member object_id
     * @return Reference to member object_id
     */
    inline eProsima_user_DllExport ObjectId& object_id()
    {
        return m_object_id;
    }
    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    inline eProsima_user_DllExport void status(const StatusVariant &_status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    inline eProsima_user_DllExport void status(StatusVariant &&_status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    inline eProsima_user_DllExport const StatusVariant& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    inline eProsima_user_DllExport StatusVariant& status()
    {
        return m_status;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Status& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    ResultStatus m_result;
    ObjectId m_object_id;
    StatusVariant m_status;
};

#endif // _StatusPayload_H_