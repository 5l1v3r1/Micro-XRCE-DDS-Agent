// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Payloads.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _Payloads_H_
#define _Payloads_H_

// TODO Poner en el contexto.
#include "ObjectVariant.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure CREATE_PAYLOAD defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class CREATE_PAYLOAD
{
public:

    /*!
     * @brief Default constructor.
     */
     CREATE_PAYLOAD();
    
    /*!
     * @brief Default destructor.
     */
     ~CREATE_PAYLOAD();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CREATE_PAYLOAD that will be copied.
     */
     CREATE_PAYLOAD(const CREATE_PAYLOAD &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object CREATE_PAYLOAD that will be copied.
     */
     CREATE_PAYLOAD(CREATE_PAYLOAD &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CREATE_PAYLOAD that will be copied.
     */
     CREATE_PAYLOAD& operator=(const CREATE_PAYLOAD &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object CREATE_PAYLOAD that will be copied.
     */
     CREATE_PAYLOAD& operator=(CREATE_PAYLOAD &&x);
    
    /*!
     * @brief This function copies the value in member request_id
     * @param _request_id New value to be copied in member request_id
     */
    inline  void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
     * @brief This function moves the value in member request_id
     * @param _request_id New value to be moved in member request_id
     */
    inline  void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
     * @brief This function returns a constant reference to member request_id
     * @return Constant reference to member request_id
     */
    inline  const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
     * @brief This function returns a reference to member request_id
     * @return Reference to member request_id
     */
    inline  RequestId& request_id()
    {
        return request_id_;
    }
    /*!
     * @brief This function copies the value in member object_id
     * @param _object_id New value to be copied in member object_id
     */
    inline  void object_id(const ObjectId &_object_id)
    {
        object_id_ = _object_id;
    }

    /*!
     * @brief This function moves the value in member object_id
     * @param _object_id New value to be moved in member object_id
     */
    inline  void object_id(ObjectId &&_object_id)
    {
        object_id_ = std::move(_object_id);
    }

    /*!
     * @brief This function returns a constant reference to member object_id
     * @return Constant reference to member object_id
     */
    inline  const ObjectId& object_id() const
    {
        return object_id_;
    }

    /*!
     * @brief This function returns a reference to member object_id
     * @return Reference to member object_id
     */
    inline  ObjectId& object_id()
    {
        return object_id_;
    }
    /*!
     * @brief This function copies the value in member object_representation
     * @param _object_representation New value to be copied in member object_representation
     */
    inline  void object_representation(const ObjectVariant &_object_representation)
    {
        object_representation_ = _object_representation;
    }

    /*!
     * @brief This function moves the value in member object_representation
     * @param _object_representation New value to be moved in member object_representation
     */
    inline  void object_representation(ObjectVariant &&_object_representation)
    {
        object_representation_ = std::move(_object_representation);
    }

    /*!
     * @brief This function returns a constant reference to member object_representation
     * @return Constant reference to member object_representation
     */
    inline  const ObjectVariant& object_representation() const
    {
        return object_representation_;
    }

    /*!
     * @brief This function returns a reference to member object_representation
     * @return Reference to member object_representation
     */
    inline  ObjectVariant& object_representation()
    {
        return object_representation_;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
     static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
     static size_t getCdrSerializedSize(const CREATE_PAYLOAD& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
     void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
     void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    RequestId request_id_;
    ObjectId object_id_;
    ObjectVariant object_representation_;
};

/*!
* @brief This class represents the structure DELETE_PAYLOAD defined by the user in the IDL file.
* @ingroup PAYLOADS
*/
class DELETE_PAYLOAD
{
public:

    /*!
    * @brief Default constructor.
    */
    DELETE_PAYLOAD();

    /*!
    * @brief Default destructor.
    */
    ~DELETE_PAYLOAD();

    /*!
    * @brief Copy constructor.
    * @param x Reference to the object DELETE_PAYLOAD that will be copied.
    */
    DELETE_PAYLOAD(const DELETE_PAYLOAD &x);

    /*!
    * @brief Move constructor.
    * @param x Reference to the object DELETE_PAYLOAD that will be copied.
    */
    DELETE_PAYLOAD(DELETE_PAYLOAD &&x);

    /*!
    * @brief Copy assignment.
    * @param x Reference to the object DELETE_PAYLOAD that will be copied.
    */
    DELETE_PAYLOAD& operator=(const DELETE_PAYLOAD &x);

    /*!
    * @brief Move assignment.
    * @param x Reference to the object DELETE_PAYLOAD that will be copied.
    */
    DELETE_PAYLOAD& operator=(DELETE_PAYLOAD &&x);

    /*!
    * @brief This function copies the value in member request_id
    * @param _request_id New value to be copied in member request_id
    */
    inline void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
    * @brief This function moves the value in member request_id
    * @param _request_id New value to be moved in member request_id
    */
    inline void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
    * @brief This function returns a constant reference to member request_id
    * @return Constant reference to member request_id
    */
    inline const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
    * @brief This function returns a reference to member request_id
    * @return Reference to member request_id
    */
    inline RequestId& request_id()
    {
        return request_id_;
    }
    /*!
    * @brief This function copies the value in member object_id
    * @param _object_id New value to be copied in member object_id
    */
    inline void object_id(const ObjectId &_object_id)
    {
        object_id_ = _object_id;
    }

    /*!
    * @brief This function moves the value in member object_id
    * @param _object_id New value to be moved in member object_id
    */
    inline void object_id(ObjectId &&_object_id)
    {
        object_id_ = std::move(_object_id);
    }

    /*!
    * @brief This function returns a constant reference to member object_id
    * @return Constant reference to member object_id
    */
    inline const ObjectId& object_id() const
    {
        return object_id_;
    }

    /*!
    * @brief This function returns a reference to member object_id
    * @return Reference to member object_id
    */
    inline ObjectId& object_id()
    {
        return object_id_;
    }

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
    * @brief This function returns the serialized size of a data depending on the buffer alignment.
    * @param data Data which is calculated its serialized size.
    * @param current_alignment Buffer alignment.
    * @return Serialized size.
    */
    static size_t getCdrSerializedSize(const DELETE_PAYLOAD& data, size_t current_alignment = 0);


    /*!
    * @brief This function serializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
    * @brief This function deserializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    RequestId request_id_;
    ObjectId object_id_;
};

/*!
 * @brief This class represents the structure RESOURCE_STATUS_PAYLOAD defined by the user in the IDL file.
 * @ingroup PAYLOADS
 */
class RESOURCE_STATUS_PAYLOAD
{
public:

    /*!
     * @brief Default constructor.
     */
    RESOURCE_STATUS_PAYLOAD();
    
    /*!
     * @brief Default destructor.
     */
    ~RESOURCE_STATUS_PAYLOAD();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RESOURCE_STATUS_PAYLOAD that will be copied.
     */
    RESOURCE_STATUS_PAYLOAD(const RESOURCE_STATUS_PAYLOAD &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object RESOURCE_STATUS_PAYLOAD that will be copied.
     */
    RESOURCE_STATUS_PAYLOAD(RESOURCE_STATUS_PAYLOAD &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RESOURCE_STATUS_PAYLOAD that will be copied.
     */
    RESOURCE_STATUS_PAYLOAD& operator=(const RESOURCE_STATUS_PAYLOAD &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object RESOURCE_STATUS_PAYLOAD that will be copied.
     */
    RESOURCE_STATUS_PAYLOAD& operator=(RESOURCE_STATUS_PAYLOAD &&x);
    
    /*!
     * @brief This function copies the value in member request_id
     * @param _request_id New value to be copied in member request_id
     */
    inline void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
     * @brief This function moves the value in member request_id
     * @param _request_id New value to be moved in member request_id
     */
    inline void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
     * @brief This function returns a constant reference to member request_id
     * @return Constant reference to member request_id
     */
    inline const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
     * @brief This function returns a reference to member request_id
     * @return Reference to member request_id
     */
    inline RequestId& request_id()
    {
        return request_id_;
    }
    /*!
     * @brief This function copies the value in member request_status
     * @param _request_status New value to be copied in member request_status
     */
    inline void request_status(const Status &_request_status)
    {
        request_status_ = _request_status;
    }

    /*!
     * @brief This function moves the value in member request_status
     * @param _request_status New value to be moved in member request_status
     */
    inline void request_status(Status &&_request_status)
    {
        request_status_ = std::move(_request_status);
    }

    /*!
     * @brief This function returns a constant reference to member request_status
     * @return Constant reference to member request_status
     */
    inline const Status& request_status() const
    {
        return request_status_;
    }

    /*!
     * @brief This function returns a reference to member request_status
     * @return Reference to member request_status
     */
    inline Status& request_status()
    {
        return request_status_;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    static size_t getCdrSerializedSize(const RESOURCE_STATUS_PAYLOAD& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    RequestId request_id_;
    Status request_status_;
};

/*!
* @brief This class represents the structure GET_INFO_PAYLOAD defined by the user in the IDL file.
* @ingroup PAYLOADS
*/
class GET_INFO_PAYLOAD
{
public:

    /*!
    * @brief Default constructor.
    */
    GET_INFO_PAYLOAD();

    /*!
    * @brief Default destructor.
    */
    ~GET_INFO_PAYLOAD();

    /*!
    * @brief Copy constructor.
    * @param x Reference to the object GET_INFO_PAYLOAD that will be copied.
    */
    GET_INFO_PAYLOAD(const GET_INFO_PAYLOAD &x);

    /*!
    * @brief Move constructor.
    * @param x Reference to the object GET_INFO_PAYLOAD that will be copied.
    */
    GET_INFO_PAYLOAD(GET_INFO_PAYLOAD &&x);

    /*!
    * @brief Copy assignment.
    * @param x Reference to the object GET_INFO_PAYLOAD that will be copied.
    */
    GET_INFO_PAYLOAD& operator=(const GET_INFO_PAYLOAD &x);

    /*!
    * @brief Move assignment.
    * @param x Reference to the object GET_INFO_PAYLOAD that will be copied.
    */
    GET_INFO_PAYLOAD& operator=(GET_INFO_PAYLOAD &&x);

    /*!
    * @brief This function copies the value in member request_id
    * @param _request_id New value to be copied in member request_id
    */
    inline void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
    * @brief This function moves the value in member request_id
    * @param _request_id New value to be moved in member request_id
    */
    inline void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
    * @brief This function returns a constant reference to member request_id
    * @return Constant reference to member request_id
    */
    inline const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
    * @brief This function returns a reference to member request_id
    * @return Reference to member request_id
    */
    inline RequestId& request_id()
    {
        return request_id_;
    }

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
    * @brief This function returns the serialized size of a data depending on the buffer alignment.
    * @param data Data which is calculated its serialized size.
    * @param current_alignment Buffer alignment.
    * @return Serialized size.
    */
    static size_t getCdrSerializedSize(const GET_INFO_PAYLOAD& data, size_t current_alignment = 0);


    /*!
    * @brief This function serializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
    * @brief This function deserializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    RequestId request_id_;
};
/*!
* @brief This class represents the structure INFO_PAYLOAD defined by the user in the IDL file.
* @ingroup PAYLOADS
*/
class INFO_PAYLOAD
{
public:

    /*!
    * @brief Default constructor.
    */
    INFO_PAYLOAD();

    /*!
    * @brief Default destructor.
    */
    ~INFO_PAYLOAD();

    /*!
    * @brief Copy constructor.
    * @param x Reference to the object INFO_PAYLOAD that will be copied.
    */
    INFO_PAYLOAD(const INFO_PAYLOAD &x);

    /*!
    * @brief Move constructor.
    * @param x Reference to the object INFO_PAYLOAD that will be copied.
    */
    INFO_PAYLOAD(INFO_PAYLOAD &&x);

    /*!
    * @brief Copy assignment.
    * @param x Reference to the object INFO_PAYLOAD that will be copied.
    */
    INFO_PAYLOAD& operator=(const INFO_PAYLOAD &x);

    /*!
    * @brief Move assignment.
    * @param x Reference to the object INFO_PAYLOAD that will be copied.
    */
    INFO_PAYLOAD& operator=(INFO_PAYLOAD &&x);

    /*!
    * @brief This function copies the value in member request_id
    * @param _request_id New value to be copied in member request_id
    */
    inline void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
    * @brief This function moves the value in member request_id
    * @param _request_id New value to be moved in member request_id
    */
    inline void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
    * @brief This function returns a constant reference to member request_id
    * @return Constant reference to member request_id
    */
    inline const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
    * @brief This function returns a reference to member request_id
    * @return Reference to member request_id
    */
    inline RequestId& request_id()
    {
        return request_id_;
    }
    /*!
    * @brief This function copies the value in member resource_info
    * @param _resource_info New value to be copied in member resource_info
    */
    inline void resource_info(const Info &_resource_info)
    {
        resource_info_ = _resource_info;
    }

    /*!
    * @brief This function moves the value in member resource_info
    * @param _resource_info New value to be moved in member resource_info
    */
    inline void resource_info(Info &&_resource_info)
    {
        resource_info_ = std::move(_resource_info);
    }

    /*!
    * @brief This function returns a constant reference to member resource_info
    * @return Constant reference to member resource_info
    */
    inline const Info& resource_info() const
    {
        return resource_info_;
    }

    /*!
    * @brief This function returns a reference to member resource_info
    * @return Reference to member resource_info
    */
    inline Info& resource_info()
    {
        return resource_info_;
    }

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
    * @brief This function returns the serialized size of a data depending on the buffer alignment.
    * @param data Data which is calculated its serialized size.
    * @param current_alignment Buffer alignment.
    * @return Serialized size.
    */
    static size_t getCdrSerializedSize(const INFO_PAYLOAD& data, size_t current_alignment = 0);


    /*!
    * @brief This function serializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
    * @brief This function deserializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    RequestId request_id_;
    Info resource_info_;
};
/*!
* @brief This class represents the structure READ_RESOURCE_PAYLOAD defined by the user in the IDL file.
* @ingroup PAYLOADS
*/
class READ_RESOURCE_PAYLOAD
{
public:

    /*!
    * @brief Default constructor.
    */
    READ_RESOURCE_PAYLOAD();

    /*!
    * @brief Default destructor.
    */
    ~READ_RESOURCE_PAYLOAD();

    /*!
    * @brief Copy constructor.
    * @param x Reference to the object READ_RESOURCE_PAYLOAD that will be copied.
    */
    READ_RESOURCE_PAYLOAD(const READ_RESOURCE_PAYLOAD &x);

    /*!
    * @brief Move constructor.
    * @param x Reference to the object READ_RESOURCE_PAYLOAD that will be copied.
    */
    READ_RESOURCE_PAYLOAD(READ_RESOURCE_PAYLOAD &&x);

    /*!
    * @brief Copy assignment.
    * @param x Reference to the object READ_RESOURCE_PAYLOAD that will be copied.
    */
    READ_RESOURCE_PAYLOAD& operator=(const READ_RESOURCE_PAYLOAD &x);

    /*!
    * @brief Move assignment.
    * @param x Reference to the object READ_RESOURCE_PAYLOAD that will be copied.
    */
    READ_RESOURCE_PAYLOAD& operator=(READ_RESOURCE_PAYLOAD &&x);

    /*!
    * @brief This function copies the value in member request_id
    * @param _request_id New value to be copied in member request_id
    */
    inline void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
    * @brief This function moves the value in member request_id
    * @param _request_id New value to be moved in member request_id
    */
    inline void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
    * @brief This function returns a constant reference to member request_id
    * @return Constant reference to member request_id
    */
    inline const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
    * @brief This function returns a reference to member request_id
    * @return Reference to member request_id
    */
    inline RequestId& request_id()
    {
        return request_id_;
    }
    /*!
    * @brief This function copies the value in member datareader_spec
    * @param _datareader_spec New value to be copied in member datareader_spec
    */
    inline void datareader_spec(const DataReaderReadeSpec &_datareader_spec)
    {
        datareader_spec_ = _datareader_spec;
    }

    /*!
    * @brief This function moves the value in member datareader_spec
    * @param _datareader_spec New value to be moved in member datareader_spec
    */
    inline void datareader_spec(DataReaderReadeSpec &&_datareader_spec)
    {
        datareader_spec_ = std::move(_datareader_spec);
    }

    /*!
    * @brief This function returns a constant reference to member datareader_spec
    * @return Constant reference to member datareader_spec
    */
    inline const DataReaderReadeSpec& datareader_spec() const
    {
        return datareader_spec_;
    }

    /*!
    * @brief This function returns a reference to member datareader_spec
    * @return Reference to member datareader_spec
    */
    inline DataReaderReadeSpec& datareader_spec()
    {
        return datareader_spec_;
    }

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
    * @brief This function returns the serialized size of a data depending on the buffer alignment.
    * @param data Data which is calculated its serialized size.
    * @param current_alignment Buffer alignment.
    * @return Serialized size.
    */
    static size_t getCdrSerializedSize(const READ_RESOURCE_PAYLOAD& data, size_t current_alignment = 0);


    /*!
    * @brief This function serializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
    * @brief This function deserializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    RequestId request_id_;
    DataReaderReadeSpec datareader_spec_;
};
/*!
* @brief This class represents the structure READ_DATA_PAYLOAD defined by the user in the IDL file.
* @ingroup PAYLOADS
*/
class READ_DATA_PAYLOAD
{
public:

    /*!
    * @brief Default constructor.
    */
    READ_DATA_PAYLOAD();

    /*!
    * @brief Default destructor.
    */
    ~READ_DATA_PAYLOAD();

    /*!
    * @brief Copy constructor.
    * @param x Reference to the object READ_DATA_PAYLOAD that will be copied.
    */
    READ_DATA_PAYLOAD(const READ_DATA_PAYLOAD &x);

    /*!
    * @brief Move constructor.
    * @param x Reference to the object READ_DATA_PAYLOAD that will be copied.
    */
    READ_DATA_PAYLOAD(READ_DATA_PAYLOAD &&x);

    /*!
    * @brief Copy assignment.
    * @param x Reference to the object READ_DATA_PAYLOAD that will be copied.
    */
    READ_DATA_PAYLOAD& operator=(const READ_DATA_PAYLOAD &x);

    /*!
    * @brief Move assignment.
    * @param x Reference to the object READ_DATA_PAYLOAD that will be copied.
    */
    READ_DATA_PAYLOAD& operator=(READ_DATA_PAYLOAD &&x);

    /*!
    * @brief This function copies the value in member request_id
    * @param _request_id New value to be copied in member request_id
    */
    inline void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
    * @brief This function moves the value in member request_id
    * @param _request_id New value to be moved in member request_id
    */
    inline void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
    * @brief This function returns a constant reference to member request_id
    * @return Constant reference to member request_id
    */
    inline const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
    * @brief This function returns a reference to member request_id
    * @return Reference to member request_id
    */
    inline RequestId& request_id()
    {
        return request_id_;
    }
    /*!
    * @brief This function copies the value in member object_id
    * @param _object_id New value to be copied in member object_id
    */
    inline void object_id(const ObjectId &_object_id)
    {
        object_id_ = _object_id;
    }

    /*!
    * @brief This function moves the value in member object_id
    * @param _object_id New value to be moved in member object_id
    */
    inline void object_id(ObjectId &&_object_id)
    {
        object_id_ = std::move(_object_id);
    }

    /*!
    * @brief This function returns a constant reference to member object_id
    * @return Constant reference to member object_id
    */
    inline const ObjectId& object_id() const
    {
        return object_id_;
    }

    /*!
    * @brief This function returns a reference to member object_id
    * @return Reference to member object_id
    */
    inline ObjectId& object_id()
    {
        return object_id_;
    }
    /*!
    * @brief This function sets a value in member max_messages
    * @param _max_messages New value for member max_messages
    */
    inline void max_messages(uint16_t _max_messages)
    {
        max_messages_ = _max_messages;
    }

    /*!
    * @brief This function returns the value of member max_messages
    * @return Value of member max_messages
    */
    inline uint16_t max_messages() const
    {
        return max_messages_;
    }

    /*!
    * @brief This function returns a reference to member max_messages
    * @return Reference to member max_messages
    */
    inline uint16_t& max_messages()
    {
        return max_messages_;
    }
    /*!
    * @brief This function sets a value in member read_mode
    * @param _read_mode New value for member read_mode
    */
    inline void read_mode(ReadMode _read_mode)
    {
        read_mode_ = _read_mode;
    }

    /*!
    * @brief This function returns the value of member read_mode
    * @return Value of member read_mode
    */
    inline ReadMode read_mode() const
    {
        return read_mode_;
    }

    /*!
    * @brief This function returns a reference to member read_mode
    * @return Reference to member read_mode
    */
    inline ReadMode& read_mode()
    {
        return read_mode_;
    }
    /*!
    * @brief This function sets a value in member max_elapsed_time
    * @param _max_elapsed_time New value for member max_elapsed_time
    */
    inline void max_elapsed_time(int32_t _max_elapsed_time)
    {
        max_elapsed_time_ = _max_elapsed_time;
    }

    /*!
    * @brief This function returns the value of member max_elapsed_time
    * @return Value of member max_elapsed_time
    */
    inline int32_t max_elapsed_time() const
    {
        return max_elapsed_time_;
    }

    /*!
    * @brief This function returns a reference to member max_elapsed_time
    * @return Reference to member max_elapsed_time
    */
    inline int32_t& max_elapsed_time()
    {
        return max_elapsed_time_;
    }
    /*!
    * @brief This function sets a value in member max_rate
    * @param _max_rate New value for member max_rate
    */
    inline void max_rate(int32_t _max_rate)
    {
        max_rate_ = _max_rate;
    }

    /*!
    * @brief This function returns the value of member max_rate
    * @return Value of member max_rate
    */
    inline int32_t max_rate() const
    {
        return max_rate_;
    }

    /*!
    * @brief This function returns a reference to member max_rate
    * @return Reference to member max_rate
    */
    inline int32_t& max_rate()
    {
        return max_rate_;
    }
    /*!
    * @brief This function copies the value in member content_filter_expression
    * @param _content_filter_expression New value to be copied in member content_filter_expression
    */
    inline void content_filter_expression(const std::string &_content_filter_expression)
    {
        content_filter_expression_ = _content_filter_expression;
    }

    /*!
    * @brief This function moves the value in member content_filter_expression
    * @param _content_filter_expression New value to be moved in member content_filter_expression
    */
    inline void content_filter_expression(std::string &&_content_filter_expression)
    {
        content_filter_expression_ = std::move(_content_filter_expression);
    }

    /*!
    * @brief This function returns a constant reference to member content_filter_expression
    * @return Constant reference to member content_filter_expression
    */
    inline const std::string& content_filter_expression() const
    {
        return content_filter_expression_;
    }

    /*!
    * @brief This function returns a reference to member content_filter_expression
    * @return Reference to member content_filter_expression
    */
    inline std::string& content_filter_expression()
    {
        return content_filter_expression_;
    }
    /*!
    * @brief This function sets a value in member max_samples
    * @param _max_samples New value for member max_samples
    */
    inline void max_samples(uint16_t _max_samples)
    {
        max_samples_ = _max_samples;
    }

    /*!
    * @brief This function returns the value of member max_samples
    * @return Value of member max_samples
    */
    inline uint16_t max_samples() const
    {
        return max_samples_;
    }

    /*!
    * @brief This function returns a reference to member max_samples
    * @return Reference to member max_samples
    */
    inline uint16_t& max_samples()
    {
        return max_samples_;
    }
    /*!
    * @brief This function sets a value in member include_sample_info
    * @param _include_sample_info New value for member include_sample_info
    */
    inline void include_sample_info(bool _include_sample_info)
    {
        include_sample_info_ = _include_sample_info;
    }

    /*!
    * @brief This function returns the value of member include_sample_info
    * @return Value of member include_sample_info
    */
    inline bool include_sample_info() const
    {
        return include_sample_info_;
    }

    /*!
    * @brief This function returns a reference to member include_sample_info
    * @return Reference to member include_sample_info
    */
    inline bool& include_sample_info()
    {
        return include_sample_info_;
    }

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
    * @brief This function returns the serialized size of a data depending on the buffer alignment.
    * @param data Data which is calculated its serialized size.
    * @param current_alignment Buffer alignment.
    * @return Serialized size.
    */
    static size_t getCdrSerializedSize(const READ_DATA_PAYLOAD& data, size_t current_alignment = 0);


    /*!
    * @brief This function serializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
    * @brief This function deserializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    RequestId request_id_;
    ObjectId object_id_;
    uint16_t max_messages_;
    ReadMode read_mode_;
    int32_t max_elapsed_time_;
    int32_t max_rate_;
    std::string content_filter_expression_;
    uint16_t max_samples_;
    bool include_sample_info_;
};
/*!
* @brief This class represents the structure DATA_PAYLOAD defined by the user in the IDL file.
* @ingroup PAYLOADS
*/
class DATA_PAYLOAD
{
public:

    /*!
    * @brief Default constructor.
    */
    DATA_PAYLOAD();

    /*!
    * @brief Default destructor.
    */
    ~DATA_PAYLOAD();

    /*!
    * @brief Copy constructor.
    * @param x Reference to the object DATA_PAYLOAD that will be copied.
    */
    DATA_PAYLOAD(const DATA_PAYLOAD &x);

    /*!
    * @brief Move constructor.
    * @param x Reference to the object DATA_PAYLOAD that will be copied.
    */
    DATA_PAYLOAD(DATA_PAYLOAD &&x);

    /*!
    * @brief Copy assignment.
    * @param x Reference to the object DATA_PAYLOAD that will be copied.
    */
    DATA_PAYLOAD& operator=(const DATA_PAYLOAD &x);

    /*!
    * @brief Move assignment.
    * @param x Reference to the object DATA_PAYLOAD that will be copied.
    */
    DATA_PAYLOAD& operator=(DATA_PAYLOAD &&x);

    /*!
    * @brief This function copies the value in member request_id
    * @param _request_id New value to be copied in member request_id
    */
    inline void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
    * @brief This function moves the value in member request_id
    * @param _request_id New value to be moved in member request_id
    */
    inline void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
    * @brief This function returns a constant reference to member request_id
    * @return Constant reference to member request_id
    */
    inline const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
    * @brief This function returns a reference to member request_id
    * @return Reference to member request_id
    */
    inline RequestId& request_id()
    {
        return request_id_;
    }
    /*!
    * @brief This function copies the value in member resource_id
    * @param _resource_id New value to be copied in member resource_id
    */
    inline void resource_id(const ObjectId &_resource_id)
    {
        resource_id_ = _resource_id;
    }

    /*!
    * @brief This function moves the value in member resource_id
    * @param _resource_id New value to be moved in member resource_id
    */
    inline void resource_id(ObjectId &&_resource_id)
    {
        resource_id_ = std::move(_resource_id);
    }

    /*!
    * @brief This function returns a constant reference to member resource_id
    * @return Constant reference to member resource_id
    */
    inline const ObjectId& resource_id() const
    {
        return resource_id_;
    }

    /*!
    * @brief This function returns a reference to member resource_id
    * @return Reference to member resource_id
    */
    inline ObjectId& resource_id()
    {
        return resource_id_;
    }
    /*!
    * @brief This function copies the value in member data_reader
    * @param _data_reader New value to be copied in member data_reader
    */
    inline void data_reader(const RT_Data &_data_reader)
    {
        data_reader_ = _data_reader;
    }

    /*!
    * @brief This function moves the value in member data_reader
    * @param _data_reader New value to be moved in member data_reader
    */
    inline void data_reader(RT_Data &&_data_reader)
    {
        data_reader_ = std::move(_data_reader);
    }

    /*!
    * @brief This function returns a constant reference to member data_reader
    * @return Constant reference to member data_reader
    */
    inline const RT_Data& data_reader() const
    {
        return data_reader_;
    }

    /*!
    * @brief This function returns a reference to member data_reader
    * @return Reference to member data_reader
    */
    inline RT_Data& data_reader()
    {
        return data_reader_;
    }

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
    * @brief This function returns the serialized size of a data depending on the buffer alignment.
    * @param data Data which is calculated its serialized size.
    * @param current_alignment Buffer alignment.
    * @return Serialized size.
    */
    static size_t getCdrSerializedSize(const DATA_PAYLOAD& data, size_t current_alignment = 0);


    /*!
    * @brief This function serializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
    * @brief This function deserializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    RequestId request_id_;
    ObjectId resource_id_;
    RT_Data data_reader_;
};

/*!
* @brief This class represents the structure WRITE_DATA_PAYLOAD defined by the user in the IDL file.
* @ingroup PAYLOADS
*/
class WRITE_DATA_PAYLOAD
{
public:

    /*!
    * @brief Default constructor.
    */
    WRITE_DATA_PAYLOAD();

    /*!
    * @brief Default destructor.
    */
    ~WRITE_DATA_PAYLOAD();

    /*!
    * @brief Copy constructor.
    * @param x Reference to the object WRITE_DATA_PAYLOAD that will be copied.
    */
    WRITE_DATA_PAYLOAD(const WRITE_DATA_PAYLOAD &x);

    /*!
    * @brief Move constructor.
    * @param x Reference to the object WRITE_DATA_PAYLOAD that will be copied.
    */
    WRITE_DATA_PAYLOAD(WRITE_DATA_PAYLOAD &&x);

    /*!
    * @brief Copy assignment.
    * @param x Reference to the object WRITE_DATA_PAYLOAD that will be copied.
    */
    WRITE_DATA_PAYLOAD& operator=(const WRITE_DATA_PAYLOAD &x);

    /*!
    * @brief Move assignment.
    * @param x Reference to the object WRITE_DATA_PAYLOAD that will be copied.
    */
    WRITE_DATA_PAYLOAD& operator=(WRITE_DATA_PAYLOAD &&x);

    /*!
    * @brief This function copies the value in member request_id
    * @param _request_id New value to be copied in member request_id
    */
    inline void request_id(const RequestId &_request_id)
    {
        request_id_ = _request_id;
    }

    /*!
    * @brief This function moves the value in member request_id
    * @param _request_id New value to be moved in member request_id
    */
    inline void request_id(RequestId &&_request_id)
    {
        request_id_ = std::move(_request_id);
    }

    /*!
    * @brief This function returns a constant reference to member request_id
    * @return Constant reference to member request_id
    */
    inline const RequestId& request_id() const
    {
        return request_id_;
    }

    /*!
    * @brief This function returns a reference to member request_id
    * @return Reference to member request_id
    */
    inline RequestId& request_id()
    {
        return request_id_;
    }
    /*!
    * @brief This function copies the value in member object_id
    * @param _object_id New value to be copied in member object_id
    */
    inline void object_id(const ObjectId &_object_id)
    {
        object_id_ = _object_id;
    }

    /*!
    * @brief This function moves the value in member object_id
    * @param _object_id New value to be moved in member object_id
    */
    inline void object_id(ObjectId &&_object_id)
    {
        object_id_ = std::move(_object_id);
    }

    /*!
    * @brief This function returns a constant reference to member object_id
    * @return Constant reference to member object_id
    */
    inline const ObjectId& object_id() const
    {
        return object_id_;
    }

    /*!
    * @brief This function returns a reference to member object_id
    * @return Reference to member object_id
    */
    inline ObjectId& object_id()
    {
        return object_id_;
    }
    /*!
    * @brief This function copies the value in member data_writer
    * @param _data_writer New value to be copied in member data_writer
    */
    inline void data_writer(const RT_Data &_data_writer)
    {
        data_writer_ = _data_writer;
    }

    /*!
    * @brief This function moves the value in member data_writer
    * @param _data_writer New value to be moved in member data_writer
    */
    inline void data_writer(RT_Data &&_data_writer)
    {
        data_writer_ = std::move(_data_writer);
    }

    /*!
    * @brief This function returns a constant reference to member data_writer
    * @return Constant reference to member data_writer
    */
    inline const RT_Data& data_writer() const
    {
        return data_writer_;
    }

    /*!
    * @brief This function returns a reference to member data_writer
    * @return Reference to member data_writer
    */
    inline RT_Data& data_writer()
    {
        return data_writer_;
    }

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
    * @brief This function returns the serialized size of a data depending on the buffer alignment.
    * @param data Data which is calculated its serialized size.
    * @param current_alignment Buffer alignment.
    * @return Serialized size.
    */
    static size_t getCdrSerializedSize(const WRITE_DATA_PAYLOAD& data, size_t current_alignment = 0);


    /*!
    * @brief This function serializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
    * @brief This function deserializes an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    RequestId request_id_;
    ObjectId object_id_;
    RT_Data data_writer_;
};

#endif // _Payloads_H_